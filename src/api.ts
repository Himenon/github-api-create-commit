//
// Generated by @himenon/openapi-typescript-code-generator v0.15.0
//
// OpenApi : 3.0.3
//
// License  : MIT
// Url      : https://spdx.org/licenses/MIT
//

export namespace Schemas {
  export interface global$hook {
    type?: string;
    id?: number;
    name?: string;
    active?: boolean;
    events?: string[];
    config?: {
      url?: string;
      content_type?: string;
      insecure_ssl?: string;
      secret?: string;
    };
    updated_at?: string;
    created_at?: string;
    url?: string;
    ping_url?: string;
  }
  export interface global$hook$2 {
    type?: string;
    id?: number;
    name?: string;
    active?: boolean;
    events?: string[];
    config?: {
      url?: string;
      content_type?: string;
      insecure_ssl?: string;
    };
    updated_at?: string;
    created_at?: string;
    url?: string;
    ping_url?: string;
  }
  export interface public$key$full {
    id: number;
    key: string;
    user_id: number | null;
    repository_id: number | null;
    url: string;
    title: string;
    read_only: boolean;
    verified: boolean;
    created_at: string;
    last_used: string | null;
  }
  export interface ldap$mapping$team {
    ldap_dn?: string;
    id?: number;
    node_id?: string;
    url?: string;
    html_url?: string;
    name?: string;
    slug?: string;
    description?: string | null;
    privacy?: string;
    permission?: string;
    members_url?: string;
    repositories_url?: string;
    parent?: any | null;
  }
  /** Ldap Private User */
  export interface ldap$mapping$user {
    ldap_dn?: string;
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string | null;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
    name: string | null;
    company: string | null;
    blog: string | null;
    location: string | null;
    email: string | null;
    hireable: boolean | null;
    bio: string | null;
    twitter_username?: string | null;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    created_at: string;
    updated_at: string;
    private_gists: number;
    total_private_repos: number;
    owned_private_repos: number;
    disk_usage: number;
    collaborators: number;
    two_factor_authentication: boolean;
    plan?: {
      collaborators: number;
      name: string;
      space: number;
      private_repos: number;
    };
    suspended_at?: string | null;
    business_plus?: boolean;
  }
  /** Organization Simple */
  export interface organization$simple {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string | null;
  }
  export interface pre$receive$environment {
    id?: number;
    name?: string;
    image_url?: string;
    url?: string;
    html_url?: string;
    default_environment?: boolean;
    created_at?: string;
    hooks_count?: number;
    download?: {
      url?: string;
      state?: string;
      downloaded_at?: string | null;
      message?: string | null;
    };
  }
  export interface pre$receive$environment$download$status {
    url?: string;
    state?: string;
    downloaded_at?: string | null;
    message?: string | null;
  }
  export interface pre$receive$hook {
    id?: number;
    name?: string;
    enforcement?: string;
    script?: string;
    script_repository?: {
      id?: number;
      full_name?: string;
      url?: string;
      html_url?: string;
    };
    environment?: {
      id?: number;
      name?: string;
      image_url?: string;
      url?: string;
      html_url?: string;
      default_environment?: boolean;
      created_at?: string;
      hooks_count?: number;
      download?: {
        url?: string;
        state?: string;
        downloaded_at?: string | null;
        message?: string | null;
      };
    };
    allow_downstream_configuration?: boolean;
  }
  /** Simple User */
  export interface nullable$simple$user {
    name?: string | null;
    email?: string | null;
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string | null;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
    starred_at?: string;
  }
  /** The permissions granted to the user-to-server access token. */
  export interface app$permissions {
    /** The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. Can be one of: `read` or `write`. */
    actions?: "read" | "write";
    /** The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. Can be one of: `read` or `write`. */
    administration?: "read" | "write";
    /** The level of permission to grant the access token for checks on code. Can be one of: `read` or `write`. */
    checks?: "read" | "write";
    /** The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. Can be one of: `read` or `write`. */
    contents?: "read" | "write";
    /** The level of permission to grant the access token for deployments and deployment statuses. Can be one of: `read` or `write`. */
    deployments?: "read" | "write";
    /** The level of permission to grant the access token for managing repository environments. Can be one of: `read` or `write`. */
    environments?: "read" | "write";
    /** The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. Can be one of: `read` or `write`. */
    issues?: "read" | "write";
    /** The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. Can be one of: `read` or `write`. */
    metadata?: "read" | "write";
    /** The level of permission to grant the access token for packages published to GitHub Packages. Can be one of: `read` or `write`. */
    packages?: "read" | "write";
    /** The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. Can be one of: `read` or `write`. */
    pages?: "read" | "write";
    /** The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. Can be one of: `read` or `write`. */
    pull_requests?: "read" | "write";
    /** The level of permission to grant the access token to manage the post-receive hooks for a repository. Can be one of: `read` or `write`. */
    repository_hooks?: "read" | "write";
    /** The level of permission to grant the access token to manage repository projects, columns, and cards. Can be one of: `read`, `write`, or `admin`. */
    repository_projects?: "read" | "write" | "admin";
    /** The level of permission to grant the access token to view and manage secret scanning alerts. Can be one of: `read` or `write`. */
    secret_scanning_alerts?: "read" | "write";
    /** The level of permission to grant the access token to manage repository secrets. Can be one of: `read` or `write`. */
    secrets?: "read" | "write";
    /** The level of permission to grant the access token to view and manage security events like code scanning alerts. Can be one of: `read` or `write`. */
    security_events?: "read" | "write";
    /** The level of permission to grant the access token to manage just a single file. Can be one of: `read` or `write`. */
    single_file?: "read" | "write";
    /** The level of permission to grant the access token for commit statuses. Can be one of: `read` or `write`. */
    statuses?: "read" | "write";
    /** The level of permission to grant the access token to manage Dependabot alerts. Can be one of: `read` or `write`. */
    vulnerability_alerts?: "read" | "write";
    /** The level of permission to grant the access token to update GitHub Actions workflow files. Can be one of: `write`. */
    workflows?: "write";
    /** The level of permission to grant the access token for organization teams and members. Can be one of: `read` or `write`. */
    members?: "read" | "write";
    /** The level of permission to grant the access token to manage access to an organization. Can be one of: `read` or `write`. */
    organization_administration?: "read" | "write";
    /** The level of permission to grant the access token to manage the post-receive hooks for an organization. Can be one of: `read` or `write`. */
    organization_hooks?: "read" | "write";
    /** The level of permission to grant the access token for viewing an organization's plan. Can be one of: `read`. */
    organization_plan?: "read";
    /** The level of permission to grant the access token to manage organization projects and projects beta (where available). Can be one of: `read`, `write`, or `admin`. */
    organization_projects?: "read" | "write" | "admin";
    /** The level of permission to grant the access token for organization packages published to GitHub Packages. Can be one of: `read` or `write`. */
    organization_packages?: "read" | "write";
    /** The level of permission to grant the access token to manage organization secrets. Can be one of: `read` or `write`. */
    organization_secrets?: "read" | "write";
    /** The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. Can be one of: `read` or `write`. */
    organization_self_hosted_runners?: "read" | "write";
    /** The level of permission to grant the access token to view and manage users blocked by the organization. Can be one of: `read` or `write`. */
    organization_user_blocking?: "read" | "write";
    /** The level of permission to grant the access token to manage team discussions and related comments. Can be one of: `read` or `write`. */
    team_discussions?: "read" | "write";
  }
  /** Simple User */
  export interface simple$user {
    name?: string | null;
    email?: string | null;
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string | null;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
    starred_at?: string;
  }
  export interface nullable$scoped$installation {
    permissions: Schemas.app$permissions;
    /** Describe whether all repositories have been selected or there's a selection involved */
    repository_selection: "all" | "selected";
    single_file_name: string | null;
    has_multiple_single_files?: boolean;
    single_file_paths?: string[];
    repositories_url: string;
    account: Schemas.simple$user;
  }
  /** The authorization for an OAuth app, GitHub App, or a Personal Access Token. */
  export interface authorization {
    id: number;
    url: string;
    /** A list of scopes that this authorization is in. */
    scopes: string[] | null;
    token: string;
    token_last_eight: string | null;
    hashed_token: string | null;
    app: {
      client_id: string;
      name: string;
      url: string;
    };
    note: string | null;
    note_url: string | null;
    updated_at: string;
    created_at: string;
    fingerprint: string | null;
    user?: Schemas.nullable$simple$user;
    installation?: Schemas.nullable$scoped$installation;
    expires_at: string | null;
  }
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  export interface integration {
    /** Unique identifier of the GitHub app */
    id: number;
    /** The slug name of the GitHub app */
    slug?: string;
    node_id: string;
    owner: Schemas.nullable$simple$user;
    /** The name of the GitHub app */
    name: string;
    description: string | null;
    external_url: string;
    html_url: string;
    created_at: string;
    updated_at: string;
    /** The set of permissions for the GitHub app */
    permissions: {
      issues?: string;
      checks?: string;
      metadata?: string;
      contents?: string;
      deployments?: string;
    } & {
      [key: string]: string;
    };
    /** The list of events for the GitHub app */
    events: string[];
    /** The number of installations associated with the GitHub app */
    installations_count?: number;
    client_id?: string;
    client_secret?: string;
    webhook_secret?: string | null;
    pem?: string;
  }
  /** Basic Error */
  export interface basic$error {
    message?: string;
    documentation_url?: string;
    url?: string;
    status?: string;
  }
  /** Validation Error Simple */
  export interface validation$error$simple {
    message: string;
    documentation_url: string;
    errors?: string[];
  }
  /** The URL to which the payloads will be delivered. */
  export type webhook$config$url = string;
  /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
  export type webhook$config$content$type = string;
  /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.4/webhooks/event-payloads/#delivery-headers). */
  export type webhook$config$secret = string;
  export type webhook$config$insecure$ssl = string | number;
  /** Configuration object of the webhook */
  export interface webhook$config {
    url?: Schemas.webhook$config$url;
    content_type?: Schemas.webhook$config$content$type;
    secret?: Schemas.webhook$config$secret;
    insecure_ssl?: Schemas.webhook$config$insecure$ssl;
  }
  /** Delivery made by a webhook, without request and response information. */
  export interface hook$delivery$item {
    /** Unique identifier of the webhook delivery. */
    id: number;
    /** Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event). */
    guid: string;
    /** Time when the webhook delivery occurred. */
    delivered_at: string;
    /** Whether the webhook delivery is a redelivery. */
    redelivery: boolean;
    /** Time spent delivering. */
    duration: number;
    /** Describes the response returned after attempting the delivery. */
    status: string;
    /** Status code received when delivery was made. */
    status_code: number;
    /** The event that triggered the delivery. */
    event: string;
    /** The type of activity for the event that triggered the delivery. */
    action: string | null;
    /** The id of the GitHub App installation associated with this event. */
    installation_id: number | null;
    /** The id of the repository associated with this event. */
    repository_id: number | null;
  }
  /** Scim Error */
  export interface scim$error {
    message?: string | null;
    documentation_url?: string | null;
    detail?: string | null;
    status?: number;
    scimType?: string | null;
    schemas?: string[];
  }
  /** Validation Error */
  export interface validation$error {
    message: string;
    documentation_url: string;
    errors?: {
      resource?: string;
      field?: string;
      message?: string;
      code: string;
      index?: number;
      value?: (string | null) | (number | null) | (string[] | null);
    }[];
  }
  /** Delivery made by a webhook. */
  export interface hook$delivery {
    /** Unique identifier of the delivery. */
    id: number;
    /** Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event). */
    guid: string;
    /** Time when the delivery was delivered. */
    delivered_at: string;
    /** Whether the delivery is a redelivery. */
    redelivery: boolean;
    /** Time spent delivering. */
    duration: number;
    /** Description of the status of the attempted delivery */
    status: string;
    /** Status code received when delivery was made. */
    status_code: number;
    /** The event that triggered the delivery. */
    event: string;
    /** The type of activity for the event that triggered the delivery. */
    action: string | null;
    /** The id of the GitHub App installation associated with this event. */
    installation_id: number | null;
    /** The id of the repository associated with this event. */
    repository_id: number | null;
    /** The URL target of the delivery. */
    url?: string;
    request: {
      /** The request headers sent with the webhook delivery. */
      headers: {};
      /** The webhook payload. */
      payload: {};
    };
    response: {
      /** The response headers received when the delivery was made. */
      headers: {};
      /** The response payload received. */
      payload: string | null;
    };
  }
  /** An enterprise account */
  export interface enterprise {
    /** A short description of the enterprise. */
    description?: string | null;
    html_url: string;
    /** The enterprise's website URL. */
    website_url?: string | null;
    /** Unique identifier of the enterprise */
    id: number;
    node_id: string;
    /** The name of the enterprise. */
    name: string;
    /** The slug url identifier for the enterprise. */
    slug: string;
    created_at: string | null;
    updated_at: string | null;
    avatar_url: string;
  }
  /** Installation */
  export interface installation {
    /** The ID of the installation. */
    id: number;
    account: (Schemas.simple$user | Schemas.enterprise) | null;
    /** Describe whether all repositories have been selected or there's a selection involved */
    repository_selection: "all" | "selected";
    access_tokens_url: string;
    repositories_url: string;
    html_url: string;
    app_id: number;
    /** The ID of the user or organization this token is being scoped to. */
    target_id: number;
    target_type: string;
    permissions: Schemas.app$permissions;
    events: string[];
    created_at: string;
    updated_at: string;
    single_file_name: string | null;
    has_multiple_single_files?: boolean;
    single_file_paths?: string[];
    app_slug: string;
    suspended_by: Schemas.nullable$simple$user;
    suspended_at: string | null;
    contact_email?: string | null;
  }
  /** License Simple */
  export interface nullable$license$simple {
    key: string;
    name: string;
    url: string | null;
    spdx_id: string | null;
    node_id: string;
    html_url?: string;
  }
  /** A git repository */
  export interface repository {
    /** Unique identifier of the repository */
    id: number;
    node_id: string;
    /** The name of the repository. */
    name: string;
    full_name: string;
    license: Schemas.nullable$license$simple;
    organization?: Schemas.nullable$simple$user;
    forks: number;
    permissions?: {
      admin: boolean;
      pull: boolean;
      triage?: boolean;
      push: boolean;
      maintain?: boolean;
    };
    owner: Schemas.simple$user;
    /** Whether the repository is private or public. */
    private: boolean;
    html_url: string;
    description: string | null;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string | null;
    hooks_url: string;
    svn_url: string;
    homepage: string | null;
    language: string | null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    /** The default branch of the repository. */
    default_branch: string;
    open_issues_count: number;
    /** Whether this repository acts as a template that can be used to generate new repositories. */
    is_template?: boolean;
    topics?: string[];
    /** Whether issues are enabled. */
    has_issues: boolean;
    /** Whether projects are enabled. */
    has_projects: boolean;
    /** Whether the wiki is enabled. */
    has_wiki: boolean;
    has_pages: boolean;
    /** Whether downloads are enabled. */
    has_downloads: boolean;
    /** Whether the repository is archived. */
    archived: boolean;
    /** Returns whether or not this repository disabled. */
    disabled: boolean;
    /** The repository visibility: public, private, or internal. */
    visibility?: string;
    pushed_at: string | null;
    created_at: string | null;
    updated_at: string | null;
    /** Whether to allow rebase merges for pull requests. */
    allow_rebase_merge?: boolean;
    template_repository?: {
      id?: number;
      node_id?: string;
      name?: string;
      full_name?: string;
      owner?: {
        login?: string;
        id?: number;
        node_id?: string;
        avatar_url?: string;
        gravatar_id?: string;
        url?: string;
        html_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        starred_url?: string;
        subscriptions_url?: string;
        organizations_url?: string;
        repos_url?: string;
        events_url?: string;
        received_events_url?: string;
        type?: string;
        site_admin?: boolean;
      };
      private?: boolean;
      html_url?: string;
      description?: string;
      fork?: boolean;
      url?: string;
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      downloads_url?: string;
      events_url?: string;
      forks_url?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      git_url?: string;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      notifications_url?: string;
      pulls_url?: string;
      releases_url?: string;
      ssh_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      clone_url?: string;
      mirror_url?: string;
      hooks_url?: string;
      svn_url?: string;
      homepage?: string;
      language?: string;
      forks_count?: number;
      stargazers_count?: number;
      watchers_count?: number;
      size?: number;
      default_branch?: string;
      open_issues_count?: number;
      is_template?: boolean;
      topics?: string[];
      has_issues?: boolean;
      has_projects?: boolean;
      has_wiki?: boolean;
      has_pages?: boolean;
      has_downloads?: boolean;
      archived?: boolean;
      disabled?: boolean;
      visibility?: string;
      pushed_at?: string;
      created_at?: string;
      updated_at?: string;
      permissions?: {
        admin?: boolean;
        maintain?: boolean;
        push?: boolean;
        triage?: boolean;
        pull?: boolean;
      };
      allow_rebase_merge?: boolean;
      temp_clone_token?: string;
      allow_squash_merge?: boolean;
      allow_auto_merge?: boolean;
      delete_branch_on_merge?: boolean;
      allow_update_branch?: boolean;
      allow_merge_commit?: boolean;
      subscribers_count?: number;
      network_count?: number;
    } | null;
    temp_clone_token?: string;
    /** Whether to allow squash merges for pull requests. */
    allow_squash_merge?: boolean;
    /** Whether to allow Auto-merge to be used on pull requests. */
    allow_auto_merge?: boolean;
    /** Whether to delete head branches when pull requests are merged */
    delete_branch_on_merge?: boolean;
    /** Whether to allow merge commits for pull requests. */
    allow_merge_commit?: boolean;
    /** Whether to allow forking this repo */
    allow_forking?: boolean;
    subscribers_count?: number;
    network_count?: number;
    open_issues: number;
    watchers: number;
    master_branch?: string;
    starred_at?: string;
  }
  /** Authentication token for a GitHub App installed on a user or org. */
  export interface installation$token {
    token: string;
    expires_at: string;
    permissions?: Schemas.app$permissions;
    repository_selection?: "all" | "selected";
    repositories?: Schemas.repository[];
    single_file?: string;
    has_multiple_single_files?: boolean;
    single_file_paths?: string[];
  }
  /** The authorization associated with an OAuth Access. */
  export interface application$grant {
    id: number;
    url: string;
    app: {
      client_id: string;
      name: string;
      url: string;
    };
    created_at: string;
    updated_at: string;
    scopes: string[];
    user?: Schemas.nullable$simple$user;
  }
  /** Code Of Conduct */
  export interface code$of$conduct {
    key: string;
    name: string;
    url: string;
    body?: string;
    html_url: string | null;
  }
  /** The announcement text in GitHub Flavored Markdown. For more information about GitHub Flavored Markdown, see "[Basic writing and formatting syntax](https://docs.github.com/enterprise-server@3.4/github/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax)." */
  export type announcement$message = string;
  /** The time at which the announcement expires. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. To set an announcement that never expires, omit this parameter, set it to `null`, or set it to an empty string. */
  export type announcement$expiration = string;
  /** Enterprise global announcement */
  export interface announcement {
    announcement: Schemas.announcement$message;
    expires_at?: Schemas.announcement$expiration;
  }
  export interface license$info {
    seats?: string | number;
    seats_used?: number;
    seats_available?: string | number;
    kind?: string;
    days_until_expiration?: number;
    expire_at?: string;
  }
  export interface enterprise$repository$overview {
    total_repos: number;
    root_repos: number;
    fork_repos: number;
    org_repos: number;
    total_pushes: number;
    total_wikis: number;
  }
  export interface enterprise$hook$overview {
    total_hooks: number;
    active_hooks: number;
    inactive_hooks: number;
  }
  export interface enterprise$page$overview {
    total_pages: number;
  }
  export interface enterprise$organization$overview {
    total_orgs: number;
    disabled_orgs: number;
    total_teams: number;
    total_team_members: number;
  }
  export interface enterprise$user$overview {
    total_users: number;
    admin_users: number;
    suspended_users: number;
  }
  export interface enterprise$pull$request$overview {
    total_pulls: number;
    merged_pulls: number;
    mergeable_pulls: number;
    unmergeable_pulls: number;
  }
  export interface enterprise$issue$overview {
    total_issues: number;
    open_issues: number;
    closed_issues: number;
  }
  export interface enterprise$milestone$overview {
    total_milestones: number;
    open_milestones: number;
    closed_milestones: number;
  }
  export interface enterprise$gist$overview {
    total_gists: number;
    private_gists: number;
    public_gists: number;
  }
  export interface enterprise$comment$overview {
    total_commit_comments: number;
    total_gist_comments: number;
    total_issue_comments: number;
    total_pull_request_comments: number;
  }
  export interface enterprise$overview {
    repos?: Schemas.enterprise$repository$overview;
    hooks?: Schemas.enterprise$hook$overview;
    pages?: Schemas.enterprise$page$overview;
    orgs?: Schemas.enterprise$organization$overview;
    users?: Schemas.enterprise$user$overview;
    pulls?: Schemas.enterprise$pull$request$overview;
    issues?: Schemas.enterprise$issue$overview;
    milestones?: Schemas.enterprise$milestone$overview;
    gists?: Schemas.enterprise$gist$overview;
    comments?: Schemas.enterprise$comment$overview;
  }
  /** The policy that controls the organizations in the enterprise that are allowed to run GitHub Actions. Can be one of: `all`, `none`, or `selected`. */
  export type enabled$organizations = "all" | "none" | "selected";
  /** The permissions policy that controls the actions that are allowed to run. Can be one of: `all`, `local_only`, or `selected`. */
  export type allowed$actions = "all" | "local_only" | "selected";
  /** The API URL to use to get or set the actions that are allowed to run, when `allowed_actions` is set to `selected`. */
  export type selected$actions$url = string;
  export interface actions$enterprise$permissions {
    enabled_organizations: Schemas.enabled$organizations;
    /** The API URL to use to get or set the selected organizations that are allowed to run GitHub Actions, when `enabled_organizations` is set to `selected`. */
    selected_organizations_url?: string;
    allowed_actions?: Schemas.allowed$actions;
    selected_actions_url?: Schemas.selected$actions$url;
  }
  export interface selected$actions {
    /** Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization. */
    github_owned_allowed: boolean;
    /** Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/\\*`." */
    patterns_allowed: string[];
  }
  export interface runner$groups$enterprise {
    id: number;
    name: string;
    visibility: string;
    default: boolean;
    selected_organizations_url?: string;
    runners_url: string;
    allows_public_repositories: boolean;
  }
  /** A label for a self hosted runner */
  export interface runner$label {
    /** Unique identifier of the label. */
    id?: number;
    /** Name of the label. */
    name: string;
    /** The type of label. Read-only labels are applied automatically when the runner is configured. */
    type?: "read-only" | "custom";
  }
  /** A self hosted runner */
  export interface runner {
    /** The id of the runner. */
    id: number;
    /** The name of the runner. */
    name: string;
    /** The Operating System of the runner. */
    os: string;
    /** The status of the runner. */
    status: string;
    busy: boolean;
    labels: Schemas.runner$label[];
  }
  /** Runner Application */
  export interface runner$application {
    os: string;
    architecture: string;
    download_url: string;
    filename: string;
    /** A short lived bearer token used to download the runner, if needed. */
    temp_download_token?: string;
    sha256_checksum?: string;
  }
  /** Authentication Token */
  export interface authentication$token {
    /** The token used for authentication */
    token: string;
    /** The time this token expires */
    expires_at: string;
    permissions?: {};
    /** The repositories this token has access to */
    repositories?: Schemas.repository[];
    single_file?: string | null;
    /** Describe whether all repositories have been selected or there's a selection involved */
    repository_selection?: "all" | "selected";
  }
  export interface audit$log$event {
    /** The time the audit log event occurred, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time). */
    "@timestamp"?: number;
    /** The name of the action that was performed, for example `user.login` or `repo.create`. */
    action?: string;
    active?: boolean;
    active_was?: boolean;
    /** The actor who performed the action. */
    actor?: string;
    /** The id of the actor who performed the action. */
    actor_id?: number;
    actor_location?: {
      country_name?: string;
    };
    data?: {};
    org_id?: number;
    /** The username of the account being blocked. */
    blocked_user?: string;
    business?: string;
    config?: {}[];
    config_was?: {}[];
    content_type?: string;
    /** The time the audit log event was recorded, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time). */
    created_at?: number;
    deploy_key_fingerprint?: string;
    /** A unique identifier for an audit event. */
    _document_id?: string;
    emoji?: string;
    events?: {}[];
    events_were?: {}[];
    explanation?: string;
    fingerprint?: string;
    hook_id?: number;
    limited_availability?: boolean;
    message?: string;
    name?: string;
    old_user?: string;
    openssh_public_key?: string;
    org?: string;
    previous_visibility?: string;
    read_only?: boolean;
    /** The name of the repository. */
    repo?: string;
    /** The name of the repository. */
    repository?: string;
    repository_public?: boolean;
    target_login?: string;
    team?: string;
    /** The type of protocol (for example, HTTP or SSH) used to transfer Git data. */
    transport_protocol?: number;
    /** A human readable name for the protocol (for example, HTTP or SSH) used to transfer Git data. */
    transport_protocol_name?: string;
    /** The user that was affected by the action performed (if available). */
    user?: string;
    /** The repository visibility, for example `public` or `private`. */
    visibility?: string;
  }
  /** The security alert number. */
  export type alert$number = number;
  /** The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  export type alert$created$at = string;
  /** The REST API URL of the alert resource. */
  export type alert$url = string;
  /** The GitHub URL of the alert resource. */
  export type alert$html$url = string;
  /** Sets the state of the secret scanning alert. Can be either `open` or `resolved`. You must provide `resolution` when you set the state to `resolved`. */
  export type secret$scanning$alert$state = "open" | "resolved";
  /** **Required when the `state` is `resolved`.** The reason for resolving the alert. Can be one of `false_positive`, `wont_fix`, `revoked`, or `used_in_tests`. */
  export type secret$scanning$alert$resolution = string;
  /** A git repository */
  export interface nullable$repository {
    /** Unique identifier of the repository */
    id: number;
    node_id: string;
    /** The name of the repository. */
    name: string;
    full_name: string;
    license: Schemas.nullable$license$simple;
    organization?: Schemas.nullable$simple$user;
    forks: number;
    permissions?: {
      admin: boolean;
      pull: boolean;
      triage?: boolean;
      push: boolean;
      maintain?: boolean;
    };
    owner: Schemas.simple$user;
    /** Whether the repository is private or public. */
    private: boolean;
    html_url: string;
    description: string | null;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string | null;
    hooks_url: string;
    svn_url: string;
    homepage: string | null;
    language: string | null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    /** The default branch of the repository. */
    default_branch: string;
    open_issues_count: number;
    /** Whether this repository acts as a template that can be used to generate new repositories. */
    is_template?: boolean;
    topics?: string[];
    /** Whether issues are enabled. */
    has_issues: boolean;
    /** Whether projects are enabled. */
    has_projects: boolean;
    /** Whether the wiki is enabled. */
    has_wiki: boolean;
    has_pages: boolean;
    /** Whether downloads are enabled. */
    has_downloads: boolean;
    /** Whether the repository is archived. */
    archived: boolean;
    /** Returns whether or not this repository disabled. */
    disabled: boolean;
    /** The repository visibility: public, private, or internal. */
    visibility?: string;
    pushed_at: string | null;
    created_at: string | null;
    updated_at: string | null;
    /** Whether to allow rebase merges for pull requests. */
    allow_rebase_merge?: boolean;
    template_repository?: {
      id?: number;
      node_id?: string;
      name?: string;
      full_name?: string;
      owner?: {
        login?: string;
        id?: number;
        node_id?: string;
        avatar_url?: string;
        gravatar_id?: string;
        url?: string;
        html_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        starred_url?: string;
        subscriptions_url?: string;
        organizations_url?: string;
        repos_url?: string;
        events_url?: string;
        received_events_url?: string;
        type?: string;
        site_admin?: boolean;
      };
      private?: boolean;
      html_url?: string;
      description?: string;
      fork?: boolean;
      url?: string;
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      downloads_url?: string;
      events_url?: string;
      forks_url?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      git_url?: string;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      notifications_url?: string;
      pulls_url?: string;
      releases_url?: string;
      ssh_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      clone_url?: string;
      mirror_url?: string;
      hooks_url?: string;
      svn_url?: string;
      homepage?: string;
      language?: string;
      forks_count?: number;
      stargazers_count?: number;
      watchers_count?: number;
      size?: number;
      default_branch?: string;
      open_issues_count?: number;
      is_template?: boolean;
      topics?: string[];
      has_issues?: boolean;
      has_projects?: boolean;
      has_wiki?: boolean;
      has_pages?: boolean;
      has_downloads?: boolean;
      archived?: boolean;
      disabled?: boolean;
      visibility?: string;
      pushed_at?: string;
      created_at?: string;
      updated_at?: string;
      permissions?: {
        admin?: boolean;
        maintain?: boolean;
        push?: boolean;
        triage?: boolean;
        pull?: boolean;
      };
      allow_rebase_merge?: boolean;
      temp_clone_token?: string;
      allow_squash_merge?: boolean;
      allow_auto_merge?: boolean;
      delete_branch_on_merge?: boolean;
      allow_update_branch?: boolean;
      allow_merge_commit?: boolean;
      subscribers_count?: number;
      network_count?: number;
    } | null;
    temp_clone_token?: string;
    /** Whether to allow squash merges for pull requests. */
    allow_squash_merge?: boolean;
    /** Whether to allow Auto-merge to be used on pull requests. */
    allow_auto_merge?: boolean;
    /** Whether to delete head branches when pull requests are merged */
    delete_branch_on_merge?: boolean;
    /** Whether to allow merge commits for pull requests. */
    allow_merge_commit?: boolean;
    /** Whether to allow forking this repo */
    allow_forking?: boolean;
    subscribers_count?: number;
    network_count?: number;
    open_issues: number;
    watchers: number;
    master_branch?: string;
    starred_at?: string;
  }
  /** Minimal Repository */
  export interface minimal$repository {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: Schemas.simple$user;
    private: boolean;
    html_url: string;
    description: string | null;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url?: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url?: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url?: string;
    mirror_url?: string | null;
    hooks_url: string;
    svn_url?: string;
    homepage?: string | null;
    language?: string | null;
    forks_count?: number;
    stargazers_count?: number;
    watchers_count?: number;
    size?: number;
    default_branch?: string;
    open_issues_count?: number;
    is_template?: boolean;
    topics?: string[];
    has_issues?: boolean;
    has_projects?: boolean;
    has_wiki?: boolean;
    has_pages?: boolean;
    has_downloads?: boolean;
    archived?: boolean;
    disabled?: boolean;
    visibility?: string;
    pushed_at?: string | null;
    created_at?: string | null;
    updated_at?: string | null;
    permissions?: {
      admin?: boolean;
      maintain?: boolean;
      push?: boolean;
      triage?: boolean;
      pull?: boolean;
    };
    template_repository?: Schemas.nullable$repository;
    temp_clone_token?: string;
    delete_branch_on_merge?: boolean;
    subscribers_count?: number;
    network_count?: number;
    code_of_conduct?: Schemas.code$of$conduct;
    license?: {
      key?: string;
      name?: string;
      spdx_id?: string;
      url?: string;
      node_id?: string;
    } | null;
    forks?: number;
    open_issues?: number;
    watchers?: number;
    allow_forking?: boolean;
  }
  export interface organization$secret$scanning$alert {
    number?: Schemas.alert$number;
    created_at?: Schemas.alert$created$at;
    url?: Schemas.alert$url;
    html_url?: Schemas.alert$html$url;
    /** The REST API URL of the code locations for this alert. */
    locations_url?: string;
    state?: Schemas.secret$scanning$alert$state;
    resolution?: Schemas.secret$scanning$alert$resolution;
    /** The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    resolved_at?: string | null;
    resolved_by?: Schemas.nullable$simple$user;
    /** The type of secret that secret scanning detected. */
    secret_type?: string;
    /** The secret that was detected. */
    secret?: string;
    repository?: Schemas.minimal$repository;
  }
  export interface advanced$security$active$committers$user {
    user_login: string;
    last_pushed_date: string;
  }
  export interface advanced$security$active$committers$repository {
    name: string;
    advanced_security_committers: number;
    advanced_security_committers_breakdown: Schemas.advanced$security$active$committers$user[];
  }
  export interface advanced$security$active$committers {
    total_advanced_security_committers?: number;
    repositories: Schemas.advanced$security$active$committers$repository[];
  }
  /** Actor */
  export interface actor {
    id: number;
    login: string;
    display_login?: string;
    gravatar_id: string | null;
    url: string;
    avatar_url: string;
  }
  /** A collection of related issues and pull requests. */
  export interface nullable$milestone {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    /** The number of the milestone. */
    number: number;
    /** The state of the milestone. */
    state: "open" | "closed";
    /** The title of the milestone. */
    title: string;
    description: string | null;
    creator: Schemas.nullable$simple$user;
    open_issues: number;
    closed_issues: number;
    created_at: string;
    updated_at: string;
    closed_at: string | null;
    due_on: string | null;
  }
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  export interface nullable$integration {
    /** Unique identifier of the GitHub app */
    id: number;
    /** The slug name of the GitHub app */
    slug?: string;
    node_id: string;
    owner: Schemas.nullable$simple$user;
    /** The name of the GitHub app */
    name: string;
    description: string | null;
    external_url: string;
    html_url: string;
    created_at: string;
    updated_at: string;
    /** The set of permissions for the GitHub app */
    permissions: {
      issues?: string;
      checks?: string;
      metadata?: string;
      contents?: string;
      deployments?: string;
    } & {
      [key: string]: string;
    };
    /** The list of events for the GitHub app */
    events: string[];
    /** The number of installations associated with the GitHub app */
    installations_count?: number;
    client_id?: string;
    client_secret?: string;
    webhook_secret?: string | null;
    pem?: string;
  }
  /** How the author is associated with the repository. */
  export type author_association =
    | "COLLABORATOR"
    | "CONTRIBUTOR"
    | "FIRST_TIMER"
    | "FIRST_TIME_CONTRIBUTOR"
    | "MANNEQUIN"
    | "MEMBER"
    | "NONE"
    | "OWNER";
  export interface reaction$rollup {
    url: string;
    total_count: number;
    "+1": number;
    "-1": number;
    laugh: number;
    confused: number;
    heart: number;
    hooray: number;
    eyes: number;
    rocket: number;
  }
  /** Issues are a great way to keep track of tasks, enhancements, and bugs for your projects. */
  export interface issue {
    id: number;
    node_id: string;
    /** URL for the issue */
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    /** Number uniquely identifying the issue within its repository */
    number: number;
    /** State of the issue; either 'open' or 'closed' */
    state: string;
    /** Title of the issue */
    title: string;
    /** Contents of the issue */
    body?: string | null;
    user: Schemas.nullable$simple$user;
    /** Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository */
    labels: (
      | string
      | {
          id?: number;
          node_id?: string;
          url?: string;
          name?: string;
          description?: string | null;
          color?: string | null;
          default?: boolean;
        }
    )[];
    assignee: Schemas.nullable$simple$user;
    assignees?: Schemas.simple$user[] | null;
    milestone: Schemas.nullable$milestone;
    locked: boolean;
    active_lock_reason?: string | null;
    comments: number;
    pull_request?: {
      merged_at?: string | null;
      diff_url: string | null;
      html_url: string | null;
      patch_url: string | null;
      url: string | null;
    };
    closed_at: string | null;
    created_at: string;
    updated_at: string;
    draft?: boolean;
    closed_by?: Schemas.nullable$simple$user;
    body_html?: string;
    body_text?: string;
    timeline_url?: string;
    repository?: Schemas.repository;
    performed_via_github_app?: Schemas.nullable$integration;
    author_association: Schemas.author_association;
    reactions?: Schemas.reaction$rollup;
  }
  /** Comments provide a way for people to collaborate on an issue. */
  export interface issue$comment {
    /** Unique identifier of the issue comment */
    id: number;
    node_id: string;
    /** URL for the issue comment */
    url: string;
    /** Contents of the issue comment */
    body?: string;
    body_text?: string;
    body_html?: string;
    html_url: string;
    user: Schemas.nullable$simple$user;
    created_at: string;
    updated_at: string;
    issue_url: string;
    author_association: Schemas.author_association;
    performed_via_github_app?: Schemas.nullable$integration;
    reactions?: Schemas.reaction$rollup;
  }
  /** Event */
  export interface event {
    id: string;
    type: string | null;
    actor: Schemas.actor;
    repo: {
      id: number;
      name: string;
      url: string;
    };
    org?: Schemas.actor;
    payload: {
      action?: string;
      issue?: Schemas.issue;
      comment?: Schemas.issue$comment;
      pages?: {
        page_name?: string;
        title?: string;
        summary?: string | null;
        action?: string;
        sha?: string;
        html_url?: string;
      }[];
    };
    public: boolean;
    created_at: string | null;
  }
  /** Hypermedia Link with Type */
  export interface link$with$type {
    href: string;
    type: string;
  }
  /** Feed */
  export interface feed {
    timeline_url: string;
    user_url: string;
    current_user_public_url?: string;
    current_user_url?: string;
    current_user_actor_url?: string;
    current_user_organization_url?: string;
    current_user_organization_urls?: string[];
    security_advisories_url?: string;
    _links: {
      timeline: Schemas.link$with$type;
      user: Schemas.link$with$type;
      security_advisories?: Schemas.link$with$type;
      current_user?: Schemas.link$with$type;
      current_user_public?: Schemas.link$with$type;
      current_user_actor?: Schemas.link$with$type;
      current_user_organization?: Schemas.link$with$type;
      current_user_organizations?: Schemas.link$with$type[];
    };
  }
  /** Base Gist */
  export interface base$gist {
    url: string;
    forks_url: string;
    commits_url: string;
    id: string;
    node_id: string;
    git_pull_url: string;
    git_push_url: string;
    html_url: string;
    files: {
      [key: string]: {
        filename?: string;
        type?: string;
        language?: string;
        raw_url?: string;
        size?: number;
      };
    };
    public: boolean;
    created_at: string;
    updated_at: string;
    description: string | null;
    comments: number;
    user: Schemas.nullable$simple$user;
    comments_url: string;
    owner?: Schemas.simple$user;
    truncated?: boolean;
    forks?: {}[];
    history?: {}[];
  }
  /** Public User */
  export interface public$user {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string | null;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
    name: string | null;
    company: string | null;
    blog: string | null;
    location: string | null;
    email: string | null;
    hireable: boolean | null;
    bio: string | null;
    twitter_username?: string | null;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    created_at: string;
    updated_at: string;
    plan?: {
      collaborators: number;
      name: string;
      space: number;
      private_repos: number;
    };
    suspended_at?: string | null;
    private_gists?: number;
    total_private_repos?: number;
    owned_private_repos?: number;
    disk_usage?: number;
    collaborators?: number;
  }
  /** Gist History */
  export interface gist$history {
    user?: Schemas.nullable$simple$user;
    version?: string;
    committed_at?: string;
    change_status?: {
      total?: number;
      additions?: number;
      deletions?: number;
    };
    url?: string;
  }
  /** Gist Simple */
  export interface gist$simple {
    forks?:
      | {
          id?: string;
          url?: string;
          user?: Schemas.public$user;
          created_at?: string;
          updated_at?: string;
        }[]
      | null;
    history?: Schemas.gist$history[] | null;
    /** Gist */
    fork_of?: {
      url: string;
      forks_url: string;
      commits_url: string;
      id: string;
      node_id: string;
      git_pull_url: string;
      git_push_url: string;
      html_url: string;
      files: {
        [key: string]: {
          filename?: string;
          type?: string;
          language?: string;
          raw_url?: string;
          size?: number;
        };
      };
      public: boolean;
      created_at: string;
      updated_at: string;
      description: string | null;
      comments: number;
      user: Schemas.nullable$simple$user;
      comments_url: string;
      owner?: Schemas.nullable$simple$user;
      truncated?: boolean;
      forks?: {}[];
      history?: {}[];
    } | null;
    url?: string;
    forks_url?: string;
    commits_url?: string;
    id?: string;
    node_id?: string;
    git_pull_url?: string;
    git_push_url?: string;
    html_url?: string;
    files?: {
      [key: string]: {
        filename?: string;
        type?: string;
        language?: string;
        raw_url?: string;
        size?: number;
        truncated?: boolean;
        content?: string;
      } | null;
    };
    public?: boolean;
    created_at?: string;
    updated_at?: string;
    description?: string | null;
    comments?: number;
    user?: string | null;
    comments_url?: string;
    owner?: Schemas.simple$user;
    truncated?: boolean;
  }
  /** A comment made to a gist. */
  export interface gist$comment {
    id: number;
    node_id: string;
    url: string;
    /** The comment text. */
    body: string;
    user: Schemas.nullable$simple$user;
    created_at: string;
    updated_at: string;
    author_association: Schemas.author_association;
  }
  /** Gist Commit */
  export interface gist$commit {
    url: string;
    version: string;
    user: Schemas.nullable$simple$user;
    change_status: {
      total?: number;
      additions?: number;
      deletions?: number;
    };
    committed_at: string;
  }
  /** Gitignore Template */
  export interface gitignore$template {
    name: string;
    source: string;
  }
  /** License Simple */
  export interface license$simple {
    key: string;
    name: string;
    url: string | null;
    spdx_id: string | null;
    node_id: string;
    html_url?: string;
  }
  /** License */
  export interface license {
    key: string;
    name: string;
    spdx_id: string | null;
    url: string | null;
    node_id: string;
    html_url: string;
    description: string;
    implementation: string;
    permissions: string[];
    conditions: string[];
    limitations: string[];
    body: string;
    featured: boolean;
  }
  /** Api Overview */
  export interface api$overview {
    verifiable_password_authentication: boolean;
    packages?: string[];
    dependabot?: string[];
    installed_version?: string;
  }
  /** Thread */
  export interface thread {
    id: string;
    repository: Schemas.minimal$repository;
    subject: {
      title: string;
      url: string;
      latest_comment_url: string;
      type: string;
    };
    reason: string;
    unread: boolean;
    updated_at: string;
    last_read_at: string | null;
    url: string;
    subscription_url: string;
  }
  /** Thread Subscription */
  export interface thread$subscription {
    subscribed: boolean;
    ignored: boolean;
    reason: string | null;
    created_at: string | null;
    url: string;
    thread_url?: string;
    repository_url?: string;
  }
  /** Custom repository roles created by organization administrators */
  export interface organization$custom$repository$role {
    id: number;
    name: string;
  }
  /** Organization Full */
  export interface organization$full {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string | null;
    name?: string;
    company?: string;
    blog?: string;
    location?: string;
    email?: string;
    twitter_username?: string | null;
    is_verified?: boolean;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    html_url: string;
    created_at: string;
    type: string;
    total_private_repos?: number;
    owned_private_repos?: number;
    private_gists?: number | null;
    disk_usage?: number | null;
    collaborators?: number | null;
    billing_email?: string | null;
    plan?: {
      name: string;
      space: number;
      private_repos: number;
      filled_seats?: number;
      seats?: number;
    };
    default_repository_permission?: string | null;
    members_can_create_repositories?: boolean | null;
    two_factor_requirement_enabled?: boolean | null;
    members_allowed_repository_creation_type?: string;
    members_can_create_public_repositories?: boolean;
    members_can_create_private_repositories?: boolean;
    members_can_create_internal_repositories?: boolean;
    members_can_create_pages?: boolean;
    members_can_create_public_pages?: boolean;
    members_can_create_private_pages?: boolean;
    members_can_fork_private_repositories?: boolean | null;
    updated_at: string;
  }
  /** The policy that controls the repositories in the organization that are allowed to run GitHub Actions. Can be one of: `all`, `none`, or `selected`. */
  export type enabled$repositories = "all" | "none" | "selected";
  export interface actions$organization$permissions {
    enabled_repositories: Schemas.enabled$repositories;
    /** The API URL to use to get or set the selected repositories that are allowed to run GitHub Actions, when `enabled_repositories` is set to `selected`. */
    selected_repositories_url?: string;
    allowed_actions?: Schemas.allowed$actions;
    selected_actions_url?: Schemas.selected$actions$url;
  }
  export interface runner$groups$org {
    id: number;
    name: string;
    visibility: string;
    default: boolean;
    /** Link to the selected repositories resource for this runner group. Not present unless visibility was set to `selected` */
    selected_repositories_url?: string;
    runners_url: string;
    inherited: boolean;
    inherited_allows_public_repositories?: boolean;
    allows_public_repositories: boolean;
  }
  /** Secrets for GitHub Actions for an organization. */
  export interface organization$actions$secret {
    /** The name of the secret. */
    name: string;
    created_at: string;
    updated_at: string;
    /** Visibility of a secret */
    visibility: "all" | "private" | "selected";
    selected_repositories_url?: string;
  }
  /** The public key used for setting Actions Secrets. */
  export interface actions$public$key {
    /** The identifier for the key. */
    key_id: string;
    /** The Base64 encoded public key. */
    key: string;
    id?: number;
    url?: string;
    title?: string;
    created_at?: string;
  }
  /** An object without any properties. */
  export interface empty$object {}
  /** Secrets for GitHub Dependabot for an organization. */
  export interface organization$dependabot$secret {
    /** The name of the secret. */
    name: string;
    created_at: string;
    updated_at: string;
    /** Visibility of a secret */
    visibility: "all" | "private" | "selected";
    selected_repositories_url?: string;
  }
  /** The public key used for setting Dependabot Secrets. */
  export interface dependabot$public$key {
    /** The identifier for the key. */
    key_id: string;
    /** The Base64 encoded public key. */
    key: string;
  }
  /** Org Hook */
  export interface org$hook {
    id: number;
    url: string;
    ping_url: string;
    deliveries_url?: string;
    name: string;
    events: string[];
    active: boolean;
    config: {
      url?: string;
      insecure_ssl?: string;
      content_type?: string;
      secret?: string;
    };
    updated_at: string;
    created_at: string;
    type: string;
  }
  /** Org Membership */
  export interface org$membership {
    url: string;
    /** The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation. */
    state: "active" | "pending";
    /** The user's membership type in the organization. */
    role: "admin" | "member" | "billing_manager";
    organization_url: string;
    organization: Schemas.organization$simple;
    user: Schemas.nullable$simple$user;
    permissions?: {
      can_create_repository: boolean;
    };
  }
  /** A migration. */
  export interface migration {
    id: number;
    owner: Schemas.nullable$simple$user;
    guid: string;
    state: string;
    lock_repositories: boolean;
    exclude_metadata: boolean;
    exclude_git_data: boolean;
    exclude_attachments: boolean;
    exclude_releases: boolean;
    exclude_owner_projects: boolean;
    repositories: Schemas.repository[];
    url: string;
    created_at: string;
    updated_at: string;
    node_id: string;
    archive_url?: string;
    exclude?: {}[];
  }
  export interface org$pre$receive$hook {
    id?: number;
    name?: string;
    enforcement?: string;
    configuration_url?: string;
    allow_downstream_configuration?: boolean;
  }
  /** Projects are a way to organize columns and cards of work. */
  export interface project {
    owner_url: string;
    url: string;
    html_url: string;
    columns_url: string;
    id: number;
    node_id: string;
    /** Name of the project */
    name: string;
    /** Body of the project */
    body: string | null;
    number: number;
    /** State of the project; either 'open' or 'closed' */
    state: string;
    creator: Schemas.nullable$simple$user;
    created_at: string;
    updated_at: string;
    /** The baseline permission that all organization members have on this project. Only present if owner is an organization. */
    organization_permission?: "read" | "write" | "admin" | "none";
    /** Whether or not this project can be seen by everyone. Only present if owner is an organization. */
    private?: boolean;
  }
  /** Groups of organization members that gives permissions on specified repositories. */
  export interface nullable$team$simple {
    /** Unique identifier of the team */
    id: number;
    node_id: string;
    /** URL for the team */
    url: string;
    members_url: string;
    /** Name of the team */
    name: string;
    /** Description of the team */
    description: string | null;
    /** Permission that the team will have for its repositories */
    permission: string;
    /** The level of privacy this team should have */
    privacy?: string;
    html_url: string;
    repositories_url: string;
    slug: string;
    /** Distinguished Name (DN) that team maps to within LDAP environment */
    ldap_dn?: string;
  }
  /** Groups of organization members that gives permissions on specified repositories. */
  export interface team {
    id: number;
    node_id: string;
    name: string;
    slug: string;
    description: string | null;
    privacy?: string;
    permission: string;
    permissions?: {
      pull: boolean;
      triage: boolean;
      push: boolean;
      maintain: boolean;
      admin: boolean;
    };
    url: string;
    html_url: string;
    members_url: string;
    repositories_url: string;
    parent: Schemas.nullable$team$simple;
  }
  /** Groups of organization members that gives permissions on specified repositories. */
  export interface team$full {
    /** Unique identifier of the team */
    id: number;
    node_id: string;
    /** URL for the team */
    url: string;
    html_url: string;
    /** Name of the team */
    name: string;
    slug: string;
    description: string | null;
    /** The level of privacy this team should have */
    privacy?: "closed" | "secret";
    /** Permission that the team will have for its repositories */
    permission: string;
    members_url: string;
    repositories_url: string;
    parent?: Schemas.nullable$team$simple;
    members_count: number;
    repos_count: number;
    created_at: string;
    updated_at: string;
    organization: Schemas.organization$full;
    /** Distinguished Name (DN) that team maps to within LDAP environment */
    ldap_dn?: string;
  }
  /** A team discussion is a persistent record of a free-form conversation within a team. */
  export interface team$discussion {
    author: Schemas.nullable$simple$user;
    /** The main text of the discussion. */
    body: string;
    body_html: string;
    /** The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server. */
    body_version: string;
    comments_count: number;
    comments_url: string;
    created_at: string;
    last_edited_at: string | null;
    html_url: string;
    node_id: string;
    /** The unique sequence number of a team discussion. */
    number: number;
    /** Whether or not this discussion should be pinned for easy retrieval. */
    pinned: boolean;
    /** Whether or not this discussion should be restricted to team members and organization administrators. */
    private: boolean;
    team_url: string;
    /** The title of the discussion. */
    title: string;
    updated_at: string;
    url: string;
    reactions?: Schemas.reaction$rollup;
  }
  /** A reply to a discussion within a team. */
  export interface team$discussion$comment {
    author: Schemas.nullable$simple$user;
    /** The main text of the comment. */
    body: string;
    body_html: string;
    /** The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server. */
    body_version: string;
    created_at: string;
    last_edited_at: string | null;
    discussion_url: string;
    html_url: string;
    node_id: string;
    /** The unique sequence number of a team discussion comment. */
    number: number;
    updated_at: string;
    url: string;
    reactions?: Schemas.reaction$rollup;
  }
  /** Reactions to conversations provide a way to help people express their feelings more simply and effectively. */
  export interface reaction {
    id: number;
    node_id: string;
    user: Schemas.nullable$simple$user;
    /** The reaction to use */
    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
    created_at: string;
  }
  /** Team Membership */
  export interface team$membership {
    url: string;
    /** The role of the user in the team. */
    role: "member" | "maintainer";
    /** The state of the user's membership in the team. */
    state: "active" | "pending";
  }
  /** A team's access to a project. */
  export interface team$project {
    owner_url: string;
    url: string;
    html_url: string;
    columns_url: string;
    id: number;
    node_id: string;
    name: string;
    body: string | null;
    number: number;
    state: string;
    creator: Schemas.simple$user;
    created_at: string;
    updated_at: string;
    /** The organization permission for this project. Only present when owner is an organization. */
    organization_permission?: string;
    /** Whether the project is private or not. Only present when owner is an organization. */
    private?: boolean;
    permissions: {
      read: boolean;
      write: boolean;
      admin: boolean;
    };
  }
  /** A team's access to a repository. */
  export interface team$repository {
    /** Unique identifier of the repository */
    id: number;
    node_id: string;
    /** The name of the repository. */
    name: string;
    full_name: string;
    license: Schemas.nullable$license$simple;
    forks: number;
    permissions?: {
      admin: boolean;
      pull: boolean;
      triage?: boolean;
      push: boolean;
      maintain?: boolean;
    };
    owner: Schemas.nullable$simple$user;
    /** Whether the repository is private or public. */
    private: boolean;
    html_url: string;
    description: string | null;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string | null;
    hooks_url: string;
    svn_url: string;
    homepage: string | null;
    language: string | null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    /** The default branch of the repository. */
    default_branch: string;
    open_issues_count: number;
    /** Whether this repository acts as a template that can be used to generate new repositories. */
    is_template?: boolean;
    topics?: string[];
    /** Whether issues are enabled. */
    has_issues: boolean;
    /** Whether projects are enabled. */
    has_projects: boolean;
    /** Whether the wiki is enabled. */
    has_wiki: boolean;
    has_pages: boolean;
    /** Whether downloads are enabled. */
    has_downloads: boolean;
    /** Whether the repository is archived. */
    archived: boolean;
    /** Returns whether or not this repository disabled. */
    disabled: boolean;
    /** The repository visibility: public, private, or internal. */
    visibility?: string;
    pushed_at: string | null;
    created_at: string | null;
    updated_at: string | null;
    /** Whether to allow rebase merges for pull requests. */
    allow_rebase_merge?: boolean;
    template_repository?: Schemas.nullable$repository;
    temp_clone_token?: string;
    /** Whether to allow squash merges for pull requests. */
    allow_squash_merge?: boolean;
    /** Whether to allow Auto-merge to be used on pull requests. */
    allow_auto_merge?: boolean;
    /** Whether to delete head branches when pull requests are merged */
    delete_branch_on_merge?: boolean;
    /** Whether to allow merge commits for pull requests. */
    allow_merge_commit?: boolean;
    /** Whether to allow forking this repo */
    allow_forking?: boolean;
    subscribers_count?: number;
    network_count?: number;
    open_issues: number;
    watchers: number;
    master_branch?: string;
  }
  /** Project cards represent a scope of work. */
  export interface project$card {
    url: string;
    /** The project card's ID */
    id: number;
    node_id: string;
    note: string | null;
    creator: Schemas.nullable$simple$user;
    created_at: string;
    updated_at: string;
    /** Whether or not the card is archived */
    archived?: boolean;
    column_name?: string;
    project_id?: string;
    column_url: string;
    content_url?: string;
    project_url: string;
  }
  /** Project columns contain cards of work. */
  export interface project$column {
    url: string;
    project_url: string;
    cards_url: string;
    /** The unique identifier of the project column */
    id: number;
    node_id: string;
    /** Name of the project column */
    name: string;
    created_at: string;
    updated_at: string;
  }
  /** Project Collaborator Permission */
  export interface project$collaborator$permission {
    permission: string;
    user: Schemas.nullable$simple$user;
  }
  export interface rate$limit {
    limit: number;
    remaining: number;
    reset: number;
    used: number;
  }
  /** Rate Limit Overview */
  export interface rate$limit$overview {
    resources: {
      core: Schemas.rate$limit;
      graphql?: Schemas.rate$limit;
      search: Schemas.rate$limit;
      source_import?: Schemas.rate$limit;
      integration_manifest?: Schemas.rate$limit;
      code_scanning_upload?: Schemas.rate$limit;
      actions_runner_registration?: Schemas.rate$limit;
      scim?: Schemas.rate$limit;
    };
    rate: Schemas.rate$limit;
  }
  /** Code of Conduct Simple */
  export interface code$of$conduct$simple {
    url: string;
    key: string;
    name: string;
    html_url: string | null;
  }
  /** Full Repository */
  export interface full$repository {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: Schemas.simple$user;
    private: boolean;
    html_url: string;
    description: string | null;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string | null;
    hooks_url: string;
    svn_url: string;
    homepage: string | null;
    language: string | null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template?: boolean;
    topics?: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    /** Returns whether or not this repository disabled. */
    disabled: boolean;
    /** The repository visibility: public, private, or internal. */
    visibility?: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions?: {
      admin: boolean;
      maintain?: boolean;
      push: boolean;
      triage?: boolean;
      pull: boolean;
    };
    allow_rebase_merge?: boolean;
    template_repository?: Schemas.nullable$repository;
    temp_clone_token?: string | null;
    allow_squash_merge?: boolean;
    allow_auto_merge?: boolean;
    delete_branch_on_merge?: boolean;
    allow_merge_commit?: boolean;
    allow_forking?: boolean;
    subscribers_count: number;
    network_count: number;
    license: Schemas.nullable$license$simple;
    organization?: Schemas.nullable$simple$user;
    parent?: Schemas.repository;
    source?: Schemas.repository;
    forks: number;
    master_branch?: string;
    open_issues: number;
    watchers: number;
    /** Whether anonymous git access is allowed. */
    anonymous_access_enabled?: boolean;
    code_of_conduct?: Schemas.code$of$conduct$simple;
    security_and_analysis?: {
      advanced_security?: {
        status?: "enabled" | "disabled";
      };
      secret_scanning?: {
        status?: "enabled" | "disabled";
      };
      secret_scanning_push_protection?: {
        status?: "enabled" | "disabled";
      };
    } | null;
  }
  /** An artifact */
  export interface artifact {
    id: number;
    node_id: string;
    /** The name of the artifact. */
    name: string;
    /** The size in bytes of the artifact. */
    size_in_bytes: number;
    url: string;
    archive_download_url: string;
    /** Whether or not the artifact has expired. */
    expired: boolean;
    created_at: string | null;
    expires_at: string | null;
    updated_at: string | null;
  }
  /** Information of a job execution in a workflow run */
  export interface job {
    /** The id of the job. */
    id: number;
    /** The id of the associated workflow run. */
    run_id: number;
    run_url: string;
    /** Attempt number of the associated workflow run, 1 for first attempt and higher if the workflow was re-run. */
    run_attempt?: number;
    node_id: string;
    /** The SHA of the commit that is being run. */
    head_sha: string;
    url: string;
    html_url: string | null;
    /** The phase of the lifecycle that the job is currently in. */
    status: "queued" | "in_progress" | "completed";
    /** The outcome of the job. */
    conclusion: string | null;
    /** The time that the job started, in ISO 8601 format. */
    started_at: string;
    /** The time that the job finished, in ISO 8601 format. */
    completed_at: string | null;
    /** The name of the job. */
    name: string;
    /** Steps in this job. */
    steps?: {
      /** The phase of the lifecycle that the job is currently in. */
      status: "queued" | "in_progress" | "completed";
      /** The outcome of the job. */
      conclusion: string | null;
      /** The name of the job. */
      name: string;
      number: number;
      /** The time that the step started, in ISO 8601 format. */
      started_at?: string | null;
      /** The time that the job finished, in ISO 8601 format. */
      completed_at?: string | null;
    }[];
    check_run_url: string;
    /** Labels for the workflow job. Specified by the "runs_on" attribute in the action's workflow file. */
    labels: string[];
    /** The ID of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.) */
    runner_id: number | null;
    /** The name of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.) */
    runner_name: string | null;
    /** The ID of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.) */
    runner_group_id: number | null;
    /** The name of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.) */
    runner_group_name: string | null;
  }
  /** Whether GitHub Actions is enabled on the repository. */
  export type actions$enabled = boolean;
  export interface actions$repository$permissions {
    enabled: Schemas.actions$enabled;
    allowed_actions?: Schemas.allowed$actions;
    selected_actions_url?: Schemas.selected$actions$url;
  }
  export interface pull$request$minimal {
    id: number;
    number: number;
    url: string;
    head: {
      ref: string;
      sha: string;
      repo: {
        id: number;
        url: string;
        name: string;
      };
    };
    base: {
      ref: string;
      sha: string;
      repo: {
        id: number;
        url: string;
        name: string;
      };
    };
  }
  /** Simple Commit */
  export interface nullable$simple$commit {
    id: string;
    tree_id: string;
    message: string;
    timestamp: string;
    author: {
      name: string;
      email: string;
    } | null;
    committer: {
      name: string;
      email: string;
    } | null;
  }
  /** An invocation of a workflow */
  export interface workflow$run {
    /** The ID of the workflow run. */
    id: number;
    /** The name of the workflow run. */
    name?: string | null;
    node_id: string;
    /** The ID of the associated check suite. */
    check_suite_id?: number;
    /** The node ID of the associated check suite. */
    check_suite_node_id?: string;
    head_branch: string | null;
    /** The SHA of the head commit that points to the version of the workflow being run. */
    head_sha: string;
    /** The auto incrementing run number for the workflow run. */
    run_number: number;
    /** Attempt number of the run, 1 for first attempt and higher if the workflow was re-run. */
    run_attempt?: number;
    event: string;
    status: string | null;
    conclusion: string | null;
    /** The ID of the parent workflow. */
    workflow_id: number;
    /** The URL to the workflow run. */
    url: string;
    html_url: string;
    pull_requests: Schemas.pull$request$minimal[] | null;
    created_at: string;
    updated_at: string;
    /** The start time of the latest run. Resets on re-run. */
    run_started_at?: string;
    /** The URL to the jobs for the workflow run. */
    jobs_url: string;
    /** The URL to download the logs for the workflow run. */
    logs_url: string;
    /** The URL to the associated check suite. */
    check_suite_url: string;
    /** The URL to the artifacts for the workflow run. */
    artifacts_url: string;
    /** The URL to cancel the workflow run. */
    cancel_url: string;
    /** The URL to rerun the workflow run. */
    rerun_url: string;
    /** The URL to the previous attempted run of this workflow, if one exists. */
    previous_attempt_url?: string | null;
    /** The URL to the workflow. */
    workflow_url: string;
    head_commit: Schemas.nullable$simple$commit;
    repository: Schemas.minimal$repository;
    head_repository: Schemas.minimal$repository;
    head_repository_id?: number;
  }
  /** An entry in the reviews log for environment deployments */
  export interface environment$approvals {
    /** The list of environments that were approved or rejected */
    environments: {
      /** The id of the environment. */
      id?: number;
      node_id?: string;
      /** The name of the environment. */
      name?: string;
      url?: string;
      html_url?: string;
      /** The time that the environment was created, in ISO 8601 format. */
      created_at?: string;
      /** The time that the environment was last updated, in ISO 8601 format. */
      updated_at?: string;
    }[];
    /** Whether deployment to the environment(s) was approved or rejected */
    state: "approved" | "rejected";
    user: Schemas.simple$user;
    /** The comment submitted with the deployment review */
    comment: string;
  }
  /** The type of reviewer. Must be one of: `User` or `Team` */
  export type deployment$reviewer$type = "User" | "Team";
  /** Details of a deployment that is waiting for protection rules to pass */
  export interface pending$deployment {
    environment: {
      /** The id of the environment. */
      id?: number;
      node_id?: string;
      /** The name of the environment. */
      name?: string;
      url?: string;
      html_url?: string;
    };
    /** The set duration of the wait timer */
    wait_timer: number;
    /** The time that the wait timer began. */
    wait_timer_started_at: string | null;
    /** Whether the currently authenticated user can approve the deployment */
    current_user_can_approve: boolean;
    /** The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed. */
    reviewers: {
      type?: Schemas.deployment$reviewer$type;
      reviewer?: Schemas.simple$user | Schemas.team;
    }[];
  }
  /** A request for a specific ref(branch,sha,tag) to be deployed */
  export interface deployment {
    url: string;
    /** Unique identifier of the deployment */
    id: number;
    node_id: string;
    sha: string;
    /** The ref to deploy. This can be a branch, tag, or sha. */
    ref: string;
    /** Parameter to specify a task to execute */
    task: string;
    payload: {} | string;
    original_environment?: string;
    /** Name for the target deployment environment. */
    environment: string;
    description: string | null;
    creator: Schemas.nullable$simple$user;
    created_at: string;
    updated_at: string;
    statuses_url: string;
    repository_url: string;
    /** Specifies if the given environment is will no longer exist at some point in the future. Default: false. */
    transient_environment?: boolean;
    /** Specifies if the given environment is one that end-users directly interact with. Default: false. */
    production_environment?: boolean;
    performed_via_github_app?: Schemas.nullable$integration;
  }
  /** Set secrets for GitHub Actions. */
  export interface actions$secret {
    /** The name of the secret. */
    name: string;
    created_at: string;
    updated_at: string;
  }
  /** A GitHub Actions workflow */
  export interface workflow {
    id: number;
    node_id: string;
    name: string;
    path: string;
    state: "active" | "deleted" | "disabled_fork" | "disabled_inactivity" | "disabled_manually";
    created_at: string;
    updated_at: string;
    url: string;
    html_url: string;
    badge_url: string;
    deleted_at?: string;
  }
  /** An autolink reference. */
  export interface autolink {
    id: number;
    /** The prefix of a key that is linkified. */
    key_prefix: string;
    /** A template for the target URL that is generated if a key was found. */
    url_template: string;
  }
  /** Protected Branch Required Status Check */
  export interface protected$branch$required$status$check {
    url?: string;
    enforcement_level?: string;
    contexts: string[];
    checks: {
      context: string;
      app_id: number | null;
    }[];
    contexts_url?: string;
    strict?: boolean;
  }
  /** Protected Branch Admin Enforced */
  export interface protected$branch$admin$enforced {
    url: string;
    enabled: boolean;
  }
  /** Protected Branch Pull Request Review */
  export interface protected$branch$pull$request$review {
    url?: string;
    dismissal_restrictions?: {
      /** The list of users with review dismissal access. */
      users?: Schemas.simple$user[];
      /** The list of teams with review dismissal access. */
      teams?: Schemas.team[];
      url?: string;
      users_url?: string;
      teams_url?: string;
    };
    /** Allow specific users or teams to bypass pull request requirements. */
    bypass_pull_request_allowances?: {
      /** The list of users allowed to bypass pull request requirements. */
      users?: Schemas.simple$user[];
      /** The list of teams allowed to bypass pull request requirements. */
      teams?: Schemas.team[];
    };
    dismiss_stale_reviews: boolean;
    require_code_owner_reviews: boolean;
    required_approving_review_count?: number;
  }
  /** Branch Restriction Policy */
  export interface branch$restriction$policy {
    url: string;
    users_url: string;
    teams_url: string;
    apps_url: string;
    users: {
      login?: string;
      id?: number;
      node_id?: string;
      avatar_url?: string;
      gravatar_id?: string;
      url?: string;
      html_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      starred_url?: string;
      subscriptions_url?: string;
      organizations_url?: string;
      repos_url?: string;
      events_url?: string;
      received_events_url?: string;
      type?: string;
      site_admin?: boolean;
    }[];
    teams: {
      id?: number;
      node_id?: string;
      url?: string;
      html_url?: string;
      name?: string;
      slug?: string;
      description?: string | null;
      privacy?: string;
      permission?: string;
      members_url?: string;
      repositories_url?: string;
      parent?: string | null;
    }[];
    apps: {
      id?: number;
      slug?: string;
      node_id?: string;
      owner?: {
        login?: string;
        id?: number;
        node_id?: string;
        url?: string;
        repos_url?: string;
        events_url?: string;
        hooks_url?: string;
        issues_url?: string;
        members_url?: string;
        public_members_url?: string;
        avatar_url?: string;
        description?: string;
        gravatar_id?: string;
        html_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        starred_url?: string;
        subscriptions_url?: string;
        organizations_url?: string;
        received_events_url?: string;
        type?: string;
        site_admin?: boolean;
      };
      name?: string;
      description?: string;
      external_url?: string;
      html_url?: string;
      created_at?: string;
      updated_at?: string;
      permissions?: {
        metadata?: string;
        contents?: string;
        issues?: string;
        single_file?: string;
      };
      events?: string[];
    }[];
  }
  /** Branch Protection */
  export interface branch$protection {
    url?: string;
    enabled?: boolean;
    required_status_checks?: Schemas.protected$branch$required$status$check;
    enforce_admins?: Schemas.protected$branch$admin$enforced;
    required_pull_request_reviews?: Schemas.protected$branch$pull$request$review;
    restrictions?: Schemas.branch$restriction$policy;
    required_linear_history?: {
      enabled?: boolean;
    };
    allow_force_pushes?: {
      enabled?: boolean;
    };
    allow_deletions?: {
      enabled?: boolean;
    };
    required_conversation_resolution?: {
      enabled?: boolean;
    };
    name?: string;
    protection_url?: string;
    required_signatures?: {
      url: string;
      enabled: boolean;
    };
  }
  /** Short Branch */
  export interface short$branch {
    name: string;
    commit: {
      sha: string;
      url: string;
    };
    protected: boolean;
    protection?: Schemas.branch$protection;
    protection_url?: string;
  }
  /** Metaproperties for Git author/committer information. */
  export interface nullable$git$user {
    name?: string;
    email?: string;
    date?: string;
  }
  export interface verification {
    verified: boolean;
    reason: string;
    payload: string | null;
    signature: string | null;
  }
  /** Diff Entry */
  export interface diff$entry {
    sha: string;
    filename: string;
    status: "added" | "removed" | "modified" | "renamed" | "copied" | "changed" | "unchanged";
    additions: number;
    deletions: number;
    changes: number;
    blob_url: string;
    raw_url: string;
    contents_url: string;
    patch?: string;
    previous_filename?: string;
  }
  /** Commit */
  export interface commit {
    url: string;
    sha: string;
    node_id: string;
    html_url: string;
    comments_url: string;
    commit: {
      url: string;
      author: Schemas.nullable$git$user;
      committer: Schemas.nullable$git$user;
      message: string;
      comment_count: number;
      tree: {
        sha: string;
        url: string;
      };
      verification?: Schemas.verification;
    };
    author: Schemas.nullable$simple$user;
    committer: Schemas.nullable$simple$user;
    parents: {
      sha: string;
      url: string;
      html_url?: string;
    }[];
    stats?: {
      additions?: number;
      deletions?: number;
      total?: number;
    };
    files?: Schemas.diff$entry[];
  }
  /** Branch With Protection */
  export interface branch$with$protection {
    name: string;
    commit: Schemas.commit;
    _links: {
      html: string;
      self: string;
    };
    protected: boolean;
    protection: Schemas.branch$protection;
    protection_url: string;
    pattern?: string;
    required_approving_review_count?: number;
  }
  /** Status Check Policy */
  export interface status$check$policy {
    url: string;
    strict: boolean;
    contexts: string[];
    checks: {
      context: string;
      app_id: number | null;
    }[];
    contexts_url: string;
  }
  /** Branch protections protect branches */
  export interface protected$branch {
    url: string;
    required_status_checks?: Schemas.status$check$policy;
    required_pull_request_reviews?: {
      url: string;
      dismiss_stale_reviews?: boolean;
      require_code_owner_reviews?: boolean;
      required_approving_review_count?: number;
      dismissal_restrictions?: {
        url: string;
        users_url: string;
        teams_url: string;
        users: Schemas.simple$user[];
        teams: Schemas.team[];
      };
      bypass_pull_request_allowances?: {
        users: Schemas.simple$user[];
        teams: Schemas.team[];
      };
    };
    required_signatures?: {
      url: string;
      enabled: boolean;
    };
    enforce_admins?: {
      url: string;
      enabled: boolean;
    };
    required_linear_history?: {
      enabled: boolean;
    };
    allow_force_pushes?: {
      enabled: boolean;
    };
    allow_deletions?: {
      enabled: boolean;
    };
    restrictions?: Schemas.branch$restriction$policy;
    required_conversation_resolution?: {
      enabled?: boolean;
    };
  }
  /** A deployment created as the result of an Actions check run from a workflow that references an environment */
  export interface deployment$simple {
    url: string;
    /** Unique identifier of the deployment */
    id: number;
    node_id: string;
    /** Parameter to specify a task to execute */
    task: string;
    original_environment?: string;
    /** Name for the target deployment environment. */
    environment: string;
    description: string | null;
    created_at: string;
    updated_at: string;
    statuses_url: string;
    repository_url: string;
    /** Specifies if the given environment is will no longer exist at some point in the future. Default: false. */
    transient_environment?: boolean;
    /** Specifies if the given environment is one that end-users directly interact with. Default: false. */
    production_environment?: boolean;
    performed_via_github_app?: Schemas.nullable$integration;
  }
  /** A check performed on the code of a given code change */
  export interface check$run {
    /** The id of the check. */
    id: number;
    /** The SHA of the commit that is being checked. */
    head_sha: string;
    node_id: string;
    external_id: string | null;
    url: string;
    html_url: string | null;
    details_url: string | null;
    /** The phase of the lifecycle that the check is currently in. */
    status: "queued" | "in_progress" | "completed";
    conclusion: ("success" | "failure" | "neutral" | "cancelled" | "skipped" | "timed_out" | "action_required") | null;
    started_at: string | null;
    completed_at: string | null;
    output: {
      title: string | null;
      summary: string | null;
      text: string | null;
      annotations_count: number;
      annotations_url: string;
    };
    /** The name of the check. */
    name: string;
    check_suite: {
      id: number;
    } | null;
    app: Schemas.nullable$integration;
    pull_requests: Schemas.pull$request$minimal[];
    deployment?: Schemas.deployment$simple;
  }
  /** Check Annotation */
  export interface check$annotation {
    path: string;
    start_line: number;
    end_line: number;
    start_column: number | null;
    end_column: number | null;
    annotation_level: string | null;
    title: string | null;
    message: string | null;
    raw_details: string | null;
    blob_href: string;
  }
  /** Simple Commit */
  export interface simple$commit {
    id: string;
    tree_id: string;
    message: string;
    timestamp: string;
    author: {
      name: string;
      email: string;
    } | null;
    committer: {
      name: string;
      email: string;
    } | null;
  }
  /** A suite of checks performed on the code of a given code change */
  export interface check$suite {
    id: number;
    node_id: string;
    head_branch: string | null;
    /** The SHA of the head commit that is being checked. */
    head_sha: string;
    status: ("queued" | "in_progress" | "completed") | null;
    conclusion: ("success" | "failure" | "neutral" | "cancelled" | "skipped" | "timed_out" | "action_required") | null;
    url: string | null;
    before: string | null;
    after: string | null;
    pull_requests: Schemas.pull$request$minimal[] | null;
    app: Schemas.nullable$integration;
    repository: Schemas.minimal$repository;
    created_at: string | null;
    updated_at: string | null;
    head_commit: Schemas.simple$commit;
    latest_check_runs_count: number;
    check_runs_url: string;
    rerequestable?: boolean;
    runs_rerequestable?: boolean;
  }
  /** Check suite configuration preferences for a repository. */
  export interface check$suite$preference {
    preferences: {
      auto_trigger_checks?: {
        app_id: number;
        setting: boolean;
      }[];
    };
    repository: Schemas.minimal$repository;
  }
  /** The name of the tool used to generate the code scanning analysis. */
  export type code$scanning$analysis$tool$name = string;
  /** The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data. */
  export type code$scanning$analysis$tool$guid = string;
  /**
   * The full Git reference, formatted as `refs/heads/<branch name>`,
   * `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
   */
  export type code$scanning$ref = string;
  /** State of a code scanning alert. */
  export type code$scanning$alert$state = "open" | "closed" | "dismissed" | "fixed";
  /** The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  export type alert$updated$at = string;
  /** The REST API URL for fetching the list of instances for an alert. */
  export type alert$instances$url = string;
  /** The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  export type code$scanning$alert$fixed$at = string;
  /** The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  export type code$scanning$alert$dismissed$at = string;
  /** **Required when the state is dismissed.** The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`. */
  export type code$scanning$alert$dismissed$reason = string;
  export interface code$scanning$alert$rule$summary {
    /** A unique identifier for the rule used to detect the alert. */
    id?: string | null;
    /** The name of the rule used to detect the alert. */
    name?: string;
    /** A set of tags applicable for the rule. */
    tags?: string[] | null;
    /** The severity of the alert. */
    severity?: ("none" | "note" | "warning" | "error") | null;
    /** A short description of the rule used to detect the alert. */
    description?: string;
  }
  /** The version of the tool used to generate the code scanning analysis. */
  export type code$scanning$analysis$tool$version = string;
  export interface code$scanning$analysis$tool {
    name?: Schemas.code$scanning$analysis$tool$name;
    version?: Schemas.code$scanning$analysis$tool$version;
    guid?: Schemas.code$scanning$analysis$tool$guid;
  }
  /** Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
  export type code$scanning$analysis$analysis$key = string;
  /** Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
  export type code$scanning$alert$environment = string;
  /** Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code. */
  export type code$scanning$analysis$category = string;
  /** Describe a region within a file for the alert. */
  export interface code$scanning$alert$location {
    path?: string;
    start_line?: number;
    end_line?: number;
    start_column?: number;
    end_column?: number;
  }
  /** A classification of the file. For example to identify it as generated. */
  export type code$scanning$alert$classification = "source" | "generated" | "test" | "library";
  export interface code$scanning$alert$instance {
    ref?: Schemas.code$scanning$ref;
    analysis_key?: Schemas.code$scanning$analysis$analysis$key;
    environment?: Schemas.code$scanning$alert$environment;
    category?: Schemas.code$scanning$analysis$category;
    state?: Schemas.code$scanning$alert$state;
    commit_sha?: string;
    message?: {
      text?: string;
    };
    location?: Schemas.code$scanning$alert$location;
    html_url?: string;
    /**
     * Classifications that have been applied to the file that triggered the alert.
     * For example identifying it as documentation, or a generated file.
     */
    classifications?: Schemas.code$scanning$alert$classification[];
  }
  export interface code$scanning$alert$items {
    number: Schemas.alert$number;
    created_at: Schemas.alert$created$at;
    updated_at?: Schemas.alert$updated$at;
    url: Schemas.alert$url;
    html_url: Schemas.alert$html$url;
    instances_url: Schemas.alert$instances$url;
    state: Schemas.code$scanning$alert$state;
    fixed_at?: Schemas.code$scanning$alert$fixed$at;
    dismissed_by: Schemas.nullable$simple$user;
    dismissed_at: Schemas.code$scanning$alert$dismissed$at;
    dismissed_reason: Schemas.code$scanning$alert$dismissed$reason;
    rule: Schemas.code$scanning$alert$rule$summary;
    tool: Schemas.code$scanning$analysis$tool;
    most_recent_instance: Schemas.code$scanning$alert$instance;
  }
  export interface code$scanning$alert$rule {
    /** A unique identifier for the rule used to detect the alert. */
    id?: string | null;
    /** The name of the rule used to detect the alert. */
    name?: string;
    /** The severity of the alert. */
    severity?: ("none" | "note" | "warning" | "error") | null;
    /** The security severity of the alert. */
    security_severity_level?: ("low" | "medium" | "high" | "critical") | null;
    /** A short description of the rule used to detect the alert. */
    description?: string;
    /** description of the rule used to detect the alert. */
    full_description?: string;
    /** A set of tags applicable for the rule. */
    tags?: string[] | null;
    /** Detailed documentation for the rule as GitHub Flavored Markdown. */
    help?: string | null;
  }
  export interface code$scanning$alert {
    number: Schemas.alert$number;
    created_at: Schemas.alert$created$at;
    updated_at?: Schemas.alert$updated$at;
    url: Schemas.alert$url;
    html_url: Schemas.alert$html$url;
    instances_url: Schemas.alert$instances$url;
    state: Schemas.code$scanning$alert$state;
    fixed_at?: Schemas.code$scanning$alert$fixed$at;
    dismissed_by: Schemas.nullable$simple$user;
    dismissed_at: Schemas.code$scanning$alert$dismissed$at;
    dismissed_reason: Schemas.code$scanning$alert$dismissed$reason;
    rule: Schemas.code$scanning$alert$rule;
    tool: Schemas.code$scanning$analysis$tool;
    most_recent_instance: Schemas.code$scanning$alert$instance;
  }
  /** Sets the state of the code scanning alert. Can be one of `open` or `dismissed`. You must provide `dismissed_reason` when you set the state to `dismissed`. */
  export type code$scanning$alert$set$state = "open" | "dismissed";
  /** An identifier for the upload. */
  export type code$scanning$analysis$sarif$id = string;
  /** The SHA of the commit to which the analysis you are uploading relates. */
  export type code$scanning$analysis$commit$sha = string;
  /** Identifies the variable values associated with the environment in which this analysis was performed. */
  export type code$scanning$analysis$environment = string;
  /** The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  export type code$scanning$analysis$created$at = string;
  /** The REST API URL of the analysis resource. */
  export type code$scanning$analysis$url = string;
  export interface code$scanning$analysis {
    ref: Schemas.code$scanning$ref;
    commit_sha: Schemas.code$scanning$analysis$commit$sha;
    analysis_key: Schemas.code$scanning$analysis$analysis$key;
    environment: Schemas.code$scanning$analysis$environment;
    category?: Schemas.code$scanning$analysis$category;
    error: string;
    created_at: Schemas.code$scanning$analysis$created$at;
    /** The total number of results in the analysis. */
    results_count: number;
    /** The total number of rules used in the analysis. */
    rules_count: number;
    /** Unique identifier for this analysis. */
    id: number;
    url: Schemas.code$scanning$analysis$url;
    sarif_id: Schemas.code$scanning$analysis$sarif$id;
    tool: Schemas.code$scanning$analysis$tool;
    deletable: boolean;
    /** Warning generated when processing the analysis */
    warning: string;
  }
  /** Successful deletion of a code scanning analysis */
  export interface code$scanning$analysis$deletion {
    /** Next deletable analysis in chain, without last analysis deletion confirmation */
    next_analysis_url: string | null;
    /** Next deletable analysis in chain, with last analysis deletion confirmation */
    confirm_delete_url: string | null;
  }
  /** A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/enterprise-server@3.4/code-security/secure-coding/sarif-support-for-code-scanning)." */
  export type code$scanning$analysis$sarif$file = string;
  export interface code$scanning$sarifs$receipt {
    id?: Schemas.code$scanning$analysis$sarif$id;
    /** The REST API URL for checking the status of the upload. */
    url?: string;
  }
  export interface code$scanning$sarifs$status {
    /** `pending` files have not yet been processed, while `complete` means results from the SARIF have been stored. `failed` files have either not been processed at all, or could only be partially processed. */
    processing_status?: "pending" | "complete" | "failed";
    /** The REST API URL for getting the analyses associated with the upload. */
    analyses_url?: string | null;
    /** Any errors that ocurred during processing of the delivery. */
    errors?: string[] | null;
  }
  /** Collaborator */
  export interface collaborator {
    login: string;
    id: number;
    email?: string | null;
    name?: string | null;
    node_id: string;
    avatar_url: string;
    gravatar_id: string | null;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
    permissions?: {
      pull: boolean;
      triage?: boolean;
      push: boolean;
      maintain?: boolean;
      admin: boolean;
    };
  }
  /** Repository invitations let you manage who you collaborate with. */
  export interface repository$invitation {
    /** Unique identifier of the repository invitation. */
    id: number;
    repository: Schemas.minimal$repository;
    invitee: Schemas.nullable$simple$user;
    inviter: Schemas.nullable$simple$user;
    /** The permission associated with the invitation. */
    permissions: "read" | "write" | "admin" | "triage" | "maintain";
    created_at: string;
    /** Whether or not the invitation has expired */
    expired?: boolean;
    /** URL for the repository invitation */
    url: string;
    html_url: string;
    node_id: string;
  }
  /** Collaborator */
  export interface nullable$collaborator {
    login: string;
    id: number;
    email?: string | null;
    name?: string | null;
    node_id: string;
    avatar_url: string;
    gravatar_id: string | null;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
    permissions?: {
      pull: boolean;
      triage?: boolean;
      push: boolean;
      maintain?: boolean;
      admin: boolean;
    };
  }
  /** Repository Collaborator Permission */
  export interface repository$collaborator$permission {
    permission: string;
    user: Schemas.nullable$collaborator;
  }
  /** Commit Comment */
  export interface commit$comment {
    html_url: string;
    url: string;
    id: number;
    node_id: string;
    body: string;
    path: string | null;
    position: number | null;
    line: number | null;
    commit_id: string;
    user: Schemas.nullable$simple$user;
    created_at: string;
    updated_at: string;
    author_association: Schemas.author_association;
    reactions?: Schemas.reaction$rollup;
  }
  /** Branch Short */
  export interface branch$short {
    name: string;
    commit: {
      sha: string;
      url: string;
    };
    protected: boolean;
  }
  /** Hypermedia Link */
  export interface link {
    href: string;
  }
  /** The status of auto merging a pull request. */
  export interface auto_merge {
    enabled_by: Schemas.simple$user;
    /** The merge method to use. */
    merge_method: "merge" | "squash" | "rebase";
    /** Title for the merge commit message. */
    commit_title: string;
    /** Commit message for the merge commit. */
    commit_message: string;
  }
  /** Pull Request Simple */
  export interface pull$request$simple {
    url: string;
    id: number;
    node_id: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
    issue_url: string;
    commits_url: string;
    review_comments_url: string;
    review_comment_url: string;
    comments_url: string;
    statuses_url: string;
    number: number;
    state: string;
    locked: boolean;
    title: string;
    user: Schemas.nullable$simple$user;
    body: string | null;
    labels: {
      id: number;
      node_id: string;
      url: string;
      name: string;
      description: string;
      color: string;
      default: boolean;
    }[];
    milestone: Schemas.nullable$milestone;
    active_lock_reason?: string | null;
    created_at: string;
    updated_at: string;
    closed_at: string | null;
    merged_at: string | null;
    merge_commit_sha: string | null;
    assignee: Schemas.nullable$simple$user;
    assignees?: Schemas.simple$user[] | null;
    requested_reviewers?: Schemas.simple$user[] | null;
    requested_teams?: Schemas.team[] | null;
    head: {
      label: string;
      ref: string;
      repo: Schemas.repository;
      sha: string;
      user: Schemas.nullable$simple$user;
    };
    base: {
      label: string;
      ref: string;
      repo: Schemas.repository;
      sha: string;
      user: Schemas.nullable$simple$user;
    };
    _links: {
      comments: Schemas.link;
      commits: Schemas.link;
      statuses: Schemas.link;
      html: Schemas.link;
      issue: Schemas.link;
      review_comments: Schemas.link;
      review_comment: Schemas.link;
      self: Schemas.link;
    };
    author_association: Schemas.author_association;
    auto_merge: Schemas.auto_merge;
    /** Indicates whether or not the pull request is a draft. */
    draft?: boolean;
  }
  export interface simple$commit$status {
    description: string | null;
    id: number;
    node_id: string;
    state: string;
    context: string;
    target_url: string;
    required?: boolean | null;
    avatar_url: string | null;
    url: string;
    created_at: string;
    updated_at: string;
  }
  /** Combined Commit Status */
  export interface combined$commit$status {
    state: string;
    statuses: Schemas.simple$commit$status[];
    sha: string;
    total_count: number;
    repository: Schemas.minimal$repository;
    commit_url: string;
    url: string;
  }
  /** The status of a commit. */
  export interface status {
    url: string;
    avatar_url: string | null;
    id: number;
    node_id: string;
    state: string;
    description: string;
    target_url: string;
    context: string;
    created_at: string;
    updated_at: string;
    creator: Schemas.nullable$simple$user;
  }
  /** Commit Comparison */
  export interface commit$comparison {
    url: string;
    html_url: string;
    permalink_url: string;
    diff_url: string;
    patch_url: string;
    base_commit: Schemas.commit;
    merge_base_commit: Schemas.commit;
    status: "diverged" | "ahead" | "behind" | "identical";
    ahead_by: number;
    behind_by: number;
    total_commits: number;
    commits: Schemas.commit[];
    files?: Schemas.diff$entry[];
  }
  /** Content Tree */
  export interface content$tree {
    type: string;
    size: number;
    name: string;
    path: string;
    sha: string;
    url: string;
    git_url: string | null;
    html_url: string | null;
    download_url: string | null;
    entries?: {
      type: string;
      size: number;
      name: string;
      path: string;
      content?: string;
      sha: string;
      url: string;
      git_url: string | null;
      html_url: string | null;
      download_url: string | null;
      _links: {
        git: string | null;
        html: string | null;
        self: string;
      };
    }[];
    _links: {
      git: string | null;
      html: string | null;
      self: string;
    };
  }
  /** A list of directory items */
  export type content$directory = {
    type: string;
    size: number;
    name: string;
    path: string;
    content?: string;
    sha: string;
    url: string;
    git_url: string | null;
    html_url: string | null;
    download_url: string | null;
    _links: {
      git: string | null;
      html: string | null;
      self: string;
    };
  }[];
  /** Content File */
  export interface content$file {
    type: string;
    encoding: string;
    size: number;
    name: string;
    path: string;
    content: string;
    sha: string;
    url: string;
    git_url: string | null;
    html_url: string | null;
    download_url: string | null;
    _links: {
      git: string | null;
      html: string | null;
      self: string;
    };
    target?: string;
    submodule_git_url?: string;
  }
  /** An object describing a symlink */
  export interface content$symlink {
    type: string;
    target: string;
    size: number;
    name: string;
    path: string;
    sha: string;
    url: string;
    git_url: string | null;
    html_url: string | null;
    download_url: string | null;
    _links: {
      git: string | null;
      html: string | null;
      self: string;
    };
  }
  /** An object describing a symlink */
  export interface content$submodule {
    type: string;
    submodule_git_url: string;
    size: number;
    name: string;
    path: string;
    sha: string;
    url: string;
    git_url: string | null;
    html_url: string | null;
    download_url: string | null;
    _links: {
      git: string | null;
      html: string | null;
      self: string;
    };
  }
  /** File Commit */
  export interface file$commit {
    content: {
      name?: string;
      path?: string;
      sha?: string;
      size?: number;
      url?: string;
      html_url?: string;
      git_url?: string;
      download_url?: string;
      type?: string;
      _links?: {
        self?: string;
        git?: string;
        html?: string;
      };
    } | null;
    commit: {
      sha?: string;
      node_id?: string;
      url?: string;
      html_url?: string;
      author?: {
        date?: string;
        name?: string;
        email?: string;
      };
      committer?: {
        date?: string;
        name?: string;
        email?: string;
      };
      message?: string;
      tree?: {
        url?: string;
        sha?: string;
      };
      parents?: {
        url?: string;
        html_url?: string;
        sha?: string;
      }[];
      verification?: {
        verified?: boolean;
        reason?: string;
        signature?: string | null;
        payload?: string | null;
      };
    };
  }
  /** Contributor */
  export interface contributor {
    login?: string;
    id?: number;
    node_id?: string;
    avatar_url?: string;
    gravatar_id?: string | null;
    url?: string;
    html_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    starred_url?: string;
    subscriptions_url?: string;
    organizations_url?: string;
    repos_url?: string;
    events_url?: string;
    received_events_url?: string;
    type: string;
    site_admin?: boolean;
    contributions: number;
    email?: string;
    name?: string;
  }
  /** Set secrets for Dependabot. */
  export interface dependabot$secret {
    /** The name of the secret. */
    name: string;
    created_at: string;
    updated_at: string;
  }
  /** The status of a deployment. */
  export interface deployment$status {
    url: string;
    id: number;
    node_id: string;
    /** The state of the status. */
    state: "error" | "failure" | "inactive" | "pending" | "success" | "queued" | "in_progress";
    creator: Schemas.nullable$simple$user;
    /** A short description of the status. */
    description: string;
    /** The environment of the deployment that the status is for. */
    environment?: string;
    /** Deprecated: the URL to associate with this status. */
    target_url: string;
    created_at: string;
    updated_at: string;
    deployment_url: string;
    repository_url: string;
    /** The URL for accessing your environment. */
    environment_url?: string;
    /** The URL to associate with this status. */
    log_url?: string;
    performed_via_github_app?: Schemas.nullable$integration;
  }
  /** The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days). */
  export type wait$timer = number;
  /** The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`. */
  export interface deployment_branch_policy {
    /** Whether only branches with branch protection rules can deploy to this environment. If `protected_branches` is `true`, `custom_branch_policies` must be `false`; if `protected_branches` is `false`, `custom_branch_policies` must be `true`. */
    protected_branches: boolean;
    /** Whether only branches that match the specified name patterns can deploy to this environment.  If `custom_branch_policies` is `true`, `protected_branches` must be `false`; if `custom_branch_policies` is `false`, `protected_branches` must be `true`. */
    custom_branch_policies: boolean;
  }
  /** Details of a deployment environment */
  export interface environment {
    /** The id of the environment. */
    id: number;
    node_id: string;
    /** The name of the environment. */
    name: string;
    url: string;
    html_url: string;
    /** The time that the environment was created, in ISO 8601 format. */
    created_at: string;
    /** The time that the environment was last updated, in ISO 8601 format. */
    updated_at: string;
    protection_rules?: (
      | {
          id: number;
          node_id: string;
          type: string;
          wait_timer?: Schemas.wait$timer;
        }
      | {
          id: number;
          node_id: string;
          type: string;
          /** The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed. */
          reviewers?: {
            type?: Schemas.deployment$reviewer$type;
            reviewer?: Schemas.simple$user | Schemas.team;
          }[];
        }
      | {
          id: number;
          node_id: string;
          type: string;
        }
    )[];
    deployment_branch_policy?: Schemas.deployment_branch_policy;
  }
  /** Short Blob */
  export interface short$blob {
    url: string;
    sha: string;
  }
  /** Blob */
  export interface blob {
    content: string;
    encoding: string;
    url: string;
    sha: string;
    size: number | null;
    node_id: string;
    highlighted_content?: string;
  }
  /** Low-level Git commit operations within a repository */
  export interface git$commit {
    /** SHA for the commit */
    sha: string;
    node_id: string;
    url: string;
    /** Identifying information for the git-user */
    author: {
      /** Timestamp of the commit */
      date: string;
      /** Git email address of the user */
      email: string;
      /** Name of the git user */
      name: string;
    };
    /** Identifying information for the git-user */
    committer: {
      /** Timestamp of the commit */
      date: string;
      /** Git email address of the user */
      email: string;
      /** Name of the git user */
      name: string;
    };
    /** Message describing the purpose of the commit */
    message: string;
    tree: {
      /** SHA for the commit */
      sha: string;
      url: string;
    };
    parents: {
      /** SHA for the commit */
      sha: string;
      url: string;
      html_url: string;
    }[];
    verification: {
      verified: boolean;
      reason: string;
      signature: string | null;
      payload: string | null;
    };
    html_url: string;
  }
  /** Git references within a repository */
  export interface git$ref {
    ref: string;
    node_id: string;
    url: string;
    object: {
      type: string;
      /** SHA for the reference */
      sha: string;
      url: string;
    };
  }
  /** Metadata for a Git tag */
  export interface git$tag {
    node_id: string;
    /** Name of the tag */
    tag: string;
    sha: string;
    /** URL for the tag */
    url: string;
    /** Message describing the purpose of the tag */
    message: string;
    tagger: {
      date: string;
      email: string;
      name: string;
    };
    object: {
      sha: string;
      type: string;
      url: string;
    };
    verification?: Schemas.verification;
  }
  /** The hierarchy between files in a Git repository. */
  export interface git$tree {
    sha: string;
    url: string;
    truncated: boolean;
    /** Objects specifying a tree structure */
    tree: {
      path?: string;
      mode?: string;
      type?: string;
      sha?: string;
      size?: number;
      url?: string;
    }[];
  }
  export interface hook$response {
    code: number | null;
    status: string | null;
    message: string | null;
  }
  /** Webhooks for repositories. */
  export interface hook {
    type: string;
    /** Unique identifier of the webhook. */
    id: number;
    /** The name of a valid service, use 'web' for a webhook. */
    name: string;
    /** Determines whether the hook is actually triggered on pushes. */
    active: boolean;
    /** Determines what events the hook is triggered for. Default: ['push']. */
    events: string[];
    config: {
      email?: string;
      password?: string;
      room?: string;
      subdomain?: string;
      url?: Schemas.webhook$config$url;
      insecure_ssl?: Schemas.webhook$config$insecure$ssl;
      content_type?: Schemas.webhook$config$content$type;
      digest?: string;
      secret?: Schemas.webhook$config$secret;
      token?: string;
    };
    updated_at: string;
    created_at: string;
    url: string;
    test_url: string;
    ping_url: string;
    deliveries_url?: string;
    last_response: Schemas.hook$response;
  }
  /** Issues are a great way to keep track of tasks, enhancements, and bugs for your projects. */
  export interface nullable$issue {
    id: number;
    node_id: string;
    /** URL for the issue */
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    /** Number uniquely identifying the issue within its repository */
    number: number;
    /** State of the issue; either 'open' or 'closed' */
    state: string;
    /** Title of the issue */
    title: string;
    /** Contents of the issue */
    body?: string | null;
    user: Schemas.nullable$simple$user;
    /** Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository */
    labels: (
      | string
      | {
          id?: number;
          node_id?: string;
          url?: string;
          name?: string;
          description?: string | null;
          color?: string | null;
          default?: boolean;
        }
    )[];
    assignee: Schemas.nullable$simple$user;
    assignees?: Schemas.simple$user[] | null;
    milestone: Schemas.nullable$milestone;
    locked: boolean;
    active_lock_reason?: string | null;
    comments: number;
    pull_request?: {
      merged_at?: string | null;
      diff_url: string | null;
      html_url: string | null;
      patch_url: string | null;
      url: string | null;
    };
    closed_at: string | null;
    created_at: string;
    updated_at: string;
    draft?: boolean;
    closed_by?: Schemas.nullable$simple$user;
    body_html?: string;
    body_text?: string;
    timeline_url?: string;
    repository?: Schemas.repository;
    performed_via_github_app?: Schemas.nullable$integration;
    author_association: Schemas.author_association;
    reactions?: Schemas.reaction$rollup;
  }
  /** Issue Event Label */
  export interface issue$event$label {
    name: string | null;
    color: string | null;
  }
  export interface issue$event$dismissed$review {
    state: string;
    review_id: number;
    dismissal_message: string | null;
    dismissal_commit_id?: string | null;
  }
  /** Issue Event Milestone */
  export interface issue$event$milestone {
    title: string;
  }
  /** Issue Event Project Card */
  export interface issue$event$project$card {
    url: string;
    id: number;
    project_url: string;
    project_id: number;
    column_name: string;
    previous_column_name?: string;
  }
  /** Issue Event Rename */
  export interface issue$event$rename {
    from: string;
    to: string;
  }
  /** Issue Event */
  export interface issue$event {
    id: number;
    node_id: string;
    url: string;
    actor: Schemas.nullable$simple$user;
    event: string;
    commit_id: string | null;
    commit_url: string | null;
    created_at: string;
    issue?: Schemas.nullable$issue;
    label?: Schemas.issue$event$label;
    assignee?: Schemas.nullable$simple$user;
    assigner?: Schemas.nullable$simple$user;
    review_requester?: Schemas.nullable$simple$user;
    requested_reviewer?: Schemas.nullable$simple$user;
    requested_team?: Schemas.team;
    dismissed_review?: Schemas.issue$event$dismissed$review;
    milestone?: Schemas.issue$event$milestone;
    project_card?: Schemas.issue$event$project$card;
    rename?: Schemas.issue$event$rename;
    author_association?: Schemas.author_association;
    lock_reason?: string | null;
    performed_via_github_app?: Schemas.nullable$integration;
  }
  /** Labeled Issue Event */
  export interface labeled$issue$event {
    id: number;
    node_id: string;
    url: string;
    actor: Schemas.simple$user;
    event: string;
    commit_id: string | null;
    commit_url: string | null;
    created_at: string;
    performed_via_github_app: Schemas.nullable$integration;
    label: {
      name: string;
      color: string;
    };
  }
  /** Unlabeled Issue Event */
  export interface unlabeled$issue$event {
    id: number;
    node_id: string;
    url: string;
    actor: Schemas.simple$user;
    event: string;
    commit_id: string | null;
    commit_url: string | null;
    created_at: string;
    performed_via_github_app: Schemas.nullable$integration;
    label: {
      name: string;
      color: string;
    };
  }
  /** Assigned Issue Event */
  export interface assigned$issue$event {
    id: number;
    node_id: string;
    url: string;
    actor: Schemas.simple$user;
    event: string;
    commit_id: string | null;
    commit_url: string | null;
    created_at: string;
    performed_via_github_app: Schemas.integration;
    assignee: Schemas.simple$user;
    assigner: Schemas.simple$user;
  }
  /** Unassigned Issue Event */
  export interface unassigned$issue$event {
    id: number;
    node_id: string;
    url: string;
    actor: Schemas.simple$user;
    event: string;
    commit_id: string | null;
    commit_url: string | null;
    created_at: string;
    performed_via_github_app: Schemas.nullable$integration;
    assignee: Schemas.simple$user;
    assigner: Schemas.simple$user;
  }
  /** Milestoned Issue Event */
  export interface milestoned$issue$event {
    id: number;
    node_id: string;
    url: string;
    actor: Schemas.simple$user;
    event: string;
    commit_id: string | null;
    commit_url: string | null;
    created_at: string;
    performed_via_github_app: Schemas.nullable$integration;
    milestone: {
      title: string;
    };
  }
  /** Demilestoned Issue Event */
  export interface demilestoned$issue$event {
    id: number;
    node_id: string;
    url: string;
    actor: Schemas.simple$user;
    event: string;
    commit_id: string | null;
    commit_url: string | null;
    created_at: string;
    performed_via_github_app: Schemas.nullable$integration;
    milestone: {
      title: string;
    };
  }
  /** Renamed Issue Event */
  export interface renamed$issue$event {
    id: number;
    node_id: string;
    url: string;
    actor: Schemas.simple$user;
    event: string;
    commit_id: string | null;
    commit_url: string | null;
    created_at: string;
    performed_via_github_app: Schemas.nullable$integration;
    rename: {
      from: string;
      to: string;
    };
  }
  /** Review Requested Issue Event */
  export interface review$requested$issue$event {
    id: number;
    node_id: string;
    url: string;
    actor: Schemas.simple$user;
    event: string;
    commit_id: string | null;
    commit_url: string | null;
    created_at: string;
    performed_via_github_app: Schemas.nullable$integration;
    review_requester: Schemas.simple$user;
    requested_team?: Schemas.team;
    requested_reviewer?: Schemas.simple$user;
  }
  /** Review Request Removed Issue Event */
  export interface review$request$removed$issue$event {
    id: number;
    node_id: string;
    url: string;
    actor: Schemas.simple$user;
    event: string;
    commit_id: string | null;
    commit_url: string | null;
    created_at: string;
    performed_via_github_app: Schemas.nullable$integration;
    review_requester: Schemas.simple$user;
    requested_team?: Schemas.team;
    requested_reviewer?: Schemas.simple$user;
  }
  /** Review Dismissed Issue Event */
  export interface review$dismissed$issue$event {
    id: number;
    node_id: string;
    url: string;
    actor: Schemas.simple$user;
    event: string;
    commit_id: string | null;
    commit_url: string | null;
    created_at: string;
    performed_via_github_app: Schemas.nullable$integration;
    dismissed_review: {
      state: string;
      review_id: number;
      dismissal_message: string | null;
      dismissal_commit_id?: string;
    };
  }
  /** Locked Issue Event */
  export interface locked$issue$event {
    id: number;
    node_id: string;
    url: string;
    actor: Schemas.simple$user;
    event: string;
    commit_id: string | null;
    commit_url: string | null;
    created_at: string;
    performed_via_github_app: Schemas.nullable$integration;
    lock_reason: string | null;
  }
  /** Added to Project Issue Event */
  export interface added$to$project$issue$event {
    id: number;
    node_id: string;
    url: string;
    actor: Schemas.simple$user;
    event: string;
    commit_id: string | null;
    commit_url: string | null;
    created_at: string;
    performed_via_github_app: Schemas.nullable$integration;
    project_card?: {
      id: number;
      url: string;
      project_id: number;
      project_url: string;
      column_name: string;
      previous_column_name?: string;
    };
  }
  /** Moved Column in Project Issue Event */
  export interface moved$column$in$project$issue$event {
    id: number;
    node_id: string;
    url: string;
    actor: Schemas.simple$user;
    event: string;
    commit_id: string | null;
    commit_url: string | null;
    created_at: string;
    performed_via_github_app: Schemas.nullable$integration;
    project_card?: {
      id: number;
      url: string;
      project_id: number;
      project_url: string;
      column_name: string;
      previous_column_name?: string;
    };
  }
  /** Removed from Project Issue Event */
  export interface removed$from$project$issue$event {
    id: number;
    node_id: string;
    url: string;
    actor: Schemas.simple$user;
    event: string;
    commit_id: string | null;
    commit_url: string | null;
    created_at: string;
    performed_via_github_app: Schemas.nullable$integration;
    project_card?: {
      id: number;
      url: string;
      project_id: number;
      project_url: string;
      column_name: string;
      previous_column_name?: string;
    };
  }
  /** Converted Note to Issue Issue Event */
  export interface converted$note$to$issue$issue$event {
    id: number;
    node_id: string;
    url: string;
    actor: Schemas.simple$user;
    event: string;
    commit_id: string | null;
    commit_url: string | null;
    created_at: string;
    performed_via_github_app: Schemas.integration;
    project_card?: {
      id: number;
      url: string;
      project_id: number;
      project_url: string;
      column_name: string;
      previous_column_name?: string;
    };
  }
  export type issue$event$for$issue =
    | Schemas.labeled$issue$event
    | Schemas.unlabeled$issue$event
    | Schemas.assigned$issue$event
    | Schemas.unassigned$issue$event
    | Schemas.milestoned$issue$event
    | Schemas.demilestoned$issue$event
    | Schemas.renamed$issue$event
    | Schemas.review$requested$issue$event
    | Schemas.review$request$removed$issue$event
    | Schemas.review$dismissed$issue$event
    | Schemas.locked$issue$event
    | Schemas.added$to$project$issue$event
    | Schemas.moved$column$in$project$issue$event
    | Schemas.removed$from$project$issue$event
    | Schemas.converted$note$to$issue$issue$event;
  /** Color-coded labels help you categorize and filter your issues (just like labels in Gmail). */
  export interface label {
    id: number;
    node_id: string;
    /** URL for the label */
    url: string;
    /** The name of the label. */
    name: string;
    description: string | null;
    /** 6-character hex code, without the leading #, identifying the color */
    color: string;
    default: boolean;
  }
  /** Timeline Comment Event */
  export interface timeline$comment$event {
    event: string;
    actor: Schemas.simple$user;
    /** Unique identifier of the issue comment */
    id: number;
    node_id: string;
    /** URL for the issue comment */
    url: string;
    /** Contents of the issue comment */
    body?: string;
    body_text?: string;
    body_html?: string;
    html_url: string;
    user: Schemas.simple$user;
    created_at: string;
    updated_at: string;
    issue_url: string;
    author_association: Schemas.author_association;
    performed_via_github_app?: Schemas.nullable$integration;
    reactions?: Schemas.reaction$rollup;
  }
  /** Timeline Cross Referenced Event */
  export interface timeline$cross$referenced$event {
    event: string;
    actor?: Schemas.simple$user;
    created_at: string;
    updated_at: string;
    source: {
      type?: string;
      issue?: Schemas.issue;
    };
  }
  /** Timeline Committed Event */
  export interface timeline$committed$event {
    event?: string;
    /** SHA for the commit */
    sha: string;
    node_id: string;
    url: string;
    /** Identifying information for the git-user */
    author: {
      /** Timestamp of the commit */
      date: string;
      /** Git email address of the user */
      email: string;
      /** Name of the git user */
      name: string;
    };
    /** Identifying information for the git-user */
    committer: {
      /** Timestamp of the commit */
      date: string;
      /** Git email address of the user */
      email: string;
      /** Name of the git user */
      name: string;
    };
    /** Message describing the purpose of the commit */
    message: string;
    tree: {
      /** SHA for the commit */
      sha: string;
      url: string;
    };
    parents: {
      /** SHA for the commit */
      sha: string;
      url: string;
      html_url: string;
    }[];
    verification: {
      verified: boolean;
      reason: string;
      signature: string | null;
      payload: string | null;
    };
    html_url: string;
  }
  /** Timeline Reviewed Event */
  export interface timeline$reviewed$event {
    event: string;
    /** Unique identifier of the review */
    id: number;
    node_id: string;
    user: Schemas.simple$user;
    /** The text of the review. */
    body: string | null;
    state: string;
    html_url: string;
    pull_request_url: string;
    _links: {
      html: {
        href: string;
      };
      pull_request: {
        href: string;
      };
    };
    submitted_at?: string;
    /** A commit SHA for the review. */
    commit_id: string;
    body_html?: string;
    body_text?: string;
    author_association: Schemas.author_association;
  }
  /** Pull Request Review Comments are comments on a portion of the Pull Request's diff. */
  export interface pull$request$review$comment {
    /** URL for the pull request review comment */
    url: string;
    /** The ID of the pull request review to which the comment belongs. */
    pull_request_review_id: number | null;
    /** The ID of the pull request review comment. */
    id: number;
    /** The node ID of the pull request review comment. */
    node_id: string;
    /** The diff of the line that the comment refers to. */
    diff_hunk: string;
    /** The relative path of the file to which the comment applies. */
    path: string;
    /** The line index in the diff to which the comment applies. */
    position: number;
    /** The index of the original line in the diff to which the comment applies. */
    original_position: number;
    /** The SHA of the commit to which the comment applies. */
    commit_id: string;
    /** The SHA of the original commit to which the comment applies. */
    original_commit_id: string;
    /** The comment ID to reply to. */
    in_reply_to_id?: number;
    user: Schemas.simple$user;
    /** The text of the comment. */
    body: string;
    created_at: string;
    updated_at: string;
    /** HTML URL for the pull request review comment. */
    html_url: string;
    /** URL for the pull request that the review comment belongs to. */
    pull_request_url: string;
    author_association: Schemas.author_association;
    _links: {
      self: {
        href: string;
      };
      html: {
        href: string;
      };
      pull_request: {
        href: string;
      };
    };
    /** The first line of the range for a multi-line comment. */
    start_line?: number | null;
    /** The first line of the range for a multi-line comment. */
    original_start_line?: number | null;
    /** The side of the first line of the range for a multi-line comment. */
    start_side?: ("LEFT" | "RIGHT") | null;
    /** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
    line?: number;
    /** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
    original_line?: number;
    /** The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment */
    side?: "LEFT" | "RIGHT";
    reactions?: Schemas.reaction$rollup;
    body_html?: string;
    body_text?: string;
  }
  /** Timeline Line Commented Event */
  export interface timeline$line$commented$event {
    event?: string;
    node_id?: string;
    comments?: Schemas.pull$request$review$comment[];
  }
  /** Timeline Commit Commented Event */
  export interface timeline$commit$commented$event {
    event?: string;
    node_id?: string;
    commit_id?: string;
    comments?: Schemas.commit$comment[];
  }
  /** Timeline Assigned Issue Event */
  export interface timeline$assigned$issue$event {
    id: number;
    node_id: string;
    url: string;
    actor: Schemas.simple$user;
    event: string;
    commit_id: string | null;
    commit_url: string | null;
    created_at: string;
    performed_via_github_app: Schemas.nullable$integration;
    assignee: Schemas.simple$user;
  }
  /** Timeline Unassigned Issue Event */
  export interface timeline$unassigned$issue$event {
    id: number;
    node_id: string;
    url: string;
    actor: Schemas.simple$user;
    event: string;
    commit_id: string | null;
    commit_url: string | null;
    created_at: string;
    performed_via_github_app: Schemas.nullable$integration;
    assignee: Schemas.simple$user;
  }
  /** State Change Issue Event */
  export interface state$change$issue$event {
    id: number;
    node_id: string;
    url: string;
    actor: Schemas.simple$user;
    event: string;
    commit_id: string | null;
    commit_url: string | null;
    created_at: string;
    performed_via_github_app: Schemas.nullable$integration;
  }
  export type timeline$issue$events =
    | Schemas.labeled$issue$event
    | Schemas.unlabeled$issue$event
    | Schemas.milestoned$issue$event
    | Schemas.demilestoned$issue$event
    | Schemas.renamed$issue$event
    | Schemas.review$requested$issue$event
    | Schemas.review$request$removed$issue$event
    | Schemas.review$dismissed$issue$event
    | Schemas.locked$issue$event
    | Schemas.added$to$project$issue$event
    | Schemas.moved$column$in$project$issue$event
    | Schemas.removed$from$project$issue$event
    | Schemas.converted$note$to$issue$issue$event
    | Schemas.timeline$comment$event
    | Schemas.timeline$cross$referenced$event
    | Schemas.timeline$committed$event
    | Schemas.timeline$reviewed$event
    | Schemas.timeline$line$commented$event
    | Schemas.timeline$commit$commented$event
    | Schemas.timeline$assigned$issue$event
    | Schemas.timeline$unassigned$issue$event
    | Schemas.state$change$issue$event;
  /** An SSH key granting access to a single repository. */
  export interface deploy$key {
    id: number;
    key: string;
    url: string;
    title: string;
    verified: boolean;
    created_at: string;
    read_only: boolean;
  }
  /** Language */
  export interface language {
    [key: string]: number;
  }
  /** License Content */
  export interface license$content {
    name: string;
    path: string;
    sha: string;
    size: number;
    url: string;
    html_url: string | null;
    git_url: string | null;
    download_url: string | null;
    type: string;
    content: string;
    encoding: string;
    _links: {
      git: string | null;
      html: string | null;
      self: string;
    };
    license: Schemas.nullable$license$simple;
  }
  /** Results of a successful merge upstream request */
  export interface merged$upstream {
    message?: string;
    merge_type?: "merge" | "fast-forward" | "none";
    base_branch?: string;
  }
  /** A collection of related issues and pull requests. */
  export interface milestone {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    /** The number of the milestone. */
    number: number;
    /** The state of the milestone. */
    state: "open" | "closed";
    /** The title of the milestone. */
    title: string;
    description: string | null;
    creator: Schemas.nullable$simple$user;
    open_issues: number;
    closed_issues: number;
    created_at: string;
    updated_at: string;
    closed_at: string | null;
    due_on: string | null;
  }
  export interface pages$source$hash {
    branch: string;
    path: string;
  }
  export interface pages$https$certificate {
    state:
      | "new"
      | "authorization_created"
      | "authorization_pending"
      | "authorized"
      | "authorization_revoked"
      | "issued"
      | "uploaded"
      | "approved"
      | "errored"
      | "bad_authz"
      | "destroy_pending"
      | "dns_changed";
    description: string;
    /** Array of the domain set and its alternate name (if it is configured) */
    domains: string[];
    expires_at?: string;
  }
  /** The configuration for GitHub Pages for a repository. */
  export interface page {
    /** The API address for accessing this Page resource. */
    url: string;
    /** The status of the most recent build of the Page. */
    status: ("built" | "building" | "errored") | null;
    /** The Pages site's custom domain */
    cname: string | null;
    /** The state if the domain is verified */
    protected_domain_state?: ("pending" | "verified" | "unverified") | null;
    /** The timestamp when a pending domain becomes unverified. */
    pending_domain_unverified_at?: string | null;
    /** Whether the Page has a custom 404 page. */
    custom_404: boolean;
    /** The web address the Page can be accessed from. */
    html_url?: string;
    source?: Schemas.pages$source$hash;
    /** Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site. */
    public: boolean;
    https_certificate?: Schemas.pages$https$certificate;
    /** Whether https is enabled on the domain */
    https_enforced?: boolean;
  }
  /** Page Build */
  export interface page$build {
    url: string;
    status: string;
    error: {
      message: string | null;
    };
    pusher: Schemas.nullable$simple$user;
    commit: string;
    duration: number;
    created_at: string;
    updated_at: string;
  }
  /** Page Build Status */
  export interface page$build$status {
    url: string;
    status: string;
  }
  export interface repository$pre$receive$hook {
    id?: number;
    name?: string;
    enforcement?: string;
    configuration_url?: string;
  }
  /** Groups of organization members that gives permissions on specified repositories. */
  export interface team$simple {
    /** Unique identifier of the team */
    id: number;
    node_id: string;
    /** URL for the team */
    url: string;
    members_url: string;
    /** Name of the team */
    name: string;
    /** Description of the team */
    description: string | null;
    /** Permission that the team will have for its repositories */
    permission: string;
    /** The level of privacy this team should have */
    privacy?: string;
    html_url: string;
    repositories_url: string;
    slug: string;
    /** Distinguished Name (DN) that team maps to within LDAP environment */
    ldap_dn?: string;
  }
  /** Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary. */
  export interface pull$request {
    url: string;
    id: number;
    node_id: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
    issue_url: string;
    commits_url: string;
    review_comments_url: string;
    review_comment_url: string;
    comments_url: string;
    statuses_url: string;
    /** Number uniquely identifying the pull request within its repository. */
    number: number;
    /** State of this Pull Request. Either `open` or `closed`. */
    state: "open" | "closed";
    locked: boolean;
    /** The title of the pull request. */
    title: string;
    user: Schemas.nullable$simple$user;
    body: string | null;
    labels: {
      id: number;
      node_id: string;
      url: string;
      name: string;
      description: string | null;
      color: string;
      default: boolean;
    }[];
    milestone: Schemas.nullable$milestone;
    active_lock_reason?: string | null;
    created_at: string;
    updated_at: string;
    closed_at: string | null;
    merged_at: string | null;
    merge_commit_sha: string | null;
    assignee: Schemas.nullable$simple$user;
    assignees?: Schemas.simple$user[] | null;
    requested_reviewers?: Schemas.simple$user[] | null;
    requested_teams?: Schemas.team$simple[] | null;
    head: {
      label: string;
      ref: string;
      repo: {
        archive_url: string;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        deployments_url: string;
        description: string | null;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        hooks_url: string;
        html_url: string;
        id: number;
        node_id: string;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        languages_url: string;
        merges_url: string;
        milestones_url: string;
        name: string;
        notifications_url: string;
        owner: {
          avatar_url: string;
          events_url: string;
          followers_url: string;
          following_url: string;
          gists_url: string;
          gravatar_id: string | null;
          html_url: string;
          id: number;
          node_id: string;
          login: string;
          organizations_url: string;
          received_events_url: string;
          repos_url: string;
          site_admin: boolean;
          starred_url: string;
          subscriptions_url: string;
          type: string;
          url: string;
        };
        private: boolean;
        pulls_url: string;
        releases_url: string;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        tags_url: string;
        teams_url: string;
        trees_url: string;
        url: string;
        clone_url: string;
        default_branch: string;
        forks: number;
        forks_count: number;
        git_url: string;
        has_downloads: boolean;
        has_issues: boolean;
        has_projects: boolean;
        has_wiki: boolean;
        has_pages: boolean;
        homepage: string | null;
        language: string | null;
        master_branch?: string;
        archived: boolean;
        disabled: boolean;
        /** The repository visibility: public, private, or internal. */
        visibility?: string;
        mirror_url: string | null;
        open_issues: number;
        open_issues_count: number;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          push: boolean;
          triage?: boolean;
          pull: boolean;
        };
        temp_clone_token?: string;
        allow_merge_commit?: boolean;
        allow_squash_merge?: boolean;
        allow_rebase_merge?: boolean;
        license: {
          key: string;
          name: string;
          url: string | null;
          spdx_id: string | null;
          node_id: string;
        } | null;
        pushed_at: string;
        size: number;
        ssh_url: string;
        stargazers_count: number;
        svn_url: string;
        topics?: string[];
        watchers: number;
        watchers_count: number;
        created_at: string;
        updated_at: string;
        allow_forking?: boolean;
        is_template?: boolean;
      } | null;
      sha: string;
      user: {
        avatar_url: string;
        events_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string | null;
        html_url: string;
        id: number;
        node_id: string;
        login: string;
        organizations_url: string;
        received_events_url: string;
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        subscriptions_url: string;
        type: string;
        url: string;
      };
    };
    base: {
      label: string;
      ref: string;
      repo: {
        archive_url: string;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        deployments_url: string;
        description: string | null;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        hooks_url: string;
        html_url: string;
        id: number;
        is_template?: boolean;
        node_id: string;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        languages_url: string;
        merges_url: string;
        milestones_url: string;
        name: string;
        notifications_url: string;
        owner: {
          avatar_url: string;
          events_url: string;
          followers_url: string;
          following_url: string;
          gists_url: string;
          gravatar_id: string | null;
          html_url: string;
          id: number;
          node_id: string;
          login: string;
          organizations_url: string;
          received_events_url: string;
          repos_url: string;
          site_admin: boolean;
          starred_url: string;
          subscriptions_url: string;
          type: string;
          url: string;
        };
        private: boolean;
        pulls_url: string;
        releases_url: string;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        tags_url: string;
        teams_url: string;
        trees_url: string;
        url: string;
        clone_url: string;
        default_branch: string;
        forks: number;
        forks_count: number;
        git_url: string;
        has_downloads: boolean;
        has_issues: boolean;
        has_projects: boolean;
        has_wiki: boolean;
        has_pages: boolean;
        homepage: string | null;
        language: string | null;
        master_branch?: string;
        archived: boolean;
        disabled: boolean;
        /** The repository visibility: public, private, or internal. */
        visibility?: string;
        mirror_url: string | null;
        open_issues: number;
        open_issues_count: number;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          push: boolean;
          triage?: boolean;
          pull: boolean;
        };
        temp_clone_token?: string;
        allow_merge_commit?: boolean;
        allow_squash_merge?: boolean;
        allow_rebase_merge?: boolean;
        license: Schemas.nullable$license$simple;
        pushed_at: string;
        size: number;
        ssh_url: string;
        stargazers_count: number;
        svn_url: string;
        topics?: string[];
        watchers: number;
        watchers_count: number;
        created_at: string;
        updated_at: string;
        allow_forking?: boolean;
      };
      sha: string;
      user: {
        avatar_url: string;
        events_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string | null;
        html_url: string;
        id: number;
        node_id: string;
        login: string;
        organizations_url: string;
        received_events_url: string;
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        subscriptions_url: string;
        type: string;
        url: string;
      };
    };
    _links: {
      comments: Schemas.link;
      commits: Schemas.link;
      statuses: Schemas.link;
      html: Schemas.link;
      issue: Schemas.link;
      review_comments: Schemas.link;
      review_comment: Schemas.link;
      self: Schemas.link;
    };
    author_association: Schemas.author_association;
    auto_merge: Schemas.auto_merge;
    /** Indicates whether or not the pull request is a draft. */
    draft?: boolean;
    merged: boolean;
    mergeable: boolean | null;
    rebaseable?: boolean | null;
    mergeable_state: string;
    merged_by: Schemas.nullable$simple$user;
    comments: number;
    review_comments: number;
    /** Indicates whether maintainers can modify the pull request. */
    maintainer_can_modify: boolean;
    commits: number;
    additions: number;
    deletions: number;
    changed_files: number;
  }
  /** Pull Request Merge Result */
  export interface pull$request$merge$result {
    sha: string;
    merged: boolean;
    message: string;
  }
  /** Pull Request Review Request */
  export interface pull$request$review$request {
    users: Schemas.simple$user[];
    teams: Schemas.team[];
  }
  /** Pull Request Reviews are reviews on pull requests. */
  export interface pull$request$review {
    /** Unique identifier of the review */
    id: number;
    node_id: string;
    user: Schemas.nullable$simple$user;
    /** The text of the review. */
    body: string;
    state: string;
    html_url: string;
    pull_request_url: string;
    _links: {
      html: {
        href: string;
      };
      pull_request: {
        href: string;
      };
    };
    submitted_at?: string;
    /** A commit SHA for the review. */
    commit_id: string;
    body_html?: string;
    body_text?: string;
    author_association: Schemas.author_association;
  }
  /** Legacy Review Comment */
  export interface review$comment {
    url: string;
    pull_request_review_id: number | null;
    id: number;
    node_id: string;
    diff_hunk: string;
    path: string;
    position: number | null;
    original_position: number;
    commit_id: string;
    original_commit_id: string;
    in_reply_to_id?: number;
    user: Schemas.nullable$simple$user;
    body: string;
    created_at: string;
    updated_at: string;
    html_url: string;
    pull_request_url: string;
    author_association: Schemas.author_association;
    _links: {
      self: Schemas.link;
      html: Schemas.link;
      pull_request: Schemas.link;
    };
    body_text?: string;
    body_html?: string;
    reactions?: Schemas.reaction$rollup;
    /** The side of the first line of the range for a multi-line comment. */
    side?: "LEFT" | "RIGHT";
    /** The side of the first line of the range for a multi-line comment. */
    start_side?: ("LEFT" | "RIGHT") | null;
    /** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
    line?: number;
    /** The original line of the blob to which the comment applies. The last line of the range for a multi-line comment */
    original_line?: number;
    /** The first line of the range for a multi-line comment. */
    start_line?: number | null;
    /** The original first line of the range for a multi-line comment. */
    original_start_line?: number | null;
  }
  /** Data related to a release. */
  export interface release$asset {
    url: string;
    browser_download_url: string;
    id: number;
    node_id: string;
    /** The file name of the asset. */
    name: string;
    label: string | null;
    /** State of the release asset. */
    state: "uploaded" | "open";
    content_type: string;
    size: number;
    download_count: number;
    created_at: string;
    updated_at: string;
    uploader: Schemas.nullable$simple$user;
  }
  /** A release. */
  export interface release {
    url: string;
    html_url: string;
    assets_url: string;
    upload_url: string;
    tarball_url: string | null;
    zipball_url: string | null;
    id: number;
    node_id: string;
    /** The name of the tag. */
    tag_name: string;
    /** Specifies the commitish value that determines where the Git tag is created from. */
    target_commitish: string;
    name: string | null;
    body?: string | null;
    /** true to create a draft (unpublished) release, false to create a published one. */
    draft: boolean;
    /** Whether to identify the release as a prerelease or a full release. */
    prerelease: boolean;
    created_at: string;
    published_at: string | null;
    author: Schemas.simple$user;
    assets: Schemas.release$asset[];
    body_html?: string;
    body_text?: string;
    mentions_count?: number;
    reactions?: Schemas.reaction$rollup;
  }
  /** Generated name and body describing a release */
  export interface release$notes$content {
    /** The generated name of the release */
    name: string;
    /** The generated body describing the contents of the release supporting markdown formatting */
    body: string;
  }
  export interface secret$scanning$alert {
    number?: Schemas.alert$number;
    created_at?: Schemas.alert$created$at;
    url?: Schemas.alert$url;
    html_url?: Schemas.alert$html$url;
    /** The REST API URL of the code locations for this alert. */
    locations_url?: string;
    state?: Schemas.secret$scanning$alert$state;
    resolution?: Schemas.secret$scanning$alert$resolution;
    /** The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    resolved_at?: string | null;
    resolved_by?: Schemas.nullable$simple$user;
    /** The type of secret that secret scanning detected. */
    secret_type?: string;
    /** The secret that was detected. */
    secret?: string;
  }
  /** Represents a 'commit' secret scanning location type. This location type shows that a secret was detected inside a commit to a repository. */
  export interface secret$scanning$location$commit {
    /** The file path in the repository */
    path: string;
    /** Line number at which the secret starts in the file */
    start_line: number;
    /** Line number at which the secret ends in the file */
    end_line: number;
    /** The column at which the secret starts within the start line when the file is interpreted as 8BIT ASCII */
    start_column: number;
    /** The column at which the secret ends within the end line when the file is interpreted as 8BIT ASCII */
    end_column: number;
    /** SHA-1 hash ID of the associated blob */
    blob_sha: string;
    /** The API URL to get the associated blob resource */
    blob_url: string;
    /** SHA-1 hash ID of the associated commit */
    commit_sha: string;
    /** The API URL to get the associated commit resource */
    commit_url: string;
  }
  export interface secret$scanning$location {
    /** The location type. Because secrets may be found in different types of resources (ie. code, comments, issues), this field identifies the type of resource where the secret was found. */
    type: "commit";
    details: Schemas.secret$scanning$location$commit;
  }
  /** Stargazer */
  export interface stargazer {
    starred_at: string;
    user: Schemas.nullable$simple$user;
  }
  /** Code Frequency Stat */
  export type code$frequency$stat = number[];
  /** Commit Activity */
  export interface commit$activity {
    days: number[];
    total: number;
    week: number;
  }
  /** Contributor Activity */
  export interface contributor$activity {
    author: Schemas.nullable$simple$user;
    total: number;
    weeks: {
      w?: number;
      a?: number;
      d?: number;
      c?: number;
    }[];
  }
  export interface participation$stats {
    all: number[];
    owner: number[];
  }
  /** Repository invitations let you manage who you collaborate with. */
  export interface repository$subscription {
    /** Determines if notifications should be received from this repository. */
    subscribed: boolean;
    /** Determines if all notifications should be blocked from this repository. */
    ignored: boolean;
    reason: string | null;
    created_at: string;
    url: string;
    repository_url: string;
  }
  /** Tag */
  export interface tag {
    name: string;
    commit: {
      sha: string;
      url: string;
    };
    zipball_url: string;
    tarball_url: string;
    node_id: string;
  }
  /** A topic aggregates entities that are related to a subject. */
  export interface topic {
    names: string[];
  }
  export type search$result$text$matches = {
    object_url?: string;
    object_type?: string | null;
    property?: string;
    fragment?: string;
    matches?: {
      text?: string;
      indices?: number[];
    }[];
  }[];
  /** Code Search Result Item */
  export interface code$search$result$item {
    name: string;
    path: string;
    sha: string;
    url: string;
    git_url: string;
    html_url: string;
    repository: Schemas.minimal$repository;
    score: number;
    file_size?: number;
    language?: string | null;
    last_modified_at?: string;
    line_numbers?: string[];
    text_matches?: Schemas.search$result$text$matches;
  }
  /** Commit Search Result Item */
  export interface commit$search$result$item {
    url: string;
    sha: string;
    html_url: string;
    comments_url: string;
    commit: {
      author: {
        name: string;
        email: string;
        date: string;
      };
      committer: Schemas.nullable$git$user;
      comment_count: number;
      message: string;
      tree: {
        sha: string;
        url: string;
      };
      url: string;
      verification?: Schemas.verification;
    };
    author: Schemas.nullable$simple$user;
    committer: Schemas.nullable$git$user;
    parents: {
      url?: string;
      html_url?: string;
      sha?: string;
    }[];
    repository: Schemas.minimal$repository;
    score: number;
    node_id: string;
    text_matches?: Schemas.search$result$text$matches;
  }
  /** Issue Search Result Item */
  export interface issue$search$result$item {
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    locked: boolean;
    active_lock_reason?: string | null;
    assignees?: Schemas.simple$user[] | null;
    user: Schemas.nullable$simple$user;
    labels: {
      id?: number;
      node_id?: string;
      url?: string;
      name?: string;
      color?: string;
      default?: boolean;
      description?: string | null;
    }[];
    state: string;
    assignee: Schemas.nullable$simple$user;
    milestone: Schemas.nullable$milestone;
    comments: number;
    created_at: string;
    updated_at: string;
    closed_at: string | null;
    text_matches?: Schemas.search$result$text$matches;
    pull_request?: {
      merged_at?: string | null;
      diff_url: string | null;
      html_url: string | null;
      patch_url: string | null;
      url: string | null;
    };
    body?: string;
    score: number;
    author_association: Schemas.author_association;
    draft?: boolean;
    repository?: Schemas.repository;
    body_html?: string;
    body_text?: string;
    timeline_url?: string;
    performed_via_github_app?: Schemas.nullable$integration;
    reactions?: Schemas.reaction$rollup;
  }
  /** Label Search Result Item */
  export interface label$search$result$item {
    id: number;
    node_id: string;
    url: string;
    name: string;
    color: string;
    default: boolean;
    description: string | null;
    score: number;
    text_matches?: Schemas.search$result$text$matches;
  }
  /** Repo Search Result Item */
  export interface repo$search$result$item {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: Schemas.nullable$simple$user;
    private: boolean;
    html_url: string;
    description: string | null;
    fork: boolean;
    url: string;
    created_at: string;
    updated_at: string;
    pushed_at: string;
    homepage: string | null;
    size: number;
    stargazers_count: number;
    watchers_count: number;
    language: string | null;
    forks_count: number;
    open_issues_count: number;
    master_branch?: string;
    default_branch: string;
    score: number;
    forks_url: string;
    keys_url: string;
    collaborators_url: string;
    teams_url: string;
    hooks_url: string;
    issue_events_url: string;
    events_url: string;
    assignees_url: string;
    branches_url: string;
    tags_url: string;
    blobs_url: string;
    git_tags_url: string;
    git_refs_url: string;
    trees_url: string;
    statuses_url: string;
    languages_url: string;
    stargazers_url: string;
    contributors_url: string;
    subscribers_url: string;
    subscription_url: string;
    commits_url: string;
    git_commits_url: string;
    comments_url: string;
    issue_comment_url: string;
    contents_url: string;
    compare_url: string;
    merges_url: string;
    archive_url: string;
    downloads_url: string;
    issues_url: string;
    pulls_url: string;
    milestones_url: string;
    notifications_url: string;
    labels_url: string;
    releases_url: string;
    deployments_url: string;
    git_url: string;
    ssh_url: string;
    clone_url: string;
    svn_url: string;
    forks: number;
    open_issues: number;
    watchers: number;
    topics?: string[];
    mirror_url: string | null;
    has_issues: boolean;
    has_projects: boolean;
    has_pages: boolean;
    has_wiki: boolean;
    has_downloads: boolean;
    archived: boolean;
    /** Returns whether or not this repository disabled. */
    disabled: boolean;
    /** The repository visibility: public, private, or internal. */
    visibility?: string;
    license: Schemas.nullable$license$simple;
    permissions?: {
      admin: boolean;
      maintain?: boolean;
      push: boolean;
      triage?: boolean;
      pull: boolean;
    };
    text_matches?: Schemas.search$result$text$matches;
    temp_clone_token?: string;
    allow_merge_commit?: boolean;
    allow_squash_merge?: boolean;
    allow_rebase_merge?: boolean;
    allow_auto_merge?: boolean;
    delete_branch_on_merge?: boolean;
    allow_forking?: boolean;
    is_template?: boolean;
  }
  /** Topic Search Result Item */
  export interface topic$search$result$item {
    name: string;
    display_name: string | null;
    short_description: string | null;
    description: string | null;
    created_by: string | null;
    released: string | null;
    created_at: string;
    updated_at: string;
    featured: boolean;
    curated: boolean;
    score: number;
    repository_count?: number | null;
    logo_url?: string | null;
    text_matches?: Schemas.search$result$text$matches;
    related?:
      | {
          topic_relation?: {
            id?: number;
            name?: string;
            topic_id?: number;
            relation_type?: string;
          };
        }[]
      | null;
    aliases?:
      | {
          topic_relation?: {
            id?: number;
            name?: string;
            topic_id?: number;
            relation_type?: string;
          };
        }[]
      | null;
  }
  /** User Search Result Item */
  export interface user$search$result$item {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string | null;
    url: string;
    html_url: string;
    followers_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    received_events_url: string;
    type: string;
    score: number;
    following_url: string;
    gists_url: string;
    starred_url: string;
    events_url: string;
    public_repos?: number;
    public_gists?: number;
    followers?: number;
    following?: number;
    created_at?: string;
    updated_at?: string;
    name?: string | null;
    bio?: string | null;
    email?: string | null;
    location?: string | null;
    site_admin: boolean;
    hireable?: boolean | null;
    text_matches?: Schemas.search$result$text$matches;
    blog?: string | null;
    company?: string | null;
    suspended_at?: string | null;
  }
  export interface configuration$status {
    status?: string;
    progress?: {
      status: string;
      key: string;
    }[];
  }
  export interface maintenance$status {
    status?: string;
    scheduled_time?: string;
    connection_services?: {
      name: string;
      number: number;
    }[];
  }
  export interface enterprise$settings {
    enterprise?: {
      private_mode?: boolean;
      public_pages?: boolean;
      subdomain_isolation?: boolean;
      signup_enabled?: boolean;
      github_hostname?: string;
      identicons_host?: string;
      http_proxy?: string | null;
      auth_mode?: string;
      expire_sessions?: boolean;
      admin_password?: string | null;
      configuration_id?: number;
      configuration_run_count?: number;
      avatar?: {
        enabled?: boolean;
        uri?: string;
      };
      customer?: {
        name?: string;
        email?: string;
        uuid?: string;
        secret_key_data?: string;
        public_key_data?: string;
      };
      license?: {
        seats?: number;
        evaluation?: boolean;
        perpetual?: boolean;
        unlimited_seating?: boolean;
        support_key?: string;
        ssh_allowed?: boolean;
        cluster_support?: boolean;
        expire_at?: string;
      };
      github_ssl?: {
        enabled?: boolean;
        cert?: string | null;
        key?: string | null;
      };
      ldap?: {
        host?: string | null;
        port?: number;
        base?: {}[];
        uid?: string | null;
        bind_dn?: string | null;
        password?: string | null;
        method?: string;
        search_strategy?: string;
        user_groups?: {}[];
        admin_group?: string | null;
        virtual_attribute_enabled?: boolean;
        recursive_group_search?: boolean;
        posix_support?: boolean;
        user_sync_emails?: boolean;
        user_sync_keys?: boolean;
        user_sync_interval?: number;
        team_sync_interval?: number;
        sync_enabled?: boolean;
        reconciliation?: {
          user?: string | null;
          org?: string | null;
        };
        profile?: {
          uid?: string;
          name?: string | null;
          mail?: string | null;
          key?: string | null;
        };
      };
      cas?: {
        url?: string | null;
      };
      saml?: {
        sso_url?: string | null;
        certificate?: string | null;
        certificate_path?: string | null;
        issuer?: string | null;
        idp_initiated_sso?: boolean;
        disable_admin_demote?: boolean;
      };
      github_oauth?: {
        client_id?: string;
        client_secret?: string;
        organization_name?: string;
        organization_team?: string;
      };
      smtp?: {
        enabled?: boolean;
        address?: string;
        authentication?: string;
        port?: string;
        domain?: string;
        username?: string;
        user_name?: string;
        enable_starttls_auto?: boolean;
        password?: string;
        "discard-to-noreply-address"?: boolean;
        support_address?: string;
        support_address_type?: string;
        noreply_address?: string;
      };
      ntp?: {
        primary_server?: string;
        secondary_server?: string;
      };
      timezone?: string | null;
      snmp?: {
        enabled?: boolean;
        community?: string;
      };
      syslog?: {
        enabled?: boolean;
        server?: string | null;
        protocol_name?: string;
      };
      assets?: string | null;
      pages?: {
        enabled?: boolean;
      };
      collectd?: {
        enabled?: boolean;
        server?: string | null;
        port?: number;
        encryption?: string | null;
        username?: string | null;
        password?: string | null;
      };
      mapping?: {
        enabled?: boolean;
        tileserver?: string | null;
        basemap?: string;
        token?: string | null;
      };
      load_balancer?: string | null;
    };
    run_list?: string[];
  }
  export interface ssh$key {
    key?: string;
    "pretty-print"?: string;
  }
  /** Private User */
  export interface private$user {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string | null;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
    name: string | null;
    company: string | null;
    blog: string | null;
    location: string | null;
    email: string | null;
    hireable: boolean | null;
    bio: string | null;
    twitter_username?: string | null;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    created_at: string;
    updated_at: string;
    private_gists: number;
    total_private_repos: number;
    owned_private_repos: number;
    disk_usage: number;
    collaborators: number;
    two_factor_authentication: boolean;
    plan?: {
      collaborators: number;
      name: string;
      space: number;
      private_repos: number;
    };
    suspended_at?: string | null;
    business_plus?: boolean;
    ldap_dn?: string;
  }
  /** Email */
  export interface email {
    email: string;
    primary: boolean;
    verified: boolean;
    visibility: string | null;
  }
  /** A unique encryption key */
  export interface gpg$key {
    id: number;
    primary_key_id: number | null;
    key_id: string;
    public_key: string;
    emails: {
      email?: string;
      verified?: boolean;
    }[];
    subkeys: {
      id?: number;
      primary_key_id?: number;
      key_id?: string;
      public_key?: string;
      emails?: {}[];
      subkeys?: {}[];
      can_sign?: boolean;
      can_encrypt_comms?: boolean;
      can_encrypt_storage?: boolean;
      can_certify?: boolean;
      created_at?: string;
      expires_at?: string | null;
      raw_key?: string | null;
    }[];
    can_sign: boolean;
    can_encrypt_comms: boolean;
    can_encrypt_storage: boolean;
    can_certify: boolean;
    created_at: string;
    expires_at: string | null;
    raw_key: string | null;
  }
  /** Key */
  export interface key {
    key: string;
    id: number;
    url: string;
    title: string;
    created_at: string;
    verified: boolean;
    read_only: boolean;
  }
  /** Starred Repository */
  export interface starred$repository {
    starred_at: string;
    repo: Schemas.repository;
  }
  /** Hovercard */
  export interface hovercard {
    contexts: {
      message: string;
      octicon: string;
    }[];
  }
  /** Key Simple */
  export interface key$simple {
    id: number;
    key: string;
  }
}
export namespace Headers {
  export type link = string;
  export type content$type = string;
  export type x$common$marker$version = string;
  export type x$rate$limit$limit = number;
  export type x$rate$limit$remaining = number;
  export type x$rate$limit$reset = number;
  export type location = string;
}
export namespace Responses {
  /** Resource not found */
  export namespace not_found {
    export interface Content {
      "application/json": Schemas.basic$error;
    }
  }
  /** Validation failed */
  export namespace validation_failed_simple {
    export interface Content {
      "application/json": Schemas.validation$error$simple;
    }
  }
  /** Bad Request */
  export namespace bad_request {
    export interface Content {
      "application/json": Schemas.basic$error;
      "application/scim+json": Schemas.scim$error;
    }
  }
  /** Validation failed */
  export namespace validation_failed {
    export interface Content {
      "application/json": Schemas.validation$error;
    }
  }
  /** Accepted */
  export namespace accepted {
    export interface Content {
      "application/json": {};
    }
  }
  /** Preview header missing */
  export namespace preview_header_missing {
    export interface Content {
      "application/json": {
        message: string;
        documentation_url: string;
      };
    }
  }
  /** Forbidden */
  export namespace forbidden {
    export interface Content {
      "application/json": Schemas.basic$error;
    }
  }
  /** Requires authentication */
  export namespace requires_authentication {
    export interface Content {
      "application/json": Schemas.basic$error;
    }
  }
  /** Not modified */
  export namespace not_modified {}
  /** Gone */
  export namespace gone {
    export interface Content {
      "application/json": Schemas.basic$error;
    }
  }
  /** Response */
  export namespace actions_runner_labels {
    export interface Content {
      "application/json": {
        total_count: number;
        labels: Schemas.runner$label[];
      };
    }
  }
  /** Response */
  export namespace actions_runner_labels_readonly {
    export interface Content {
      "application/json": {
        total_count: number;
        labels: Schemas.runner$label[];
      };
    }
  }
  /** Service unavailable */
  export namespace service_unavailable {
    export interface Content {
      "application/json": {
        code?: string;
        message?: string;
        documentation_url?: string;
      };
    }
  }
  /** Response if GitHub Advanced Security is not enabled for this repository */
  export namespace code_scanning_forbidden_read {
    export interface Content {
      "application/json": Schemas.basic$error;
    }
  }
  /** Forbidden Gist */
  export namespace forbidden_gist {
    export interface Content {
      "application/json": {
        block?: {
          reason?: string;
          created_at?: string;
          html_url?: string | null;
        };
        message?: string;
        documentation_url?: string;
      };
    }
  }
  /** Moved permanently */
  export namespace moved_permanently {
    export interface Content {
      "application/json": Schemas.basic$error;
    }
  }
  /** Conflict */
  export namespace conflict {
    export interface Content {
      "application/json": Schemas.basic$error;
    }
  }
  /** Temporary Redirect */
  export namespace temporary_redirect {
    export interface Content {
      "application/json": Schemas.basic$error;
    }
  }
  /** Internal Error */
  export namespace internal_error {
    export interface Content {
      "application/json": Schemas.basic$error;
    }
  }
  /** Response if the repository is archived or if github advanced security is not enabled for this repository */
  export namespace code_scanning_forbidden_write {
    export interface Content {
      "application/json": Schemas.basic$error;
    }
  }
  /** Found */
  export namespace found {}
  /** A header with no content is returned. */
  export namespace no_content {}
}
export namespace Parameters {
  /** Results per page (max 100) */
  export type per$page = number;
  /** Page number of the results to fetch. */
  export type page = number;
  export type hook$id = number;
  /** One of `asc` (ascending) or `desc` (descending). */
  export type direction = "asc" | "desc";
  export type key$ids = string;
  export type team$id = number;
  export type username = string;
  export type org = string;
  export type pre$receive$environment$id = number;
  /** pre_receive_hook_id parameter */
  export type pre$receive$hook$id = number;
  export type token$id = number;
  /** Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors. */
  export type cursor = string;
  export type delivery$id = number;
  /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
  export type since = string;
  /** installation_id parameter */
  export type installation$id = number;
  /** grant_id parameter */
  export type grant$id = number;
  /** The client ID of your GitHub app. */
  export type client$id = string;
  export type app$slug = string;
  /** authorization_id parameter */
  export type authorization$id = number;
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
  export type enterprise = string;
  /** Unique identifier of an organization. */
  export type org$id = number;
  /** Unique identifier of the self-hosted runner group. */
  export type runner$group$id = number;
  /** Unique identifier of the self-hosted runner. */
  export type runner$id = number;
  /** The name of a self-hosted runner's custom label. */
  export type runner$label$name = string;
  /** A search phrase. For more information, see [Searching the audit log](https://docs.github.com/enterprise-server@3.4/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization#searching-the-audit-log). */
  export type audit$log$phrase = string;
  /**
   * The event types to include:
   *
   * - `web` - returns web (non-Git) events.
   * - `git` - returns Git events.
   * - `all` - returns both web and Git events.
   *
   * The default is `web`.
   */
  export type audit$log$include = "web" | "git" | "all";
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor. */
  export type audit$log$after = string;
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor. */
  export type audit$log$before = string;
  /**
   * The order of audit log events. To list newest events first, specify `desc`. To list oldest events first, specify `asc`.
   *
   * The default is `desc`.
   */
  export type audit$log$order = "desc" | "asc";
  /** Set to `open` or `resolved` to only list secret scanning alerts in a specific state. */
  export type secret$scanning$alert$state = "open" | "resolved";
  /**
   * A comma-separated list of secret types to return. By default all secret types are returned.
   * See "[Secret scanning patterns](https://docs.github.com/enterprise-server@3.4/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)"
   * for a complete list of secret types (API slug).
   */
  export type secret$scanning$alert$secret$type = string;
  /** A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`. */
  export type secret$scanning$alert$resolution = string;
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor. */
  export type pagination$before = string;
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor. */
  export type pagination$after = string;
  /** gist_id parameter */
  export type gist$id = string;
  /** comment_id parameter */
  export type comment$id = number;
  /** A list of comma separated label names. Example: `bug,ui,@high` */
  export type labels = string;
  export type owner = string;
  export type repo = string;
  /** If `true`, show notifications marked as read. */
  export type all = boolean;
  /** If `true`, only shows notifications in which the user is directly participating or mentioned. */
  export type participating = boolean;
  /** Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
  export type before = string;
  /** thread_id parameter */
  export type thread$id = number;
  /** An organization ID. Only return organizations with an ID greater than this ID. */
  export type since$org = number;
  export type repository$id = number;
  /** secret_name parameter */
  export type secret$name = string;
  /** migration_id parameter */
  export type migration$id = number;
  /** team_slug parameter */
  export type team$slug = string;
  export type discussion$number = number;
  export type comment$number = number;
  export type reaction$id = number;
  export type project$id = number;
  /** card_id parameter */
  export type card$id = number;
  /** column_id parameter */
  export type column$id = number;
  /** artifact_id parameter */
  export type artifact$id = number;
  /** job_id parameter */
  export type job$id = number;
  /** Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run. */
  export type actor = string;
  /** Returns workflow runs associated with a branch. Use the name of the branch of the `push`. */
  export type workflow$run$branch = string;
  /** Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)." */
  export type event = string;
  /** Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. For a list of the possible `status` and `conclusion` options, see "[Create a check run](https://docs.github.com/enterprise-server@3.4/rest/reference/checks#create-a-check-run)." */
  export type workflow$run$status =
    | "completed"
    | "action_required"
    | "cancelled"
    | "failure"
    | "neutral"
    | "skipped"
    | "stale"
    | "success"
    | "timed_out"
    | "in_progress"
    | "queued"
    | "requested"
    | "waiting";
  /** Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/enterprise-server@3.4/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)." */
  export type created = string;
  /** If `true` pull requests are omitted from the response (empty array). */
  export type exclude$pull$requests = boolean;
  /** The id of the workflow run. */
  export type run$id = number;
  /** The ID of the workflow. You can also pass the workflow file name as a string. */
  export type workflow$id = number | string;
  /** autolink_id parameter */
  export type autolink$id = number;
  /** The name of the branch. */
  export type branch = string;
  /** check_run_id parameter */
  export type check$run$id = number;
  /** check_suite_id parameter */
  export type check$suite$id = number;
  /** Returns check runs with the specified `name`. */
  export type check$name = string;
  /** Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or `completed`. */
  export type status = "queued" | "in_progress" | "completed";
  /** The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. */
  export type tool$name = Schemas.code$scanning$analysis$tool$name;
  /** The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. */
  export type tool$guid = Schemas.code$scanning$analysis$tool$guid;
  /** The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */
  export type git$ref = Schemas.code$scanning$ref;
  /** The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. */
  export type alert$number = Schemas.alert$number;
  /** commit_sha parameter */
  export type commit$sha = string;
  /** deployment_id parameter */
  export type deployment$id = number;
  /** The name of the environment */
  export type environment$name = string;
  /** invitation_id parameter */
  export type invitation$id = number;
  /** One of `created` (when the repository was starred) or `updated` (when it was last pushed to). */
  export type sort = "created" | "updated";
  /** issue_number parameter */
  export type issue$number = number;
  /** key_id parameter */
  export type key$id = number;
  /** milestone_number parameter */
  export type milestone$number = number;
  export type pull$number = number;
  /** review_id parameter */
  export type review$id = number;
  /** asset_id parameter */
  export type asset$id = number;
  /** release_id parameter */
  export type release$id = number;
  /** A repository ID. Only return repositories with an ID greater than this ID. */
  export type since$repo = number;
  /** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */
  export type order = "desc" | "asc";
  /** gpg_key_id parameter */
  export type gpg$key$id = number;
  /** A user ID. Only return users with an ID greater than this ID. */
  export type since$user = number;
}
export interface Response$meta$root$Status$200 {
  "application/json": {
    current_user_url: string;
    current_user_authorizations_html_url: string;
    authorizations_url: string;
    code_search_url: string;
    commit_search_url: string;
    emails_url: string;
    emojis_url: string;
    events_url: string;
    feeds_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    hub_url: string;
    issue_search_url: string;
    issues_url: string;
    keys_url: string;
    label_search_url: string;
    notifications_url: string;
    organization_url: string;
    organization_repositories_url: string;
    organization_teams_url: string;
    public_gists_url: string;
    rate_limit_url: string;
    repository_url: string;
    repository_search_url: string;
    current_user_repositories_url: string;
    starred_url: string;
    starred_gists_url: string;
    topic_search_url?: string;
    user_url: string;
    user_organizations_url: string;
    user_repositories_url: string;
    user_search_url: string;
  };
}
export interface Parameter$enterprise$admin$list$global$webhooks {
  /** This API is under preview and subject to change. */
  accept: string;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$enterprise$admin$list$global$webhooks$Status$200 {
  "application/json": Schemas.global$hook[];
}
export interface RequestBody$enterprise$admin$create$global$webhook {
  "application/json": {
    /** Must be passed as "web". */
    name: string;
    /** Key/value pairs to provide settings for this webhook. */
    config: {
      /** The URL to which the payloads will be delivered. */
      url: string;
      /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
      content_type?: string;
      /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://docs.github.com/enterprise-server@3.4/webhooks/event-payloads/#delivery-headers) header. */
      secret?: string;
      /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
      insecure_ssl?: string;
    };
    /** The [events](https://docs.github.com/enterprise-server@3.4/webhooks/event-payloads) that trigger this webhook. A global webhook can be triggered by `user` and `organization` events. Default: `user` and `organization`. */
    events?: string[];
    /** Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications. */
    active?: boolean;
  };
}
export interface Response$enterprise$admin$create$global$webhook$Status$201 {
  "application/json": Schemas.global$hook;
}
export interface Parameter$enterprise$admin$get$global$webhook {
  hook_id: Parameters.hook$id;
}
export interface Response$enterprise$admin$get$global$webhook$Status$200 {
  "application/json": Schemas.global$hook;
}
export interface Parameter$enterprise$admin$delete$global$webhook {
  /** This API is under preview and subject to change. */
  accept: string;
  hook_id: Parameters.hook$id;
}
export interface Parameter$enterprise$admin$update$global$webhook {
  hook_id: Parameters.hook$id;
}
export interface RequestBody$enterprise$admin$update$global$webhook {
  "application/json": {
    /** Key/value pairs to provide settings for this webhook. */
    config?: {
      /** The URL to which the payloads will be delivered. */
      url: string;
      /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
      content_type?: string;
      /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://docs.github.com/enterprise-server@3.4/webhooks/event-payloads/#delivery-headers) header. */
      secret?: string;
      /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
      insecure_ssl?: string;
    };
    /** The [events](https://docs.github.com/enterprise-server@3.4/webhooks/event-payloads) that trigger this webhook. A global webhook can be triggered by `user` and `organization` events. Default: `user` and `organization`. */
    events?: string[];
    /** Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications. */
    active?: boolean;
  };
}
export interface Response$enterprise$admin$update$global$webhook$Status$200 {
  "application/json": Schemas.global$hook$2;
}
export interface Parameter$enterprise$admin$ping$global$webhook {
  /** This API is under preview and subject to change. */
  accept: string;
  hook_id: Parameters.hook$id;
}
export interface Parameter$enterprise$admin$list$public$keys {
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
  /** One of `asc` (ascending) or `desc` (descending). */
  direction?: Parameters.direction;
  sort?: "created" | "updated" | "accessed";
  /** Only show public keys accessed after the given time. */
  since?: string;
}
export interface Response$enterprise$admin$list$public$keys$Status$200 {
  "application/json": Schemas.public$key$full[];
}
export interface Parameter$enterprise$admin$delete$public$key {
  key_ids: Parameters.key$ids;
}
export interface Parameter$enterprise$admin$update$ldap$mapping$for$team {
  team_id: Parameters.team$id;
}
export interface RequestBody$enterprise$admin$update$ldap$mapping$for$team {
  "application/json": {
    /** The [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team. */
    ldap_dn: string;
  };
}
export interface Response$enterprise$admin$update$ldap$mapping$for$team$Status$200 {
  "application/json": Schemas.ldap$mapping$team;
}
export interface Parameter$enterprise$admin$sync$ldap$mapping$for$team {
  team_id: Parameters.team$id;
}
export interface Response$enterprise$admin$sync$ldap$mapping$for$team$Status$201 {
  "application/json": {
    status?: string;
  };
}
export interface Parameter$enterprise$admin$update$ldap$mapping$for$user {
  username: Parameters.username;
}
export interface RequestBody$enterprise$admin$update$ldap$mapping$for$user {
  "application/json": {
    /** The [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team. */
    ldap_dn: string;
  };
}
export interface Response$enterprise$admin$update$ldap$mapping$for$user$Status$200 {
  "application/json": Schemas.ldap$mapping$user;
}
export interface Parameter$enterprise$admin$sync$ldap$mapping$for$user {
  username: Parameters.username;
}
export interface Response$enterprise$admin$sync$ldap$mapping$for$user$Status$201 {
  "application/json": {
    status?: string;
  };
}
export interface RequestBody$enterprise$admin$create$org {
  "application/json": {
    /** The organization's username. */
    login: string;
    /** The login of the user who will manage this organization. */
    admin: string;
    /** The organization's display name. */
    profile_name?: string;
  };
}
export interface Response$enterprise$admin$create$org$Status$201 {
  "application/json": Schemas.organization$simple;
}
export interface Parameter$enterprise$admin$update$org$name {
  org: Parameters.org;
}
export interface RequestBody$enterprise$admin$update$org$name {
  "application/json": {
    /** The organization's new name. */
    login: string;
  };
}
export interface Response$enterprise$admin$update$org$name$Status$202 {
  "application/json": {
    message?: string;
    url?: string;
  };
}
export interface Parameter$enterprise$admin$list$pre$receive$environments {
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
  /** One of `asc` (ascending) or `desc` (descending). */
  direction?: Parameters.direction;
  sort?: "created" | "updated" | "name";
}
export interface Response$enterprise$admin$list$pre$receive$environments$Status$200 {
  "application/json": Schemas.pre$receive$environment[];
}
export interface RequestBody$enterprise$admin$create$pre$receive$environment {
  "application/json": {
    /** The new pre-receive environment's name. */
    name: string;
    /** URL from which to download a tarball of this environment. */
    image_url: string;
  };
}
export interface Response$enterprise$admin$create$pre$receive$environment$Status$201 {
  "application/json": Schemas.pre$receive$environment;
}
export interface Parameter$enterprise$admin$get$pre$receive$environment {
  pre_receive_environment_id: Parameters.pre$receive$environment$id;
}
export interface Response$enterprise$admin$get$pre$receive$environment$Status$200 {
  "application/json": Schemas.pre$receive$environment;
}
export interface Parameter$enterprise$admin$delete$pre$receive$environment {
  pre_receive_environment_id: Parameters.pre$receive$environment$id;
}
export interface Response$enterprise$admin$delete$pre$receive$environment$Status$422 {
  "application/json": {
    message?: string;
    errors?: {
      resource?: string;
      code?: string;
      message?: string;
    }[];
  };
}
export interface Parameter$enterprise$admin$update$pre$receive$environment {
  pre_receive_environment_id: Parameters.pre$receive$environment$id;
}
export interface RequestBody$enterprise$admin$update$pre$receive$environment {
  "application/json": {
    /** This pre-receive environment's new name. */
    name?: string;
    /** URL from which to download a tarball of this environment. */
    image_url?: string;
  };
}
export interface Response$enterprise$admin$update$pre$receive$environment$Status$200 {
  "application/json": Schemas.pre$receive$environment;
}
export interface Response$enterprise$admin$update$pre$receive$environment$Status$422 {
  "application/json": {
    message?: string;
    errors?: {
      resource?: string;
      code?: string;
      message?: string;
    }[];
  };
}
export interface Parameter$enterprise$admin$start$pre$receive$environment$download {
  pre_receive_environment_id: Parameters.pre$receive$environment$id;
}
export interface Response$enterprise$admin$start$pre$receive$environment$download$Status$202 {
  "application/json": Schemas.pre$receive$environment$download$status;
}
export interface Response$enterprise$admin$start$pre$receive$environment$download$Status$422 {
  "application/json": {
    message?: string;
    errors?: {
      resource?: string;
      code?: string;
      message?: string;
    }[];
  };
}
export interface Parameter$enterprise$admin$get$download$status$for$pre$receive$environment {
  pre_receive_environment_id: Parameters.pre$receive$environment$id;
}
export interface Response$enterprise$admin$get$download$status$for$pre$receive$environment$Status$200 {
  "application/json": Schemas.pre$receive$environment$download$status;
}
export interface Parameter$enterprise$admin$list$pre$receive$hooks {
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
  /** One of `asc` (ascending) or `desc` (descending). */
  direction?: Parameters.direction;
  /** One of `created` (when the repository was starred) or `updated` (when it was last pushed to) or `name`. */
  sort?: "created" | "updated" | "name";
}
export interface Response$enterprise$admin$list$pre$receive$hooks$Status$200 {
  "application/json": Schemas.pre$receive$hook[];
}
export interface RequestBody$enterprise$admin$create$pre$receive$hook {
  "application/json": {
    /** The name of the hook. */
    name: string;
    /** The script that the hook runs. */
    script: string;
    /** The GitHub repository where the script is kept. */
    script_repository: {};
    /** The pre-receive environment where the script is executed. */
    environment: {};
    /** The state of enforcement for this hook. default: `disabled` */
    enforcement?: string;
    /** Whether enforcement can be overridden at the org or repo level. default: `false` */
    allow_downstream_configuration?: boolean;
  };
}
export interface Response$enterprise$admin$create$pre$receive$hook$Status$201 {
  "application/json": Schemas.pre$receive$hook;
}
export interface Parameter$enterprise$admin$get$pre$receive$hook {
  /** pre_receive_hook_id parameter */
  pre_receive_hook_id: Parameters.pre$receive$hook$id;
}
export interface Response$enterprise$admin$get$pre$receive$hook$Status$200 {
  "application/json": Schemas.pre$receive$hook;
}
export interface Parameter$enterprise$admin$delete$pre$receive$hook {
  /** pre_receive_hook_id parameter */
  pre_receive_hook_id: Parameters.pre$receive$hook$id;
}
export interface Parameter$enterprise$admin$update$pre$receive$hook {
  /** pre_receive_hook_id parameter */
  pre_receive_hook_id: Parameters.pre$receive$hook$id;
}
export interface RequestBody$enterprise$admin$update$pre$receive$hook {
  "application/json": {
    /** The name of the hook. */
    name?: string;
    /** The script that the hook runs. */
    script?: string;
    /** The GitHub repository where the script is kept. */
    script_repository?: {};
    /** The pre-receive environment where the script is executed. */
    environment?: {};
    /** The state of enforcement for this hook. */
    enforcement?: string;
    /** Whether enforcement can be overridden at the org or repo level. */
    allow_downstream_configuration?: boolean;
  };
}
export interface Response$enterprise$admin$update$pre$receive$hook$Status$200 {
  "application/json": Schemas.pre$receive$hook;
}
export interface Parameter$enterprise$admin$list$personal$access$tokens {
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$enterprise$admin$list$personal$access$tokens$Status$200 {
  "application/json": Schemas.authorization[];
}
export interface Parameter$enterprise$admin$delete$personal$access$token {
  token_id: Parameters.token$id;
}
export interface RequestBody$enterprise$admin$create$user {
  "application/json": {
    /** The user's username. */
    login: string;
    /** **Required for built-in authentication.** The user's email address. This parameter can be omitted when using CAS, LDAP, or SAML. For details on built-in and centrally-managed authentication, see the the [GitHub authentication guide](https://docs.github.com/enterprise/2.18/admin/guides/user-management/authenticating-users-for-your-github-enterprise-server-instance/). */
    email?: string;
  };
}
export interface Response$enterprise$admin$create$user$Status$201 {
  "application/json": Schemas.simple$user;
}
export interface Parameter$enterprise$admin$delete$user {
  username: Parameters.username;
}
export interface Parameter$enterprise$admin$update$username$for$user {
  username: Parameters.username;
}
export interface RequestBody$enterprise$admin$update$username$for$user {
  "application/json": {
    /** The user's new username. */
    login: string;
  };
}
export interface Response$enterprise$admin$update$username$for$user$Status$202 {
  "application/json": {
    message?: string;
    url?: string;
  };
}
export interface Parameter$enterprise$admin$create$impersonation$o$auth$token {
  username: Parameters.username;
}
export interface RequestBody$enterprise$admin$create$impersonation$o$auth$token {
  "application/json": {
    /** A list of [scopes](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
    scopes?: string[];
  };
}
export interface Response$enterprise$admin$create$impersonation$o$auth$token$Status$201 {
  "application/json": Schemas.authorization;
}
export interface Parameter$enterprise$admin$delete$impersonation$o$auth$token {
  username: Parameters.username;
}
export interface Response$apps$get$authenticated$Status$200 {
  "application/json": Schemas.integration;
}
export interface Parameter$apps$create$from$manifest {
  code: string;
}
export interface RequestBody$apps$create$from$manifest {
  "application/json": {};
}
export interface Response$apps$create$from$manifest$Status$201 {
  "application/json": Schemas.integration & {};
}
export type Response$apps$create$from$manifest$Status$404 = Responses.not_found.Content;
export type Response$apps$create$from$manifest$Status$422 = Responses.validation_failed_simple.Content;
export interface Response$apps$get$webhook$config$for$app$Status$200 {
  "application/json": Schemas.webhook$config;
}
export interface RequestBody$apps$update$webhook$config$for$app {
  "application/json": {
    url?: Schemas.webhook$config$url;
    content_type?: Schemas.webhook$config$content$type;
    secret?: Schemas.webhook$config$secret;
    insecure_ssl?: Schemas.webhook$config$insecure$ssl;
  };
}
export interface Response$apps$update$webhook$config$for$app$Status$200 {
  "application/json": Schemas.webhook$config;
}
export interface Parameter$apps$list$webhook$deliveries {
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors. */
  cursor?: Parameters.cursor;
}
export interface Response$apps$list$webhook$deliveries$Status$200 {
  "application/json": Schemas.hook$delivery$item[];
}
export type Response$apps$list$webhook$deliveries$Status$400 = Responses.bad_request.Content;
export type Response$apps$list$webhook$deliveries$Status$422 = Responses.validation_failed.Content;
export interface Parameter$apps$get$webhook$delivery {
  delivery_id: Parameters.delivery$id;
}
export interface Response$apps$get$webhook$delivery$Status$200 {
  "application/json": Schemas.hook$delivery;
}
export type Response$apps$get$webhook$delivery$Status$400 = Responses.bad_request.Content;
export type Response$apps$get$webhook$delivery$Status$422 = Responses.validation_failed.Content;
export interface Parameter$apps$redeliver$webhook$delivery {
  delivery_id: Parameters.delivery$id;
}
export type Response$apps$redeliver$webhook$delivery$Status$202 = Responses.accepted.Content;
export type Response$apps$redeliver$webhook$delivery$Status$400 = Responses.bad_request.Content;
export type Response$apps$redeliver$webhook$delivery$Status$422 = Responses.validation_failed.Content;
export interface Parameter$apps$list$installations {
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
  /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
  since?: Parameters.since;
  outdated?: string;
}
export interface Response$apps$list$installations$Status$200 {
  "application/json": Schemas.installation[];
}
export interface Parameter$apps$get$installation {
  /** installation_id parameter */
  installation_id: Parameters.installation$id;
}
export interface Response$apps$get$installation$Status$200 {
  "application/json": Schemas.installation;
}
export type Response$apps$get$installation$Status$404 = Responses.not_found.Content;
export type Response$apps$get$installation$Status$415 = Responses.preview_header_missing.Content;
export interface Parameter$apps$delete$installation {
  /** installation_id parameter */
  installation_id: Parameters.installation$id;
}
export type Response$apps$delete$installation$Status$404 = Responses.not_found.Content;
export interface Parameter$apps$create$installation$access$token {
  /** installation_id parameter */
  installation_id: Parameters.installation$id;
}
export interface RequestBody$apps$create$installation$access$token {
  "application/json": {
    /** List of repository names that the token should have access to */
    repositories?: string[];
    /** List of repository IDs that the token should have access to */
    repository_ids?: number[];
    permissions?: Schemas.app$permissions;
  };
}
export interface Response$apps$create$installation$access$token$Status$201 {
  "application/json": Schemas.installation$token;
}
export type Response$apps$create$installation$access$token$Status$401 = Responses.requires_authentication.Content;
export type Response$apps$create$installation$access$token$Status$403 = Responses.forbidden.Content;
export type Response$apps$create$installation$access$token$Status$404 = Responses.not_found.Content;
export type Response$apps$create$installation$access$token$Status$415 = Responses.preview_header_missing.Content;
export type Response$apps$create$installation$access$token$Status$422 = Responses.validation_failed.Content;
export interface Parameter$apps$suspend$installation {
  /** installation_id parameter */
  installation_id: Parameters.installation$id;
}
export type Response$apps$suspend$installation$Status$404 = Responses.not_found.Content;
export interface Parameter$apps$unsuspend$installation {
  /** installation_id parameter */
  installation_id: Parameters.installation$id;
}
export type Response$apps$unsuspend$installation$Status$404 = Responses.not_found.Content;
export interface Parameter$oauth$authorizations$list$grants {
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
  /** The client ID of your GitHub app. */
  client_id?: string;
}
export interface Response$oauth$authorizations$list$grants$Status$200 {
  "application/json": Schemas.application$grant[];
}
export type Response$oauth$authorizations$list$grants$Status$401 = Responses.requires_authentication.Content;
export type Response$oauth$authorizations$list$grants$Status$403 = Responses.forbidden.Content;
export type Response$oauth$authorizations$list$grants$Status$404 = Responses.not_found.Content;
export interface Parameter$oauth$authorizations$get$grant {
  /** grant_id parameter */
  grant_id: Parameters.grant$id;
}
export interface Response$oauth$authorizations$get$grant$Status$200 {
  "application/json": Schemas.application$grant;
}
export type Response$oauth$authorizations$get$grant$Status$401 = Responses.requires_authentication.Content;
export type Response$oauth$authorizations$get$grant$Status$403 = Responses.forbidden.Content;
export interface Parameter$oauth$authorizations$delete$grant {
  /** grant_id parameter */
  grant_id: Parameters.grant$id;
}
export type Response$oauth$authorizations$delete$grant$Status$401 = Responses.requires_authentication.Content;
export type Response$oauth$authorizations$delete$grant$Status$403 = Responses.forbidden.Content;
export interface Parameter$apps$delete$authorization {
  /** The client ID of your GitHub app. */
  client_id: Parameters.client$id;
}
export interface RequestBody$apps$delete$authorization {
  "application/json": {
    /** The OAuth access token used to authenticate to the GitHub API. */
    access_token: string;
  };
}
export type Response$apps$delete$authorization$Status$422 = Responses.validation_failed.Content;
export interface Parameter$apps$check$token {
  /** The client ID of your GitHub app. */
  client_id: Parameters.client$id;
}
export interface RequestBody$apps$check$token {
  "application/json": {
    /** The access_token of the OAuth application. */
    access_token: string;
  };
}
export interface Response$apps$check$token$Status$200 {
  "application/json": Schemas.authorization;
}
export type Response$apps$check$token$Status$404 = Responses.not_found.Content;
export type Response$apps$check$token$Status$422 = Responses.validation_failed.Content;
export interface Parameter$apps$delete$token {
  /** The client ID of your GitHub app. */
  client_id: Parameters.client$id;
}
export interface RequestBody$apps$delete$token {
  "application/json": {
    /** The OAuth access token used to authenticate to the GitHub API. */
    access_token: string;
  };
}
export type Response$apps$delete$token$Status$422 = Responses.validation_failed.Content;
export interface Parameter$apps$reset$token {
  /** The client ID of your GitHub app. */
  client_id: Parameters.client$id;
}
export interface RequestBody$apps$reset$token {
  "application/json": {
    /** The access_token of the OAuth application. */
    access_token: string;
  };
}
export interface Response$apps$reset$token$Status$200 {
  "application/json": Schemas.authorization;
}
export type Response$apps$reset$token$Status$422 = Responses.validation_failed.Content;
export interface Parameter$apps$scope$token {
  /** The client ID of your GitHub app. */
  client_id: Parameters.client$id;
}
export interface RequestBody$apps$scope$token {
  "application/json": {
    /** The OAuth access token used to authenticate to the GitHub API. */
    access_token: string;
    /** The name of the user or organization to scope the user-to-server access token to. **Required** unless `target_id` is specified. */
    target?: string;
    /** The ID of the user or organization to scope the user-to-server access token to. **Required** unless `target` is specified. */
    target_id?: number;
    /** The list of repository names to scope the user-to-server access token to. `repositories` may not be specified if `repository_ids` is specified. */
    repositories?: string[];
    /** The list of repository IDs to scope the user-to-server access token to. `repository_ids` may not be specified if `repositories` is specified. */
    repository_ids?: number[];
    permissions?: Schemas.app$permissions;
  };
}
export interface Response$apps$scope$token$Status$200 {
  "application/json": Schemas.authorization;
}
export type Response$apps$scope$token$Status$401 = Responses.requires_authentication.Content;
export type Response$apps$scope$token$Status$403 = Responses.forbidden.Content;
export type Response$apps$scope$token$Status$404 = Responses.not_found.Content;
export type Response$apps$scope$token$Status$422 = Responses.validation_failed.Content;
export interface Parameter$apps$get$by$slug {
  app_slug: Parameters.app$slug;
}
export interface Response$apps$get$by$slug$Status$200 {
  "application/json": Schemas.integration;
}
export type Response$apps$get$by$slug$Status$403 = Responses.forbidden.Content;
export type Response$apps$get$by$slug$Status$404 = Responses.not_found.Content;
export type Response$apps$get$by$slug$Status$415 = Responses.preview_header_missing.Content;
export interface Parameter$oauth$authorizations$list$authorizations {
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
  /** The client ID of your GitHub app. */
  client_id?: string;
}
export interface Response$oauth$authorizations$list$authorizations$Status$200 {
  "application/json": Schemas.authorization[];
}
export type Response$oauth$authorizations$list$authorizations$Status$401 = Responses.requires_authentication.Content;
export type Response$oauth$authorizations$list$authorizations$Status$403 = Responses.forbidden.Content;
export type Response$oauth$authorizations$list$authorizations$Status$404 = Responses.not_found.Content;
export interface RequestBody$oauth$authorizations$create$authorization {
  "application/json": {
    /** A list of scopes that this authorization is in. */
    scopes?: string[] | null;
    /** A note to remind you what the OAuth token is for. */
    note?: string;
    /** A URL to remind you what app the OAuth token is for. */
    note_url?: string;
    /** The OAuth app client key for which to create the token. */
    client_id?: string;
    /** The OAuth app client secret for which to create the token. */
    client_secret?: string;
    /** A unique string to distinguish an authorization from others created for the same client ID and user. */
    fingerprint?: string;
  };
}
export interface Response$oauth$authorizations$create$authorization$Status$201 {
  "application/json": Schemas.authorization;
}
export type Response$oauth$authorizations$create$authorization$Status$401 = Responses.requires_authentication.Content;
export type Response$oauth$authorizations$create$authorization$Status$403 = Responses.forbidden.Content;
export type Response$oauth$authorizations$create$authorization$Status$410 = Responses.gone.Content;
export type Response$oauth$authorizations$create$authorization$Status$422 = Responses.validation_failed.Content;
export interface Parameter$oauth$authorizations$get$or$create$authorization$for$app {
  /** The client ID of your GitHub app. */
  client_id: Parameters.client$id;
}
export interface RequestBody$oauth$authorizations$get$or$create$authorization$for$app {
  "application/json": {
    /** The OAuth app client secret for which to create the token. */
    client_secret: string;
    /** A list of scopes that this authorization is in. */
    scopes?: string[] | null;
    /** A note to remind you what the OAuth token is for. */
    note?: string;
    /** A URL to remind you what app the OAuth token is for. */
    note_url?: string;
    /** A unique string to distinguish an authorization from others created for the same client ID and user. */
    fingerprint?: string;
  };
}
export interface Response$oauth$authorizations$get$or$create$authorization$for$app$Status$200 {
  "application/json": Schemas.authorization;
}
export interface Response$oauth$authorizations$get$or$create$authorization$for$app$Status$201 {
  "application/json": Schemas.authorization;
}
export type Response$oauth$authorizations$get$or$create$authorization$for$app$Status$401 = Responses.requires_authentication.Content;
export type Response$oauth$authorizations$get$or$create$authorization$for$app$Status$403 = Responses.forbidden.Content;
export type Response$oauth$authorizations$get$or$create$authorization$for$app$Status$422 = Responses.validation_failed.Content;
export interface Parameter$oauth$authorizations$get$or$create$authorization$for$app$and$fingerprint {
  /** The client ID of your GitHub app. */
  client_id: Parameters.client$id;
  fingerprint: string;
}
export interface RequestBody$oauth$authorizations$get$or$create$authorization$for$app$and$fingerprint {
  "application/json": {
    /** The OAuth app client secret for which to create the token. */
    client_secret: string;
    /** A list of scopes that this authorization is in. */
    scopes?: string[] | null;
    /** A note to remind you what the OAuth token is for. */
    note?: string;
    /** A URL to remind you what app the OAuth token is for. */
    note_url?: string;
  };
}
export interface Response$oauth$authorizations$get$or$create$authorization$for$app$and$fingerprint$Status$200 {
  "application/json": Schemas.authorization;
}
export interface Response$oauth$authorizations$get$or$create$authorization$for$app$and$fingerprint$Status$201 {
  "application/json": Schemas.authorization;
}
export type Response$oauth$authorizations$get$or$create$authorization$for$app$and$fingerprint$Status$422 = Responses.validation_failed.Content;
export interface Parameter$oauth$authorizations$get$authorization {
  /** authorization_id parameter */
  authorization_id: Parameters.authorization$id;
}
export interface Response$oauth$authorizations$get$authorization$Status$200 {
  "application/json": Schemas.authorization;
}
export type Response$oauth$authorizations$get$authorization$Status$401 = Responses.requires_authentication.Content;
export type Response$oauth$authorizations$get$authorization$Status$403 = Responses.forbidden.Content;
export interface Parameter$oauth$authorizations$delete$authorization {
  /** authorization_id parameter */
  authorization_id: Parameters.authorization$id;
}
export type Response$oauth$authorizations$delete$authorization$Status$401 = Responses.requires_authentication.Content;
export type Response$oauth$authorizations$delete$authorization$Status$403 = Responses.forbidden.Content;
export interface Parameter$oauth$authorizations$update$authorization {
  /** authorization_id parameter */
  authorization_id: Parameters.authorization$id;
}
export interface RequestBody$oauth$authorizations$update$authorization {
  "application/json": {
    /** A list of scopes that this authorization is in. */
    scopes?: string[] | null;
    /** A list of scopes to add to this authorization. */
    add_scopes?: string[];
    /** A list of scopes to remove from this authorization. */
    remove_scopes?: string[];
    /** A note to remind you what the OAuth token is for. */
    note?: string;
    /** A URL to remind you what app the OAuth token is for. */
    note_url?: string;
    /** A unique string to distinguish an authorization from others created for the same client ID and user. */
    fingerprint?: string;
  };
}
export interface Response$oauth$authorizations$update$authorization$Status$200 {
  "application/json": Schemas.authorization;
}
export type Response$oauth$authorizations$update$authorization$Status$422 = Responses.validation_failed.Content;
export interface Response$codes$of$conduct$get$all$codes$of$conduct$Status$200 {
  "application/json": Schemas.code$of$conduct[];
}
export interface Parameter$codes$of$conduct$get$conduct$code {
  key: string;
}
export interface Response$codes$of$conduct$get$conduct$code$Status$200 {
  "application/json": Schemas.code$of$conduct;
}
export type Response$codes$of$conduct$get$conduct$code$Status$404 = Responses.not_found.Content;
export interface Response$emojis$get$Status$200 {
  "application/json": {
    [key: string]: string;
  };
}
export interface Response$enterprise$admin$get$announcement$Status$200 {
  "application/json": Schemas.announcement;
}
export interface RequestBody$enterprise$admin$set$announcement {
  "application/json": Schemas.announcement;
}
export interface Response$enterprise$admin$set$announcement$Status$200 {
  "application/json": Schemas.announcement;
}
export interface Response$enterprise$admin$get$license$information$Status$200 {
  "application/json": Schemas.license$info;
}
export interface Response$enterprise$admin$get$all$stats$Status$200 {
  "application/json": Schemas.enterprise$overview;
}
export interface Response$enterprise$admin$get$comment$stats$Status$200 {
  "application/json": Schemas.enterprise$comment$overview;
}
export interface Response$enterprise$admin$get$gist$stats$Status$200 {
  "application/json": Schemas.enterprise$gist$overview;
}
export interface Response$enterprise$admin$get$hooks$stats$Status$200 {
  "application/json": Schemas.enterprise$hook$overview;
}
export interface Response$enterprise$admin$get$issue$stats$Status$200 {
  "application/json": Schemas.enterprise$issue$overview;
}
export interface Response$enterprise$admin$get$milestone$stats$Status$200 {
  "application/json": Schemas.enterprise$milestone$overview;
}
export interface Response$enterprise$admin$get$org$stats$Status$200 {
  "application/json": Schemas.enterprise$organization$overview;
}
export interface Response$enterprise$admin$get$pages$stats$Status$200 {
  "application/json": Schemas.enterprise$page$overview;
}
export interface Response$enterprise$admin$get$pull$request$stats$Status$200 {
  "application/json": Schemas.enterprise$pull$request$overview;
}
export interface Response$enterprise$admin$get$repo$stats$Status$200 {
  "application/json": Schemas.enterprise$repository$overview;
}
export interface Response$enterprise$admin$get$user$stats$Status$200 {
  "application/json": Schemas.enterprise$user$overview;
}
export interface Parameter$enterprise$admin$get$github$actions$permissions$enterprise {
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
  enterprise: Parameters.enterprise;
}
export interface Response$enterprise$admin$get$github$actions$permissions$enterprise$Status$200 {
  "application/json": Schemas.actions$enterprise$permissions;
}
export interface Parameter$enterprise$admin$set$github$actions$permissions$enterprise {
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
  enterprise: Parameters.enterprise;
}
export interface RequestBody$enterprise$admin$set$github$actions$permissions$enterprise {
  "application/json": {
    enabled_organizations: Schemas.enabled$organizations;
    allowed_actions?: Schemas.allowed$actions;
  };
}
export interface Parameter$enterprise$admin$list$selected$organizations$enabled$github$actions$enterprise {
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
  enterprise: Parameters.enterprise;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$enterprise$admin$list$selected$organizations$enabled$github$actions$enterprise$Status$200 {
  "application/json": {
    total_count: number;
    organizations: Schemas.organization$simple[];
  };
}
export interface Parameter$enterprise$admin$set$selected$organizations$enabled$github$actions$enterprise {
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
  enterprise: Parameters.enterprise;
}
export interface RequestBody$enterprise$admin$set$selected$organizations$enabled$github$actions$enterprise {
  "application/json": {
    /** List of organization IDs to enable for GitHub Actions. */
    selected_organization_ids: number[];
  };
}
export interface Parameter$enterprise$admin$enable$selected$organization$github$actions$enterprise {
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
  enterprise: Parameters.enterprise;
  /** Unique identifier of an organization. */
  org_id: Parameters.org$id;
}
export interface Parameter$enterprise$admin$disable$selected$organization$github$actions$enterprise {
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
  enterprise: Parameters.enterprise;
  /** Unique identifier of an organization. */
  org_id: Parameters.org$id;
}
export interface Parameter$enterprise$admin$get$allowed$actions$enterprise {
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
  enterprise: Parameters.enterprise;
}
export interface Response$enterprise$admin$get$allowed$actions$enterprise$Status$200 {
  "application/json": Schemas.selected$actions;
}
export interface Parameter$enterprise$admin$set$allowed$actions$enterprise {
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
  enterprise: Parameters.enterprise;
}
export interface RequestBody$enterprise$admin$set$allowed$actions$enterprise {
  "application/json": Schemas.selected$actions;
}
export interface Parameter$enterprise$admin$list$self$hosted$runner$groups$for$enterprise {
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
  enterprise: Parameters.enterprise;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$enterprise$admin$list$self$hosted$runner$groups$for$enterprise$Status$200 {
  "application/json": {
    total_count: number;
    runner_groups: Schemas.runner$groups$enterprise[];
  };
}
export interface Parameter$enterprise$admin$create$self$hosted$runner$group$for$enterprise {
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
  enterprise: Parameters.enterprise;
}
export interface RequestBody$enterprise$admin$create$self$hosted$runner$group$for$enterprise {
  "application/json": {
    /** Name of the runner group. */
    name: string;
    /** Visibility of a runner group. You can select all organizations or select individual organization. Can be one of: `all` or `selected` */
    visibility?: "selected" | "all";
    /** List of organization IDs that can access the runner group. */
    selected_organization_ids?: number[];
    /** List of runner IDs to add to the runner group. */
    runners?: number[];
    /** Whether the runner group can be used by `public` repositories. */
    allows_public_repositories?: boolean;
  };
}
export interface Response$enterprise$admin$create$self$hosted$runner$group$for$enterprise$Status$201 {
  "application/json": Schemas.runner$groups$enterprise;
}
export interface Parameter$enterprise$admin$get$self$hosted$runner$group$for$enterprise {
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
  enterprise: Parameters.enterprise;
  /** Unique identifier of the self-hosted runner group. */
  runner_group_id: Parameters.runner$group$id;
}
export interface Response$enterprise$admin$get$self$hosted$runner$group$for$enterprise$Status$200 {
  "application/json": Schemas.runner$groups$enterprise;
}
export interface Parameter$enterprise$admin$delete$self$hosted$runner$group$from$enterprise {
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
  enterprise: Parameters.enterprise;
  /** Unique identifier of the self-hosted runner group. */
  runner_group_id: Parameters.runner$group$id;
}
export interface Parameter$enterprise$admin$update$self$hosted$runner$group$for$enterprise {
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
  enterprise: Parameters.enterprise;
  /** Unique identifier of the self-hosted runner group. */
  runner_group_id: Parameters.runner$group$id;
}
export interface RequestBody$enterprise$admin$update$self$hosted$runner$group$for$enterprise {
  "application/json": {
    /** Name of the runner group. */
    name?: string;
    /** Visibility of a runner group. You can select all organizations or select individual organizations. Can be one of: `all` or `selected` */
    visibility?: "selected" | "all";
    /** Whether the runner group can be used by `public` repositories. */
    allows_public_repositories?: boolean;
  };
}
export interface Response$enterprise$admin$update$self$hosted$runner$group$for$enterprise$Status$200 {
  "application/json": Schemas.runner$groups$enterprise;
}
export interface Parameter$enterprise$admin$list$org$access$to$self$hosted$runner$group$in$enterprise {
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
  enterprise: Parameters.enterprise;
  /** Unique identifier of the self-hosted runner group. */
  runner_group_id: Parameters.runner$group$id;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$enterprise$admin$list$org$access$to$self$hosted$runner$group$in$enterprise$Status$200 {
  "application/json": {
    total_count: number;
    organizations: Schemas.organization$simple[];
  };
}
export interface Parameter$enterprise$admin$set$org$access$to$self$hosted$runner$group$in$enterprise {
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
  enterprise: Parameters.enterprise;
  /** Unique identifier of the self-hosted runner group. */
  runner_group_id: Parameters.runner$group$id;
}
export interface RequestBody$enterprise$admin$set$org$access$to$self$hosted$runner$group$in$enterprise {
  "application/json": {
    /** List of organization IDs that can access the runner group. */
    selected_organization_ids: number[];
  };
}
export interface Parameter$enterprise$admin$add$org$access$to$self$hosted$runner$group$in$enterprise {
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
  enterprise: Parameters.enterprise;
  /** Unique identifier of the self-hosted runner group. */
  runner_group_id: Parameters.runner$group$id;
  /** Unique identifier of an organization. */
  org_id: Parameters.org$id;
}
export interface Parameter$enterprise$admin$remove$org$access$to$self$hosted$runner$group$in$enterprise {
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
  enterprise: Parameters.enterprise;
  /** Unique identifier of the self-hosted runner group. */
  runner_group_id: Parameters.runner$group$id;
  /** Unique identifier of an organization. */
  org_id: Parameters.org$id;
}
export interface Parameter$enterprise$admin$list$self$hosted$runners$in$group$for$enterprise {
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
  enterprise: Parameters.enterprise;
  /** Unique identifier of the self-hosted runner group. */
  runner_group_id: Parameters.runner$group$id;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$enterprise$admin$list$self$hosted$runners$in$group$for$enterprise$Status$200 {
  "application/json": {
    total_count: number;
    runners: Schemas.runner[];
  };
}
export interface Parameter$enterprise$admin$set$self$hosted$runners$in$group$for$enterprise {
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
  enterprise: Parameters.enterprise;
  /** Unique identifier of the self-hosted runner group. */
  runner_group_id: Parameters.runner$group$id;
}
export interface RequestBody$enterprise$admin$set$self$hosted$runners$in$group$for$enterprise {
  "application/json": {
    /** List of runner IDs to add to the runner group. */
    runners: number[];
  };
}
export interface Parameter$enterprise$admin$add$self$hosted$runner$to$group$for$enterprise {
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
  enterprise: Parameters.enterprise;
  /** Unique identifier of the self-hosted runner group. */
  runner_group_id: Parameters.runner$group$id;
  /** Unique identifier of the self-hosted runner. */
  runner_id: Parameters.runner$id;
}
export interface Parameter$enterprise$admin$remove$self$hosted$runner$from$group$for$enterprise {
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
  enterprise: Parameters.enterprise;
  /** Unique identifier of the self-hosted runner group. */
  runner_group_id: Parameters.runner$group$id;
  /** Unique identifier of the self-hosted runner. */
  runner_id: Parameters.runner$id;
}
export interface Parameter$enterprise$admin$list$self$hosted$runners$for$enterprise {
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
  enterprise: Parameters.enterprise;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$enterprise$admin$list$self$hosted$runners$for$enterprise$Status$200 {
  "application/json": {
    total_count?: number;
    runners?: Schemas.runner[];
  };
}
export interface Parameter$enterprise$admin$list$runner$applications$for$enterprise {
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
  enterprise: Parameters.enterprise;
}
export interface Response$enterprise$admin$list$runner$applications$for$enterprise$Status$200 {
  "application/json": Schemas.runner$application[];
}
export interface Parameter$enterprise$admin$create$registration$token$for$enterprise {
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
  enterprise: Parameters.enterprise;
}
export interface Response$enterprise$admin$create$registration$token$for$enterprise$Status$201 {
  "application/json": Schemas.authentication$token;
}
export interface Parameter$enterprise$admin$create$remove$token$for$enterprise {
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
  enterprise: Parameters.enterprise;
}
export interface Response$enterprise$admin$create$remove$token$for$enterprise$Status$201 {
  "application/json": Schemas.authentication$token;
}
export interface Parameter$enterprise$admin$get$self$hosted$runner$for$enterprise {
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
  enterprise: Parameters.enterprise;
  /** Unique identifier of the self-hosted runner. */
  runner_id: Parameters.runner$id;
}
export interface Response$enterprise$admin$get$self$hosted$runner$for$enterprise$Status$200 {
  "application/json": Schemas.runner;
}
export interface Parameter$enterprise$admin$delete$self$hosted$runner$from$enterprise {
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
  enterprise: Parameters.enterprise;
  /** Unique identifier of the self-hosted runner. */
  runner_id: Parameters.runner$id;
}
export interface Parameter$enterprise$admin$list$labels$for$self$hosted$runner$for$enterprise {
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
  enterprise: Parameters.enterprise;
  /** Unique identifier of the self-hosted runner. */
  runner_id: Parameters.runner$id;
}
export type Response$enterprise$admin$list$labels$for$self$hosted$runner$for$enterprise$Status$200 = Responses.actions_runner_labels.Content;
export type Response$enterprise$admin$list$labels$for$self$hosted$runner$for$enterprise$Status$404 = Responses.not_found.Content;
export interface Parameter$enterprise$admin$set$custom$labels$for$self$hosted$runner$for$enterprise {
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
  enterprise: Parameters.enterprise;
  /** Unique identifier of the self-hosted runner. */
  runner_id: Parameters.runner$id;
}
export interface RequestBody$enterprise$admin$set$custom$labels$for$self$hosted$runner$for$enterprise {
  "application/json": {
    /** The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels. */
    labels: string[];
  };
}
export type Response$enterprise$admin$set$custom$labels$for$self$hosted$runner$for$enterprise$Status$200 =
  Responses.actions_runner_labels.Content;
export type Response$enterprise$admin$set$custom$labels$for$self$hosted$runner$for$enterprise$Status$404 = Responses.not_found.Content;
export type Response$enterprise$admin$set$custom$labels$for$self$hosted$runner$for$enterprise$Status$422 =
  Responses.validation_failed_simple.Content;
export interface Parameter$enterprise$admin$add$custom$labels$to$self$hosted$runner$for$enterprise {
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
  enterprise: Parameters.enterprise;
  /** Unique identifier of the self-hosted runner. */
  runner_id: Parameters.runner$id;
}
export interface RequestBody$enterprise$admin$add$custom$labels$to$self$hosted$runner$for$enterprise {
  "application/json": {
    /** The names of the custom labels to add to the runner. */
    labels: string[];
  };
}
export type Response$enterprise$admin$add$custom$labels$to$self$hosted$runner$for$enterprise$Status$200 =
  Responses.actions_runner_labels.Content;
export type Response$enterprise$admin$add$custom$labels$to$self$hosted$runner$for$enterprise$Status$404 = Responses.not_found.Content;
export type Response$enterprise$admin$add$custom$labels$to$self$hosted$runner$for$enterprise$Status$422 =
  Responses.validation_failed_simple.Content;
export interface Parameter$enterprise$admin$remove$all$custom$labels$from$self$hosted$runner$for$enterprise {
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
  enterprise: Parameters.enterprise;
  /** Unique identifier of the self-hosted runner. */
  runner_id: Parameters.runner$id;
}
export type Response$enterprise$admin$remove$all$custom$labels$from$self$hosted$runner$for$enterprise$Status$200 =
  Responses.actions_runner_labels_readonly.Content;
export type Response$enterprise$admin$remove$all$custom$labels$from$self$hosted$runner$for$enterprise$Status$404 = Responses.not_found.Content;
export type Response$enterprise$admin$remove$all$custom$labels$from$self$hosted$runner$for$enterprise$Status$422 =
  Responses.validation_failed_simple.Content;
export interface Parameter$enterprise$admin$remove$custom$label$from$self$hosted$runner$for$enterprise {
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
  enterprise: Parameters.enterprise;
  /** Unique identifier of the self-hosted runner. */
  runner_id: Parameters.runner$id;
  /** The name of a self-hosted runner's custom label. */
  name: Parameters.runner$label$name;
}
export type Response$enterprise$admin$remove$custom$label$from$self$hosted$runner$for$enterprise$Status$200 =
  Responses.actions_runner_labels.Content;
export type Response$enterprise$admin$remove$custom$label$from$self$hosted$runner$for$enterprise$Status$404 = Responses.not_found.Content;
export type Response$enterprise$admin$remove$custom$label$from$self$hosted$runner$for$enterprise$Status$422 =
  Responses.validation_failed_simple.Content;
export interface Parameter$enterprise$admin$get$audit$log {
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
  enterprise: Parameters.enterprise;
  /** A search phrase. For more information, see [Searching the audit log](https://docs.github.com/enterprise-server@3.4/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization#searching-the-audit-log). */
  phrase?: Parameters.audit$log$phrase;
  /**
   * The event types to include:
   *
   * - `web` - returns web (non-Git) events.
   * - `git` - returns Git events.
   * - `all` - returns both web and Git events.
   *
   * The default is `web`.
   */
  include?: Parameters.audit$log$include;
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor. */
  after?: Parameters.audit$log$after;
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor. */
  before?: Parameters.audit$log$before;
  /**
   * The order of audit log events. To list newest events first, specify `desc`. To list oldest events first, specify `asc`.
   *
   * The default is `desc`.
   */
  order?: Parameters.audit$log$order;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
}
export interface Response$enterprise$admin$get$audit$log$Status$200 {
  "application/json": Schemas.audit$log$event[];
}
export interface Parameter$secret$scanning$list$alerts$for$enterprise {
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
  enterprise: Parameters.enterprise;
  /** Set to `open` or `resolved` to only list secret scanning alerts in a specific state. */
  state?: Parameters.secret$scanning$alert$state;
  /**
   * A comma-separated list of secret types to return. By default all secret types are returned.
   * See "[Secret scanning patterns](https://docs.github.com/enterprise-server@3.4/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)"
   * for a complete list of secret types (API slug).
   */
  secret_type?: Parameters.secret$scanning$alert$secret$type;
  /** A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`. */
  resolution?: Parameters.secret$scanning$alert$resolution;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor. */
  before?: Parameters.pagination$before;
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor. */
  after?: Parameters.pagination$after;
}
export interface Response$secret$scanning$list$alerts$for$enterprise$Status$200 {
  "application/json": Schemas.organization$secret$scanning$alert[];
}
export type Response$secret$scanning$list$alerts$for$enterprise$Status$404 = Responses.not_found.Content;
export type Response$secret$scanning$list$alerts$for$enterprise$Status$503 = Responses.service_unavailable.Content;
export interface Parameter$billing$get$github$advanced$security$billing$ghe {
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
  enterprise: Parameters.enterprise;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$billing$get$github$advanced$security$billing$ghe$Status$200 {
  "application/json": Schemas.advanced$security$active$committers;
}
export type Response$billing$get$github$advanced$security$billing$ghe$Status$403 = Responses.code_scanning_forbidden_read.Content;
export interface Parameter$activity$list$public$events {
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$activity$list$public$events$Status$200 {
  "application/json": Schemas.event[];
}
export type Response$activity$list$public$events$Status$403 = Responses.forbidden.Content;
export type Response$activity$list$public$events$Status$503 = Responses.service_unavailable.Content;
export interface Response$activity$get$feeds$Status$200 {
  "application/json": Schemas.feed;
}
export interface Parameter$gists$list {
  /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
  since?: Parameters.since;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$gists$list$Status$200 {
  "application/json": Schemas.base$gist[];
}
export type Response$gists$list$Status$403 = Responses.forbidden.Content;
export interface RequestBody$gists$create {
  "application/json": {
    /** Description of the gist */
    description?: string;
    /** Names and content for the files that make up the gist */
    files: {
      [key: string]: {
        /** Content of the file */
        content: string;
      };
    };
    public?: boolean | ("true" | "false");
  };
}
export interface Response$gists$create$Status$201 {
  "application/json": Schemas.gist$simple;
}
export type Response$gists$create$Status$403 = Responses.forbidden.Content;
export type Response$gists$create$Status$404 = Responses.not_found.Content;
export type Response$gists$create$Status$422 = Responses.validation_failed.Content;
export interface Parameter$gists$list$public {
  /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
  since?: Parameters.since;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$gists$list$public$Status$200 {
  "application/json": Schemas.base$gist[];
}
export type Response$gists$list$public$Status$403 = Responses.forbidden.Content;
export type Response$gists$list$public$Status$422 = Responses.validation_failed.Content;
export interface Parameter$gists$list$starred {
  /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
  since?: Parameters.since;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$gists$list$starred$Status$200 {
  "application/json": Schemas.base$gist[];
}
export type Response$gists$list$starred$Status$401 = Responses.requires_authentication.Content;
export type Response$gists$list$starred$Status$403 = Responses.forbidden.Content;
export interface Parameter$gists$get {
  /** gist_id parameter */
  gist_id: Parameters.gist$id;
}
export interface Response$gists$get$Status$200 {
  "application/json": Schemas.gist$simple;
}
export type Response$gists$get$Status$403 = Responses.forbidden_gist.Content;
export type Response$gists$get$Status$404 = Responses.not_found.Content;
export interface Parameter$gists$delete {
  /** gist_id parameter */
  gist_id: Parameters.gist$id;
}
export type Response$gists$delete$Status$403 = Responses.forbidden.Content;
export type Response$gists$delete$Status$404 = Responses.not_found.Content;
export interface Parameter$gists$update {
  /** gist_id parameter */
  gist_id: Parameters.gist$id;
}
export interface RequestBody$gists$update {
  "application/json":
    | (
        | {
            description: any;
          }
        | {
            files: any;
          }
      )
    | null;
}
export interface Response$gists$update$Status$200 {
  "application/json": Schemas.gist$simple;
}
export type Response$gists$update$Status$404 = Responses.not_found.Content;
export type Response$gists$update$Status$422 = Responses.validation_failed.Content;
export interface Parameter$gists$list$comments {
  /** gist_id parameter */
  gist_id: Parameters.gist$id;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$gists$list$comments$Status$200 {
  "application/json": Schemas.gist$comment[];
}
export type Response$gists$list$comments$Status$403 = Responses.forbidden.Content;
export type Response$gists$list$comments$Status$404 = Responses.not_found.Content;
export interface Parameter$gists$create$comment {
  /** gist_id parameter */
  gist_id: Parameters.gist$id;
}
export interface RequestBody$gists$create$comment {
  "application/json": {
    /** The comment text. */
    body: string;
  };
}
export interface Response$gists$create$comment$Status$201 {
  "application/json": Schemas.gist$comment;
}
export type Response$gists$create$comment$Status$403 = Responses.forbidden.Content;
export type Response$gists$create$comment$Status$404 = Responses.not_found.Content;
export interface Parameter$gists$get$comment {
  /** gist_id parameter */
  gist_id: Parameters.gist$id;
  /** comment_id parameter */
  comment_id: Parameters.comment$id;
}
export interface Response$gists$get$comment$Status$200 {
  "application/json": Schemas.gist$comment;
}
export type Response$gists$get$comment$Status$403 = Responses.forbidden_gist.Content;
export type Response$gists$get$comment$Status$404 = Responses.not_found.Content;
export interface Parameter$gists$delete$comment {
  /** gist_id parameter */
  gist_id: Parameters.gist$id;
  /** comment_id parameter */
  comment_id: Parameters.comment$id;
}
export type Response$gists$delete$comment$Status$403 = Responses.forbidden.Content;
export type Response$gists$delete$comment$Status$404 = Responses.not_found.Content;
export interface Parameter$gists$update$comment {
  /** gist_id parameter */
  gist_id: Parameters.gist$id;
  /** comment_id parameter */
  comment_id: Parameters.comment$id;
}
export interface RequestBody$gists$update$comment {
  "application/json": {
    /** The comment text. */
    body: string;
  };
}
export interface Response$gists$update$comment$Status$200 {
  "application/json": Schemas.gist$comment;
}
export type Response$gists$update$comment$Status$404 = Responses.not_found.Content;
export interface Parameter$gists$list$commits {
  /** gist_id parameter */
  gist_id: Parameters.gist$id;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$gists$list$commits$Status$200 {
  "application/json": Schemas.gist$commit[];
}
export type Response$gists$list$commits$Status$403 = Responses.forbidden.Content;
export type Response$gists$list$commits$Status$404 = Responses.not_found.Content;
export interface Parameter$gists$list$forks {
  /** gist_id parameter */
  gist_id: Parameters.gist$id;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$gists$list$forks$Status$200 {
  "application/json": Schemas.gist$simple[];
}
export type Response$gists$list$forks$Status$403 = Responses.forbidden.Content;
export type Response$gists$list$forks$Status$404 = Responses.not_found.Content;
export interface Parameter$gists$fork {
  /** gist_id parameter */
  gist_id: Parameters.gist$id;
}
export interface Response$gists$fork$Status$201 {
  "application/json": Schemas.base$gist;
}
export type Response$gists$fork$Status$403 = Responses.forbidden.Content;
export type Response$gists$fork$Status$404 = Responses.not_found.Content;
export type Response$gists$fork$Status$422 = Responses.validation_failed.Content;
export interface Parameter$gists$check$is$starred {
  /** gist_id parameter */
  gist_id: Parameters.gist$id;
}
export type Response$gists$check$is$starred$Status$403 = Responses.forbidden.Content;
export interface Response$gists$check$is$starred$Status$404 {
  "application/json": {};
}
export interface Parameter$gists$star {
  /** gist_id parameter */
  gist_id: Parameters.gist$id;
}
export type Response$gists$star$Status$403 = Responses.forbidden.Content;
export type Response$gists$star$Status$404 = Responses.not_found.Content;
export interface Parameter$gists$unstar {
  /** gist_id parameter */
  gist_id: Parameters.gist$id;
}
export type Response$gists$unstar$Status$403 = Responses.forbidden.Content;
export type Response$gists$unstar$Status$404 = Responses.not_found.Content;
export interface Parameter$gists$get$revision {
  /** gist_id parameter */
  gist_id: Parameters.gist$id;
  sha: string;
}
export interface Response$gists$get$revision$Status$200 {
  "application/json": Schemas.gist$simple;
}
export type Response$gists$get$revision$Status$403 = Responses.forbidden.Content;
export type Response$gists$get$revision$Status$404 = Responses.not_found.Content;
export type Response$gists$get$revision$Status$422 = Responses.validation_failed.Content;
export interface Response$gitignore$get$all$templates$Status$200 {
  "application/json": string[];
}
export interface Parameter$gitignore$get$template {
  name: string;
}
export interface Response$gitignore$get$template$Status$200 {
  "application/json": Schemas.gitignore$template;
}
export interface Parameter$apps$list$repos$accessible$to$installation {
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$apps$list$repos$accessible$to$installation$Status$200 {
  "application/json": {
    total_count: number;
    repositories: Schemas.repository[];
    repository_selection?: string;
  };
}
export type Response$apps$list$repos$accessible$to$installation$Status$401 = Responses.requires_authentication.Content;
export type Response$apps$list$repos$accessible$to$installation$Status$403 = Responses.forbidden.Content;
export interface Parameter$issues$list {
  /**
   * Indicates which sorts of issues to return. Can be one of:
   * \* `assigned`: Issues assigned to you
   * \* `created`: Issues created by you
   * \* `mentioned`: Issues mentioning you
   * \* `subscribed`: Issues you're subscribed to updates for
   * \* `all` or `repos`: All issues the authenticated user can see, regardless of participation or creation
   */
  filter?: "assigned" | "created" | "mentioned" | "subscribed" | "repos" | "all";
  /** Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`. */
  state?: "open" | "closed" | "all";
  /** A list of comma separated label names. Example: `bug,ui,@high` */
  labels?: Parameters.labels;
  /** What to sort results by. Can be either `created`, `updated`, `comments`. */
  sort?: "created" | "updated" | "comments";
  /** One of `asc` (ascending) or `desc` (descending). */
  direction?: Parameters.direction;
  /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
  since?: Parameters.since;
  collab?: boolean;
  orgs?: boolean;
  owned?: boolean;
  pulls?: boolean;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$issues$list$Status$200 {
  "application/json": Schemas.issue[];
}
export type Response$issues$list$Status$404 = Responses.not_found.Content;
export type Response$issues$list$Status$422 = Responses.validation_failed.Content;
export interface Parameter$licenses$get$all$commonly$used {
  featured?: boolean;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$licenses$get$all$commonly$used$Status$200 {
  "application/json": Schemas.license$simple[];
}
export interface Parameter$licenses$get {
  license: string;
}
export interface Response$licenses$get$Status$200 {
  "application/json": Schemas.license;
}
export type Response$licenses$get$Status$403 = Responses.forbidden.Content;
export type Response$licenses$get$Status$404 = Responses.not_found.Content;
export interface RequestBody$markdown$render {
  "application/json": {
    /** The Markdown text to render in HTML. */
    text: string;
    /** The rendering mode. Can be either `markdown` or `gfm`. */
    mode?: "markdown" | "gfm";
    /** The repository context to use when creating references in `gfm` mode.  For example, setting `context` to `octo-org/octo-repo` will change the text `#42` into an HTML link to issue 42 in the `octo-org/octo-repo` repository. */
    context?: string;
  };
}
export interface Response$markdown$render$Status$200 {
  "text/html": string;
}
export interface RequestBody$markdown$render$raw {
  "text/plain": string;
  "text/x-markdown": string;
}
export interface Response$markdown$render$raw$Status$200 {
  "text/html": string;
}
export interface Response$meta$get$Status$200 {
  "application/json": Schemas.api$overview;
}
export interface Parameter$activity$list$public$events$for$repo$network {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$activity$list$public$events$for$repo$network$Status$200 {
  "application/json": Schemas.event[];
}
export type Response$activity$list$public$events$for$repo$network$Status$301 = Responses.moved_permanently.Content;
export type Response$activity$list$public$events$for$repo$network$Status$403 = Responses.forbidden.Content;
export type Response$activity$list$public$events$for$repo$network$Status$404 = Responses.not_found.Content;
export interface Parameter$activity$list$notifications$for$authenticated$user {
  /** If `true`, show notifications marked as read. */
  all?: Parameters.all;
  /** If `true`, only shows notifications in which the user is directly participating or mentioned. */
  participating?: Parameters.participating;
  /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
  since?: Parameters.since;
  /** Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
  before?: Parameters.before;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$activity$list$notifications$for$authenticated$user$Status$200 {
  "application/json": Schemas.thread[];
}
export type Response$activity$list$notifications$for$authenticated$user$Status$401 = Responses.requires_authentication.Content;
export type Response$activity$list$notifications$for$authenticated$user$Status$403 = Responses.forbidden.Content;
export type Response$activity$list$notifications$for$authenticated$user$Status$422 = Responses.validation_failed.Content;
export interface RequestBody$activity$mark$notifications$as$read {
  "application/json": {
    /** Describes the last point that notifications were checked. */
    last_read_at?: string;
    /** Whether the notification has been read. */
    read?: boolean;
  };
}
export interface Response$activity$mark$notifications$as$read$Status$202 {
  "application/json": {
    message?: string;
  };
}
export type Response$activity$mark$notifications$as$read$Status$401 = Responses.requires_authentication.Content;
export type Response$activity$mark$notifications$as$read$Status$403 = Responses.forbidden.Content;
export interface Parameter$activity$get$thread {
  /** thread_id parameter */
  thread_id: Parameters.thread$id;
}
export interface Response$activity$get$thread$Status$200 {
  "application/json": Schemas.thread;
}
export type Response$activity$get$thread$Status$401 = Responses.requires_authentication.Content;
export type Response$activity$get$thread$Status$403 = Responses.forbidden.Content;
export interface Parameter$activity$mark$thread$as$read {
  /** thread_id parameter */
  thread_id: Parameters.thread$id;
}
export type Response$activity$mark$thread$as$read$Status$403 = Responses.forbidden.Content;
export interface Parameter$activity$get$thread$subscription$for$authenticated$user {
  /** thread_id parameter */
  thread_id: Parameters.thread$id;
}
export interface Response$activity$get$thread$subscription$for$authenticated$user$Status$200 {
  "application/json": Schemas.thread$subscription;
}
export type Response$activity$get$thread$subscription$for$authenticated$user$Status$401 = Responses.requires_authentication.Content;
export type Response$activity$get$thread$subscription$for$authenticated$user$Status$403 = Responses.forbidden.Content;
export interface Parameter$activity$set$thread$subscription {
  /** thread_id parameter */
  thread_id: Parameters.thread$id;
}
export interface RequestBody$activity$set$thread$subscription {
  "application/json": {
    /** Whether to block all notifications from a thread. */
    ignored?: boolean;
  };
}
export interface Response$activity$set$thread$subscription$Status$200 {
  "application/json": Schemas.thread$subscription;
}
export type Response$activity$set$thread$subscription$Status$401 = Responses.requires_authentication.Content;
export type Response$activity$set$thread$subscription$Status$403 = Responses.forbidden.Content;
export interface Parameter$activity$delete$thread$subscription {
  /** thread_id parameter */
  thread_id: Parameters.thread$id;
}
export type Response$activity$delete$thread$subscription$Status$401 = Responses.requires_authentication.Content;
export type Response$activity$delete$thread$subscription$Status$403 = Responses.forbidden.Content;
export interface Parameter$meta$get$octocat {
  /** The words to show in Octocat's speech bubble */
  s?: string;
}
export interface Response$meta$get$octocat$Status$200 {
  "application/octocat-stream": string;
}
export interface Parameter$orgs$list {
  /** An organization ID. Only return organizations with an ID greater than this ID. */
  since?: Parameters.since$org;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
}
export interface Response$orgs$list$Status$200 {
  "application/json": Schemas.organization$simple[];
}
export interface Parameter$orgs$list$custom$roles {
  organization_id: string;
}
export interface Response$orgs$list$custom$roles$Status$200 {
  "application/json": {
    /** The number of custom roles in this organization */
    total_count?: number;
    custom_roles?: Schemas.organization$custom$repository$role[];
  };
}
export interface Parameter$orgs$get {
  org: Parameters.org;
}
export interface Response$orgs$get$Status$200 {
  "application/json": Schemas.organization$full;
}
export type Response$orgs$get$Status$404 = Responses.not_found.Content;
export interface Parameter$orgs$update {
  org: Parameters.org;
}
export interface RequestBody$orgs$update {
  "application/json": {
    /** Billing email address. This address is not publicized. */
    billing_email?: string;
    /** The company name. */
    company?: string;
    /** The publicly visible email address. */
    email?: string;
    /** The Twitter username of the company. */
    twitter_username?: string;
    /** The location. */
    location?: string;
    /** The shorthand name of the company. */
    name?: string;
    /** The description of the company. */
    description?: string;
    /** Toggles whether an organization can use organization projects. */
    has_organization_projects?: boolean;
    /** Toggles whether repositories that belong to the organization can use repository projects. */
    has_repository_projects?: boolean;
    /**
     * Default permission level members have for organization repositories:
     * \* `read` - can pull, but not push to or administer this repository.
     * \* `write` - can pull and push, but not administer this repository.
     * \* `admin` - can pull, push, and administer this repository.
     * \* `none` - no permissions granted by default.
     */
    default_repository_permission?: "read" | "write" | "admin" | "none";
    /**
     * Toggles the ability of non-admin organization members to create repositories. Can be one of:
     * \* `true` - all organization members can create repositories.
     * \* `false` - only organization owners can create repositories.
     * Default: `true`
     * **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.
     */
    members_can_create_repositories?: boolean;
    /**
     * Toggles whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. Can be one of:
     * \* `true` - all organization members can create internal repositories.
     * \* `false` - only organization owners can create internal repositories.
     * Default: `true`. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
     */
    members_can_create_internal_repositories?: boolean;
    /**
     * Toggles whether organization members can create private repositories, which are visible to organization members with permission. Can be one of:
     * \* `true` - all organization members can create private repositories.
     * \* `false` - only organization owners can create private repositories.
     * Default: `true`. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
     */
    members_can_create_private_repositories?: boolean;
    /**
     * Toggles whether organization members can create public repositories, which are visible to anyone. Can be one of:
     * \* `true` - all organization members can create public repositories.
     * \* `false` - only organization owners can create public repositories.
     * Default: `true`. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
     */
    members_can_create_public_repositories?: boolean;
    /**
     * Specifies which types of repositories non-admin organization members can create. Can be one of:
     * \* `all` - all organization members can create public and private repositories.
     * \* `private` - members can create private repositories. This option is only available to repositories that are part of an organization on GitHub Enterprise Cloud.
     * \* `none` - only admin members can create repositories.
     * **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.
     */
    members_allowed_repository_creation_type?: "all" | "private" | "none";
    /**
     * Toggles whether organization members can create GitHub Pages sites. Can be one of:
     * \* `true` - all organization members can create GitHub Pages sites.
     * \* `false` - no organization members can create GitHub Pages sites. Existing published sites will not be impacted.
     */
    members_can_create_pages?: boolean;
    /**
     * Toggles whether organization members can fork private organization repositories. Can be one of:
     * \* `true` - all organization members can fork private repositories within the organization.
     * \* `false` - no organization members can fork private repositories within the organization.
     */
    members_can_fork_private_repositories?: boolean;
    blog?: string;
  };
}
export interface Response$orgs$update$Status$200 {
  "application/json": Schemas.organization$full;
}
export type Response$orgs$update$Status$409 = Responses.conflict.Content;
export interface Response$orgs$update$Status$422 {
  "application/json": Schemas.validation$error | Schemas.validation$error$simple;
}
export interface Parameter$actions$get$github$actions$permissions$organization {
  org: Parameters.org;
}
export interface Response$actions$get$github$actions$permissions$organization$Status$200 {
  "application/json": Schemas.actions$organization$permissions;
}
export interface Parameter$actions$set$github$actions$permissions$organization {
  org: Parameters.org;
}
export interface RequestBody$actions$set$github$actions$permissions$organization {
  "application/json": {
    enabled_repositories: Schemas.enabled$repositories;
    allowed_actions?: Schemas.allowed$actions;
  };
}
export interface Parameter$actions$list$selected$repositories$enabled$github$actions$organization {
  org: Parameters.org;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$actions$list$selected$repositories$enabled$github$actions$organization$Status$200 {
  "application/json": {
    total_count: number;
    repositories: Schemas.repository[];
  };
}
export interface Parameter$actions$set$selected$repositories$enabled$github$actions$organization {
  org: Parameters.org;
}
export interface RequestBody$actions$set$selected$repositories$enabled$github$actions$organization {
  "application/json": {
    /** List of repository IDs to enable for GitHub Actions. */
    selected_repository_ids: number[];
  };
}
export interface Parameter$actions$enable$selected$repository$github$actions$organization {
  org: Parameters.org;
  repository_id: Parameters.repository$id;
}
export interface Parameter$actions$disable$selected$repository$github$actions$organization {
  org: Parameters.org;
  repository_id: Parameters.repository$id;
}
export interface Parameter$actions$get$allowed$actions$organization {
  org: Parameters.org;
}
export interface Response$actions$get$allowed$actions$organization$Status$200 {
  "application/json": Schemas.selected$actions;
}
export interface Parameter$actions$set$allowed$actions$organization {
  org: Parameters.org;
}
export interface RequestBody$actions$set$allowed$actions$organization {
  "application/json": Schemas.selected$actions;
}
export interface Parameter$actions$list$self$hosted$runner$groups$for$org {
  org: Parameters.org;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$actions$list$self$hosted$runner$groups$for$org$Status$200 {
  "application/json": {
    total_count: number;
    runner_groups: Schemas.runner$groups$org[];
  };
}
export interface Parameter$actions$create$self$hosted$runner$group$for$org {
  org: Parameters.org;
}
export interface RequestBody$actions$create$self$hosted$runner$group$for$org {
  "application/json": {
    /** Name of the runner group. */
    name: string;
    /** Visibility of a runner group. You can select all repositories, select individual repositories, or limit access to private repositories. Can be one of: `all`, `selected`, or `private`. */
    visibility?: "selected" | "all" | "private";
    /** List of repository IDs that can access the runner group. */
    selected_repository_ids?: number[];
    /** List of runner IDs to add to the runner group. */
    runners?: number[];
    /** Whether the runner group can be used by `public` repositories. */
    allows_public_repositories?: boolean;
  };
}
export interface Response$actions$create$self$hosted$runner$group$for$org$Status$201 {
  "application/json": Schemas.runner$groups$org;
}
export interface Parameter$actions$get$self$hosted$runner$group$for$org {
  org: Parameters.org;
  /** Unique identifier of the self-hosted runner group. */
  runner_group_id: Parameters.runner$group$id;
}
export interface Response$actions$get$self$hosted$runner$group$for$org$Status$200 {
  "application/json": Schemas.runner$groups$org;
}
export interface Parameter$actions$delete$self$hosted$runner$group$from$org {
  org: Parameters.org;
  /** Unique identifier of the self-hosted runner group. */
  runner_group_id: Parameters.runner$group$id;
}
export interface Parameter$actions$update$self$hosted$runner$group$for$org {
  org: Parameters.org;
  /** Unique identifier of the self-hosted runner group. */
  runner_group_id: Parameters.runner$group$id;
}
export interface RequestBody$actions$update$self$hosted$runner$group$for$org {
  "application/json": {
    /** Name of the runner group. */
    name: string;
    /** Visibility of a runner group. You can select all repositories, select individual repositories, or all private repositories. Can be one of: `all`, `selected`, or `private`. */
    visibility?: "selected" | "all" | "private";
    /** Whether the runner group can be used by `public` repositories. */
    allows_public_repositories?: boolean;
  };
}
export interface Response$actions$update$self$hosted$runner$group$for$org$Status$200 {
  "application/json": Schemas.runner$groups$org;
}
export interface Parameter$actions$list$repo$access$to$self$hosted$runner$group$in$org {
  org: Parameters.org;
  /** Unique identifier of the self-hosted runner group. */
  runner_group_id: Parameters.runner$group$id;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
}
export interface Response$actions$list$repo$access$to$self$hosted$runner$group$in$org$Status$200 {
  "application/json": {
    total_count: number;
    repositories: Schemas.minimal$repository[];
  };
}
export interface Parameter$actions$set$repo$access$to$self$hosted$runner$group$in$org {
  org: Parameters.org;
  /** Unique identifier of the self-hosted runner group. */
  runner_group_id: Parameters.runner$group$id;
}
export interface RequestBody$actions$set$repo$access$to$self$hosted$runner$group$in$org {
  "application/json": {
    /** List of repository IDs that can access the runner group. */
    selected_repository_ids: number[];
  };
}
export interface Parameter$actions$add$repo$access$to$self$hosted$runner$group$in$org {
  org: Parameters.org;
  /** Unique identifier of the self-hosted runner group. */
  runner_group_id: Parameters.runner$group$id;
  repository_id: Parameters.repository$id;
}
export interface Parameter$actions$remove$repo$access$to$self$hosted$runner$group$in$org {
  org: Parameters.org;
  /** Unique identifier of the self-hosted runner group. */
  runner_group_id: Parameters.runner$group$id;
  repository_id: Parameters.repository$id;
}
export interface Parameter$actions$list$self$hosted$runners$in$group$for$org {
  org: Parameters.org;
  /** Unique identifier of the self-hosted runner group. */
  runner_group_id: Parameters.runner$group$id;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$actions$list$self$hosted$runners$in$group$for$org$Status$200 {
  "application/json": {
    total_count: number;
    runners: Schemas.runner[];
  };
}
export interface Parameter$actions$set$self$hosted$runners$in$group$for$org {
  org: Parameters.org;
  /** Unique identifier of the self-hosted runner group. */
  runner_group_id: Parameters.runner$group$id;
}
export interface RequestBody$actions$set$self$hosted$runners$in$group$for$org {
  "application/json": {
    /** List of runner IDs to add to the runner group. */
    runners: number[];
  };
}
export interface Parameter$actions$add$self$hosted$runner$to$group$for$org {
  org: Parameters.org;
  /** Unique identifier of the self-hosted runner group. */
  runner_group_id: Parameters.runner$group$id;
  /** Unique identifier of the self-hosted runner. */
  runner_id: Parameters.runner$id;
}
export interface Parameter$actions$remove$self$hosted$runner$from$group$for$org {
  org: Parameters.org;
  /** Unique identifier of the self-hosted runner group. */
  runner_group_id: Parameters.runner$group$id;
  /** Unique identifier of the self-hosted runner. */
  runner_id: Parameters.runner$id;
}
export interface Parameter$actions$list$self$hosted$runners$for$org {
  org: Parameters.org;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$actions$list$self$hosted$runners$for$org$Status$200 {
  "application/json": {
    total_count: number;
    runners: Schemas.runner[];
  };
}
export interface Parameter$actions$list$runner$applications$for$org {
  org: Parameters.org;
}
export interface Response$actions$list$runner$applications$for$org$Status$200 {
  "application/json": Schemas.runner$application[];
}
export interface Parameter$actions$create$registration$token$for$org {
  org: Parameters.org;
}
export interface Response$actions$create$registration$token$for$org$Status$201 {
  "application/json": Schemas.authentication$token;
}
export interface Parameter$actions$create$remove$token$for$org {
  org: Parameters.org;
}
export interface Response$actions$create$remove$token$for$org$Status$201 {
  "application/json": Schemas.authentication$token;
}
export interface Parameter$actions$get$self$hosted$runner$for$org {
  org: Parameters.org;
  /** Unique identifier of the self-hosted runner. */
  runner_id: Parameters.runner$id;
}
export interface Response$actions$get$self$hosted$runner$for$org$Status$200 {
  "application/json": Schemas.runner;
}
export interface Parameter$actions$delete$self$hosted$runner$from$org {
  org: Parameters.org;
  /** Unique identifier of the self-hosted runner. */
  runner_id: Parameters.runner$id;
}
export interface Parameter$actions$list$labels$for$self$hosted$runner$for$org {
  org: Parameters.org;
  /** Unique identifier of the self-hosted runner. */
  runner_id: Parameters.runner$id;
}
export type Response$actions$list$labels$for$self$hosted$runner$for$org$Status$200 = Responses.actions_runner_labels.Content;
export type Response$actions$list$labels$for$self$hosted$runner$for$org$Status$404 = Responses.not_found.Content;
export interface Parameter$actions$set$custom$labels$for$self$hosted$runner$for$org {
  org: Parameters.org;
  /** Unique identifier of the self-hosted runner. */
  runner_id: Parameters.runner$id;
}
export interface RequestBody$actions$set$custom$labels$for$self$hosted$runner$for$org {
  "application/json": {
    /** The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels. */
    labels: string[];
  };
}
export type Response$actions$set$custom$labels$for$self$hosted$runner$for$org$Status$200 = Responses.actions_runner_labels.Content;
export type Response$actions$set$custom$labels$for$self$hosted$runner$for$org$Status$404 = Responses.not_found.Content;
export type Response$actions$set$custom$labels$for$self$hosted$runner$for$org$Status$422 = Responses.validation_failed_simple.Content;
export interface Parameter$actions$add$custom$labels$to$self$hosted$runner$for$org {
  org: Parameters.org;
  /** Unique identifier of the self-hosted runner. */
  runner_id: Parameters.runner$id;
}
export interface RequestBody$actions$add$custom$labels$to$self$hosted$runner$for$org {
  "application/json": {
    /** The names of the custom labels to add to the runner. */
    labels: string[];
  };
}
export type Response$actions$add$custom$labels$to$self$hosted$runner$for$org$Status$200 = Responses.actions_runner_labels.Content;
export type Response$actions$add$custom$labels$to$self$hosted$runner$for$org$Status$404 = Responses.not_found.Content;
export type Response$actions$add$custom$labels$to$self$hosted$runner$for$org$Status$422 = Responses.validation_failed_simple.Content;
export interface Parameter$actions$remove$all$custom$labels$from$self$hosted$runner$for$org {
  org: Parameters.org;
  /** Unique identifier of the self-hosted runner. */
  runner_id: Parameters.runner$id;
}
export type Response$actions$remove$all$custom$labels$from$self$hosted$runner$for$org$Status$200 =
  Responses.actions_runner_labels_readonly.Content;
export type Response$actions$remove$all$custom$labels$from$self$hosted$runner$for$org$Status$404 = Responses.not_found.Content;
export interface Parameter$actions$remove$custom$label$from$self$hosted$runner$for$org {
  org: Parameters.org;
  /** Unique identifier of the self-hosted runner. */
  runner_id: Parameters.runner$id;
  /** The name of a self-hosted runner's custom label. */
  name: Parameters.runner$label$name;
}
export type Response$actions$remove$custom$label$from$self$hosted$runner$for$org$Status$200 = Responses.actions_runner_labels.Content;
export type Response$actions$remove$custom$label$from$self$hosted$runner$for$org$Status$404 = Responses.not_found.Content;
export type Response$actions$remove$custom$label$from$self$hosted$runner$for$org$Status$422 = Responses.validation_failed_simple.Content;
export interface Parameter$actions$list$org$secrets {
  org: Parameters.org;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$actions$list$org$secrets$Status$200 {
  "application/json": {
    total_count: number;
    secrets: Schemas.organization$actions$secret[];
  };
}
export interface Parameter$actions$get$org$public$key {
  org: Parameters.org;
}
export interface Response$actions$get$org$public$key$Status$200 {
  "application/json": Schemas.actions$public$key;
}
export interface Parameter$actions$get$org$secret {
  org: Parameters.org;
  /** secret_name parameter */
  secret_name: Parameters.secret$name;
}
export interface Response$actions$get$org$secret$Status$200 {
  "application/json": Schemas.organization$actions$secret;
}
export interface Parameter$actions$create$or$update$org$secret {
  org: Parameters.org;
  /** secret_name parameter */
  secret_name: Parameters.secret$name;
}
export interface RequestBody$actions$create$or$update$org$secret {
  "application/json": {
    /** Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/enterprise-server@3.4/rest/reference/actions#get-an-organization-public-key) endpoint. */
    encrypted_value?: string;
    /** ID of the key you used to encrypt the secret. */
    key_id?: string;
    /**
     * Configures the access that repositories have to the organization secret. Can be one of:
     * \- `all` - All repositories in an organization can access the secret.
     * \- `private` - Private repositories in an organization can access the secret.
     * \- `selected` - Only specific repositories can access the secret.
     */
    visibility: "all" | "private" | "selected";
    /** An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/enterprise-server@3.4/rest/reference/actions#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/enterprise-server@3.4/rest/reference/actions#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/enterprise-server@3.4/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints. */
    selected_repository_ids?: string[];
  };
}
export interface Response$actions$create$or$update$org$secret$Status$201 {
  "application/json": Schemas.empty$object;
}
export interface Parameter$actions$delete$org$secret {
  org: Parameters.org;
  /** secret_name parameter */
  secret_name: Parameters.secret$name;
}
export interface Parameter$actions$list$selected$repos$for$org$secret {
  org: Parameters.org;
  /** secret_name parameter */
  secret_name: Parameters.secret$name;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
}
export interface Response$actions$list$selected$repos$for$org$secret$Status$200 {
  "application/json": {
    total_count: number;
    repositories: Schemas.minimal$repository[];
  };
}
export interface Parameter$actions$set$selected$repos$for$org$secret {
  org: Parameters.org;
  /** secret_name parameter */
  secret_name: Parameters.secret$name;
}
export interface RequestBody$actions$set$selected$repos$for$org$secret {
  "application/json": {
    /** An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/enterprise-server@3.4/rest/reference/actions#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/enterprise-server@3.4/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints. */
    selected_repository_ids: number[];
  };
}
export interface Parameter$actions$add$selected$repo$to$org$secret {
  org: Parameters.org;
  /** secret_name parameter */
  secret_name: Parameters.secret$name;
  repository_id: number;
}
export interface Parameter$actions$remove$selected$repo$from$org$secret {
  org: Parameters.org;
  /** secret_name parameter */
  secret_name: Parameters.secret$name;
  repository_id: number;
}
export interface Parameter$orgs$get$audit$log {
  org: Parameters.org;
  /** A search phrase. For more information, see [Searching the audit log](https://docs.github.com/enterprise-server@3.4/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization#searching-the-audit-log). */
  phrase?: Parameters.audit$log$phrase;
  /**
   * The event types to include:
   *
   * - `web` - returns web (non-Git) events.
   * - `git` - returns Git events.
   * - `all` - returns both web and Git events.
   *
   * The default is `web`.
   */
  include?: Parameters.audit$log$include;
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor. */
  after?: Parameters.audit$log$after;
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor. */
  before?: Parameters.audit$log$before;
  /**
   * The order of audit log events. To list newest events first, specify `desc`. To list oldest events first, specify `asc`.
   *
   * The default is `desc`.
   */
  order?: Parameters.audit$log$order;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$orgs$get$audit$log$Status$200 {
  "application/json": Schemas.audit$log$event[];
}
export interface Parameter$dependabot$list$org$secrets {
  org: Parameters.org;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$dependabot$list$org$secrets$Status$200 {
  "application/json": {
    total_count: number;
    secrets: Schemas.organization$dependabot$secret[];
  };
}
export interface Parameter$dependabot$get$org$public$key {
  org: Parameters.org;
}
export interface Response$dependabot$get$org$public$key$Status$200 {
  "application/json": Schemas.dependabot$public$key;
}
export interface Parameter$dependabot$get$org$secret {
  org: Parameters.org;
  /** secret_name parameter */
  secret_name: Parameters.secret$name;
}
export interface Response$dependabot$get$org$secret$Status$200 {
  "application/json": Schemas.organization$dependabot$secret;
}
export interface Parameter$dependabot$create$or$update$org$secret {
  org: Parameters.org;
  /** secret_name parameter */
  secret_name: Parameters.secret$name;
}
export interface RequestBody$dependabot$create$or$update$org$secret {
  "application/json": {
    /** Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/enterprise-server@3.4/rest/reference/dependabot#get-an-organization-public-key) endpoint. */
    encrypted_value?: string;
    /** ID of the key you used to encrypt the secret. */
    key_id?: string;
    /**
     * Configures the access that repositories have to the organization secret. Can be one of:
     * \- `all` - All repositories in an organization can access the secret.
     * \- `private` - Private repositories in an organization can access the secret.
     * \- `selected` - Only specific repositories can access the secret.
     */
    visibility: "all" | "private" | "selected";
    /** An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/enterprise-server@3.4/rest/reference/dependabot#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/enterprise-server@3.4/rest/reference/dependabot#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/enterprise-server@3.4/rest/reference/dependabot#remove-selected-repository-from-an-organization-secret) endpoints. */
    selected_repository_ids?: string[];
  };
}
export interface Response$dependabot$create$or$update$org$secret$Status$201 {
  "application/json": Schemas.empty$object;
}
export interface Parameter$dependabot$delete$org$secret {
  org: Parameters.org;
  /** secret_name parameter */
  secret_name: Parameters.secret$name;
}
export interface Parameter$dependabot$list$selected$repos$for$org$secret {
  org: Parameters.org;
  /** secret_name parameter */
  secret_name: Parameters.secret$name;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
}
export interface Response$dependabot$list$selected$repos$for$org$secret$Status$200 {
  "application/json": {
    total_count: number;
    repositories: Schemas.minimal$repository[];
  };
}
export interface Parameter$dependabot$set$selected$repos$for$org$secret {
  org: Parameters.org;
  /** secret_name parameter */
  secret_name: Parameters.secret$name;
}
export interface RequestBody$dependabot$set$selected$repos$for$org$secret {
  "application/json": {
    /** An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/enterprise-server@3.4/rest/reference/dependabot#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/enterprise-server@3.4/rest/reference/dependabot#remove-selected-repository-from-an-organization-secret) endpoints. */
    selected_repository_ids: number[];
  };
}
export interface Parameter$dependabot$add$selected$repo$to$org$secret {
  org: Parameters.org;
  /** secret_name parameter */
  secret_name: Parameters.secret$name;
  repository_id: number;
}
export interface Parameter$dependabot$remove$selected$repo$from$org$secret {
  org: Parameters.org;
  /** secret_name parameter */
  secret_name: Parameters.secret$name;
  repository_id: number;
}
export interface Parameter$activity$list$public$org$events {
  org: Parameters.org;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$activity$list$public$org$events$Status$200 {
  "application/json": Schemas.event[];
}
export interface Parameter$orgs$list$webhooks {
  org: Parameters.org;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$orgs$list$webhooks$Status$200 {
  "application/json": Schemas.org$hook[];
}
export type Response$orgs$list$webhooks$Status$404 = Responses.not_found.Content;
export interface Parameter$orgs$create$webhook {
  org: Parameters.org;
}
export interface RequestBody$orgs$create$webhook {
  "application/json": {
    /** Must be passed as "web". */
    name: string;
    /** Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/enterprise-server@3.4/rest/reference/orgs#create-hook-config-params). */
    config: {
      url: Schemas.webhook$config$url;
      content_type?: Schemas.webhook$config$content$type;
      secret?: Schemas.webhook$config$secret;
      insecure_ssl?: Schemas.webhook$config$insecure$ssl;
      username?: string;
      password?: string;
    };
    /** Determines what [events](https://docs.github.com/enterprise-server@3.4/webhooks/event-payloads) the hook is triggered for. */
    events?: string[];
    /** Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications. */
    active?: boolean;
  };
}
export interface Response$orgs$create$webhook$Status$201 {
  "application/json": Schemas.org$hook;
}
export type Response$orgs$create$webhook$Status$404 = Responses.not_found.Content;
export type Response$orgs$create$webhook$Status$422 = Responses.validation_failed.Content;
export interface Parameter$orgs$get$webhook {
  org: Parameters.org;
  hook_id: Parameters.hook$id;
}
export interface Response$orgs$get$webhook$Status$200 {
  "application/json": Schemas.org$hook;
}
export type Response$orgs$get$webhook$Status$404 = Responses.not_found.Content;
export interface Parameter$orgs$delete$webhook {
  org: Parameters.org;
  hook_id: Parameters.hook$id;
}
export type Response$orgs$delete$webhook$Status$404 = Responses.not_found.Content;
export interface Parameter$orgs$update$webhook {
  org: Parameters.org;
  hook_id: Parameters.hook$id;
}
export interface RequestBody$orgs$update$webhook {
  "application/json": {
    /** Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/enterprise-server@3.4/rest/reference/orgs#update-hook-config-params). */
    config?: {
      url: Schemas.webhook$config$url;
      content_type?: Schemas.webhook$config$content$type;
      secret?: Schemas.webhook$config$secret;
      insecure_ssl?: Schemas.webhook$config$insecure$ssl;
    };
    /** Determines what [events](https://docs.github.com/enterprise-server@3.4/webhooks/event-payloads) the hook is triggered for. */
    events?: string[];
    /** Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications. */
    active?: boolean;
    name?: string;
  };
}
export interface Response$orgs$update$webhook$Status$200 {
  "application/json": Schemas.org$hook;
}
export type Response$orgs$update$webhook$Status$404 = Responses.not_found.Content;
export type Response$orgs$update$webhook$Status$422 = Responses.validation_failed.Content;
export interface Parameter$orgs$get$webhook$config$for$org {
  org: Parameters.org;
  hook_id: Parameters.hook$id;
}
export interface Response$orgs$get$webhook$config$for$org$Status$200 {
  "application/json": Schemas.webhook$config;
}
export interface Parameter$orgs$update$webhook$config$for$org {
  org: Parameters.org;
  hook_id: Parameters.hook$id;
}
export interface RequestBody$orgs$update$webhook$config$for$org {
  "application/json": {
    url?: Schemas.webhook$config$url;
    content_type?: Schemas.webhook$config$content$type;
    secret?: Schemas.webhook$config$secret;
    insecure_ssl?: Schemas.webhook$config$insecure$ssl;
  };
}
export interface Response$orgs$update$webhook$config$for$org$Status$200 {
  "application/json": Schemas.webhook$config;
}
export interface Parameter$orgs$list$webhook$deliveries {
  org: Parameters.org;
  hook_id: Parameters.hook$id;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors. */
  cursor?: Parameters.cursor;
}
export interface Response$orgs$list$webhook$deliveries$Status$200 {
  "application/json": Schemas.hook$delivery$item[];
}
export type Response$orgs$list$webhook$deliveries$Status$400 = Responses.bad_request.Content;
export type Response$orgs$list$webhook$deliveries$Status$422 = Responses.validation_failed.Content;
export interface Parameter$orgs$get$webhook$delivery {
  org: Parameters.org;
  hook_id: Parameters.hook$id;
  delivery_id: Parameters.delivery$id;
}
export interface Response$orgs$get$webhook$delivery$Status$200 {
  "application/json": Schemas.hook$delivery;
}
export type Response$orgs$get$webhook$delivery$Status$400 = Responses.bad_request.Content;
export type Response$orgs$get$webhook$delivery$Status$422 = Responses.validation_failed.Content;
export interface Parameter$orgs$redeliver$webhook$delivery {
  org: Parameters.org;
  hook_id: Parameters.hook$id;
  delivery_id: Parameters.delivery$id;
}
export type Response$orgs$redeliver$webhook$delivery$Status$202 = Responses.accepted.Content;
export type Response$orgs$redeliver$webhook$delivery$Status$400 = Responses.bad_request.Content;
export type Response$orgs$redeliver$webhook$delivery$Status$422 = Responses.validation_failed.Content;
export interface Parameter$orgs$ping$webhook {
  org: Parameters.org;
  hook_id: Parameters.hook$id;
}
export type Response$orgs$ping$webhook$Status$404 = Responses.not_found.Content;
export interface Parameter$apps$get$org$installation {
  org: Parameters.org;
}
export interface Response$apps$get$org$installation$Status$200 {
  "application/json": Schemas.installation;
}
export interface Parameter$orgs$list$app$installations {
  org: Parameters.org;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$orgs$list$app$installations$Status$200 {
  "application/json": {
    total_count: number;
    installations: Schemas.installation[];
  };
}
export interface Parameter$issues$list$for$org {
  org: Parameters.org;
  /**
   * Indicates which sorts of issues to return. Can be one of:
   * \* `assigned`: Issues assigned to you
   * \* `created`: Issues created by you
   * \* `mentioned`: Issues mentioning you
   * \* `subscribed`: Issues you're subscribed to updates for
   * \* `all` or `repos`: All issues the authenticated user can see, regardless of participation or creation
   */
  filter?: "assigned" | "created" | "mentioned" | "subscribed" | "repos" | "all";
  /** Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`. */
  state?: "open" | "closed" | "all";
  /** A list of comma separated label names. Example: `bug,ui,@high` */
  labels?: Parameters.labels;
  /** What to sort results by. Can be either `created`, `updated`, `comments`. */
  sort?: "created" | "updated" | "comments";
  /** One of `asc` (ascending) or `desc` (descending). */
  direction?: Parameters.direction;
  /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
  since?: Parameters.since;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$issues$list$for$org$Status$200 {
  "application/json": Schemas.issue[];
}
export type Response$issues$list$for$org$Status$404 = Responses.not_found.Content;
export interface Parameter$orgs$list$members {
  org: Parameters.org;
  /**
   * Filter members returned in the list. Can be one of:
   * \* `2fa_disabled` - Members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled. Available for organization owners.
   * \* `all` - All members the authenticated user can see.
   */
  filter?: "2fa_disabled" | "all";
  /**
   * Filter members returned by their role. Can be one of:
   * \* `all` - All members of the organization, regardless of role.
   * \* `admin` - Organization owners.
   * \* `member` - Non-owner organization members.
   */
  role?: "all" | "admin" | "member";
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$orgs$list$members$Status$200 {
  "application/json": Schemas.simple$user[];
}
export type Response$orgs$list$members$Status$422 = Responses.validation_failed.Content;
export interface Parameter$orgs$check$membership$for$user {
  org: Parameters.org;
  username: Parameters.username;
}
export interface Parameter$orgs$remove$member {
  org: Parameters.org;
  username: Parameters.username;
}
export type Response$orgs$remove$member$Status$403 = Responses.forbidden.Content;
export interface Parameter$orgs$get$membership$for$user {
  org: Parameters.org;
  username: Parameters.username;
}
export interface Response$orgs$get$membership$for$user$Status$200 {
  "application/json": Schemas.org$membership;
}
export type Response$orgs$get$membership$for$user$Status$403 = Responses.forbidden.Content;
export type Response$orgs$get$membership$for$user$Status$404 = Responses.not_found.Content;
export interface Parameter$orgs$set$membership$for$user {
  org: Parameters.org;
  username: Parameters.username;
}
export interface RequestBody$orgs$set$membership$for$user {
  "application/json": {
    /**
     * The role to give the user in the organization. Can be one of:
     * \* `admin` - The user will become an owner of the organization.
     * \* `member` - The user will become a non-owner member of the organization.
     */
    role?: "admin" | "member";
  };
}
export interface Response$orgs$set$membership$for$user$Status$200 {
  "application/json": Schemas.org$membership;
}
export type Response$orgs$set$membership$for$user$Status$403 = Responses.forbidden.Content;
export type Response$orgs$set$membership$for$user$Status$422 = Responses.validation_failed.Content;
export interface Parameter$orgs$remove$membership$for$user {
  org: Parameters.org;
  username: Parameters.username;
}
export type Response$orgs$remove$membership$for$user$Status$403 = Responses.forbidden.Content;
export type Response$orgs$remove$membership$for$user$Status$404 = Responses.not_found.Content;
export interface Parameter$migrations$list$for$org {
  org: Parameters.org;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
  /** Exclude attributes from the API response to improve performance */
  exclude?: "repositories"[];
}
export interface Response$migrations$list$for$org$Status$200 {
  "application/json": Schemas.migration[];
}
export interface Parameter$migrations$start$for$org {
  org: Parameters.org;
}
export interface RequestBody$migrations$start$for$org {
  "application/json": {
    /** A list of arrays indicating which repositories should be migrated. */
    repositories: string[];
    /** Indicates whether repositories should be locked (to prevent manipulation) while migrating data. */
    lock_repositories?: boolean;
    /** Indicates whether attachments should be excluded from the migration (to reduce migration archive file size). */
    exclude_attachments?: boolean;
    /** Indicates whether releases should be excluded from the migration (to reduce migration archive file size). */
    exclude_releases?: boolean;
    /** Indicates whether projects owned by the organization or users should be excluded. from the migration. */
    exclude_owner_projects?: boolean;
    exclude?: "repositories"[];
  };
}
export interface Response$migrations$start$for$org$Status$201 {
  "application/json": Schemas.migration;
}
export type Response$migrations$start$for$org$Status$404 = Responses.not_found.Content;
export type Response$migrations$start$for$org$Status$422 = Responses.validation_failed.Content;
export interface Parameter$migrations$get$status$for$org {
  org: Parameters.org;
  /** migration_id parameter */
  migration_id: Parameters.migration$id;
  /** Exclude attributes from the API response to improve performance */
  exclude?: "repositories"[];
}
export interface Response$migrations$get$status$for$org$Status$200 {
  "application/json": Schemas.migration;
}
export type Response$migrations$get$status$for$org$Status$404 = Responses.not_found.Content;
export interface Parameter$orgs$list$outside$collaborators {
  org: Parameters.org;
  /**
   * Filter the list of outside collaborators. Can be one of:
   * \* `2fa_disabled`: Outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled.
   * \* `all`: All outside collaborators.
   */
  filter?: "2fa_disabled" | "all";
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$orgs$list$outside$collaborators$Status$200 {
  "application/json": Schemas.simple$user[];
}
export interface Parameter$orgs$convert$member$to$outside$collaborator {
  org: Parameters.org;
  username: Parameters.username;
}
export interface Response$orgs$convert$member$to$outside$collaborator$Status$202 {
  "application/json": {};
}
export type Response$orgs$convert$member$to$outside$collaborator$Status$404 = Responses.not_found.Content;
export interface Parameter$orgs$remove$outside$collaborator {
  org: Parameters.org;
  username: Parameters.username;
}
export interface Response$orgs$remove$outside$collaborator$Status$422 {
  "application/json": {
    message?: string;
    documentation_url?: string;
  };
}
export interface Parameter$enterprise$admin$list$pre$receive$hooks$for$org {
  org: Parameters.org;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
  /** One of `asc` (ascending) or `desc` (descending). */
  direction?: Parameters.direction;
  /** The sort order for the response collection. */
  sort?: "created" | "updated" | "name";
}
export interface Response$enterprise$admin$list$pre$receive$hooks$for$org$Status$200 {
  "application/json": Schemas.org$pre$receive$hook[];
}
export interface Parameter$enterprise$admin$get$pre$receive$hook$for$org {
  org: Parameters.org;
  /** pre_receive_hook_id parameter */
  pre_receive_hook_id: Parameters.pre$receive$hook$id;
}
export interface Response$enterprise$admin$get$pre$receive$hook$for$org$Status$200 {
  "application/json": Schemas.org$pre$receive$hook;
}
export interface Parameter$enterprise$admin$remove$pre$receive$hook$enforcement$for$org {
  org: Parameters.org;
  /** pre_receive_hook_id parameter */
  pre_receive_hook_id: Parameters.pre$receive$hook$id;
}
export interface Response$enterprise$admin$remove$pre$receive$hook$enforcement$for$org$Status$200 {
  "application/json": Schemas.org$pre$receive$hook;
}
export interface Parameter$enterprise$admin$update$pre$receive$hook$enforcement$for$org {
  org: Parameters.org;
  /** pre_receive_hook_id parameter */
  pre_receive_hook_id: Parameters.pre$receive$hook$id;
}
export interface RequestBody$enterprise$admin$update$pre$receive$hook$enforcement$for$org {
  "application/json": {
    /** The state of enforcement for the hook on this repository. */
    enforcement?: string;
    /** Whether repositories can override enforcement. */
    allow_downstream_configuration?: boolean;
  };
}
export interface Response$enterprise$admin$update$pre$receive$hook$enforcement$for$org$Status$200 {
  "application/json": Schemas.org$pre$receive$hook;
}
export interface Parameter$projects$list$for$org {
  org: Parameters.org;
  /** Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`. */
  state?: "open" | "closed" | "all";
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$projects$list$for$org$Status$200 {
  "application/json": Schemas.project[];
}
export type Response$projects$list$for$org$Status$422 = Responses.validation_failed_simple.Content;
export interface Parameter$projects$create$for$org {
  org: Parameters.org;
}
export interface RequestBody$projects$create$for$org {
  "application/json": {
    /** The name of the project. */
    name: string;
    /** The description of the project. */
    body?: string;
  };
}
export interface Response$projects$create$for$org$Status$201 {
  "application/json": Schemas.project;
}
export type Response$projects$create$for$org$Status$401 = Responses.requires_authentication.Content;
export type Response$projects$create$for$org$Status$403 = Responses.forbidden.Content;
export type Response$projects$create$for$org$Status$404 = Responses.not_found.Content;
export type Response$projects$create$for$org$Status$410 = Responses.gone.Content;
export type Response$projects$create$for$org$Status$422 = Responses.validation_failed_simple.Content;
export interface Parameter$orgs$list$public$members {
  org: Parameters.org;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$orgs$list$public$members$Status$200 {
  "application/json": Schemas.simple$user[];
}
export interface Parameter$orgs$check$public$membership$for$user {
  org: Parameters.org;
  username: Parameters.username;
}
export interface Parameter$orgs$set$public$membership$for$authenticated$user {
  org: Parameters.org;
  username: Parameters.username;
}
export type Response$orgs$set$public$membership$for$authenticated$user$Status$403 = Responses.forbidden.Content;
export interface Parameter$orgs$remove$public$membership$for$authenticated$user {
  org: Parameters.org;
  username: Parameters.username;
}
export interface Parameter$repos$list$for$org {
  org: Parameters.org;
  /** Specifies the types of repositories you want returned. Can be one of `all`, `public`, `private`, `forks`, `sources`, `member`, `internal`. Note: For GitHub AE, can be one of `all`, `private`, `forks`, `sources`, `member`, `internal`. Default: `all`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `type` can also be `internal`. However, the `internal` value is not yet supported when a GitHub App calls this API with an installation access token. */
  type?: "all" | "public" | "private" | "forks" | "sources" | "member" | "internal";
  /** Can be one of `created`, `updated`, `pushed`, `full_name`. */
  sort?: "created" | "updated" | "pushed" | "full_name";
  /** Can be one of `asc` or `desc`. Default: when using `full_name`: `asc`, otherwise `desc` */
  direction?: "asc" | "desc";
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$repos$list$for$org$Status$200 {
  "application/json": Schemas.minimal$repository[];
}
export interface Parameter$repos$create$in$org {
  org: Parameters.org;
}
export interface RequestBody$repos$create$in$org {
  "application/json": {
    /** The name of the repository. */
    name: string;
    /** A short description of the repository. */
    description?: string;
    /** A URL with more information about the repository. */
    homepage?: string;
    /** Whether the repository is private. */
    private?: boolean;
    /** Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. Note: For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories available to all users on the enterprise. For more information, see "[Creating an internal repository](https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)" in the GitHub Help documentation. */
    visibility?: "public" | "private" | "internal";
    /** Either `true` to enable issues for this repository or `false` to disable them. */
    has_issues?: boolean;
    /** Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error. */
    has_projects?: boolean;
    /** Either `true` to enable the wiki for this repository or `false` to disable it. */
    has_wiki?: boolean;
    /** Either `true` to make this repo available as a template repository or `false` to prevent it. */
    is_template?: boolean;
    /** The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization. */
    team_id?: number;
    /** Pass `true` to create an initial commit with empty README. */
    auto_init?: boolean;
    /** Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, "Haskell". */
    gitignore_template?: string;
    /** Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, "mit" or "mpl-2.0". */
    license_template?: string;
    /** Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging. */
    allow_squash_merge?: boolean;
    /** Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits. */
    allow_merge_commit?: boolean;
    /** Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging. */
    allow_rebase_merge?: boolean;
    /** Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge. */
    allow_auto_merge?: boolean;
    /** Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. */
    delete_branch_on_merge?: boolean;
  };
}
export interface Response$repos$create$in$org$Status$201 {
  "application/json": Schemas.repository;
}
export type Response$repos$create$in$org$Status$403 = Responses.forbidden.Content;
export type Response$repos$create$in$org$Status$422 = Responses.validation_failed.Content;
export interface Parameter$secret$scanning$list$alerts$for$org {
  org: Parameters.org;
  /** Set to `open` or `resolved` to only list secret scanning alerts in a specific state. */
  state?: Parameters.secret$scanning$alert$state;
  /**
   * A comma-separated list of secret types to return. By default all secret types are returned.
   * See "[Secret scanning patterns](https://docs.github.com/enterprise-server@3.4/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)"
   * for a complete list of secret types (API slug).
   */
  secret_type?: Parameters.secret$scanning$alert$secret$type;
  /** A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`. */
  resolution?: Parameters.secret$scanning$alert$resolution;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
}
export interface Response$secret$scanning$list$alerts$for$org$Status$200 {
  "application/json": Schemas.organization$secret$scanning$alert[];
}
export type Response$secret$scanning$list$alerts$for$org$Status$404 = Responses.not_found.Content;
export type Response$secret$scanning$list$alerts$for$org$Status$503 = Responses.service_unavailable.Content;
export interface Parameter$billing$get$github$advanced$security$billing$org {
  org: Parameters.org;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$billing$get$github$advanced$security$billing$org$Status$200 {
  "application/json": Schemas.advanced$security$active$committers;
}
export type Response$billing$get$github$advanced$security$billing$org$Status$403 = Responses.code_scanning_forbidden_read.Content;
export interface Parameter$teams$list {
  org: Parameters.org;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$teams$list$Status$200 {
  "application/json": Schemas.team[];
}
export type Response$teams$list$Status$403 = Responses.forbidden.Content;
export interface Parameter$teams$create {
  org: Parameters.org;
}
export interface RequestBody$teams$create {
  "application/json": {
    /** The name of the team. */
    name: string;
    /** The description of the team. */
    description?: string;
    /** List GitHub IDs for organization members who will become team maintainers. */
    maintainers?: string[];
    /** The full name (e.g., "organization-name/repository-name") of repositories to add the team to. */
    repo_names?: string[];
    /**
     * The level of privacy this team should have. The options are:
     * **For a non-nested team:**
     * \* `secret` - only visible to organization owners and members of this team.
     * \* `closed` - visible to all members of this organization.
     * Default: `secret`
     * **For a parent or child team:**
     * \* `closed` - visible to all members of this organization.
     * Default for child team: `closed`
     */
    privacy?: "secret" | "closed";
    /**
     * **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:
     * \* `pull` - team members can pull, but not push to or administer newly-added repositories.
     * \* `push` - team members can pull and push, but not administer newly-added repositories.
     */
    permission?: "pull" | "push";
    /** The ID of a team to set as the parent team. */
    parent_team_id?: number;
    /** The [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team. LDAP synchronization must be enabled to map LDAP entries to a team. Use the "[Update LDAP mapping for a team](https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#update-ldap-mapping-for-a-team)" endpoint to change the LDAP DN. For more information, see "[Using LDAP](https://docs.github.com/enterprise-server@3.4/admin/identity-and-access-management/authenticating-users-for-your-github-enterprise-server-instance/using-ldap#enabling-ldap-sync)." */
    ldap_dn?: string;
  };
}
export interface Response$teams$create$Status$201 {
  "application/json": Schemas.team$full;
}
export type Response$teams$create$Status$403 = Responses.forbidden.Content;
export type Response$teams$create$Status$422 = Responses.validation_failed.Content;
export interface Parameter$teams$get$by$name {
  org: Parameters.org;
  /** team_slug parameter */
  team_slug: Parameters.team$slug;
}
export interface Response$teams$get$by$name$Status$200 {
  "application/json": Schemas.team$full;
}
export type Response$teams$get$by$name$Status$404 = Responses.not_found.Content;
export interface Parameter$teams$delete$in$org {
  org: Parameters.org;
  /** team_slug parameter */
  team_slug: Parameters.team$slug;
}
export interface Parameter$teams$update$in$org {
  org: Parameters.org;
  /** team_slug parameter */
  team_slug: Parameters.team$slug;
}
export interface RequestBody$teams$update$in$org {
  "application/json": {
    /** The name of the team. */
    name?: string;
    /** The description of the team. */
    description?: string;
    /**
     * The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:
     * **For a non-nested team:**
     * \* `secret` - only visible to organization owners and members of this team.
     * \* `closed` - visible to all members of this organization.
     * **For a parent or child team:**
     * \* `closed` - visible to all members of this organization.
     */
    privacy?: "secret" | "closed";
    /**
     * **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:
     * \* `pull` - team members can pull, but not push to or administer newly-added repositories.
     * \* `push` - team members can pull and push, but not administer newly-added repositories.
     * \* `admin` - team members can pull, push and administer newly-added repositories.
     */
    permission?: "pull" | "push" | "admin";
    /** The ID of a team to set as the parent team. */
    parent_team_id?: number | null;
  };
}
export interface Response$teams$update$in$org$Status$201 {
  "application/json": Schemas.team$full;
}
export interface Parameter$teams$list$discussions$in$org {
  org: Parameters.org;
  /** team_slug parameter */
  team_slug: Parameters.team$slug;
  /** One of `asc` (ascending) or `desc` (descending). */
  direction?: Parameters.direction;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
  /** Pinned discussions only filter */
  pinned?: string;
}
export interface Response$teams$list$discussions$in$org$Status$200 {
  "application/json": Schemas.team$discussion[];
}
export interface Parameter$teams$create$discussion$in$org {
  org: Parameters.org;
  /** team_slug parameter */
  team_slug: Parameters.team$slug;
}
export interface RequestBody$teams$create$discussion$in$org {
  "application/json": {
    /** The discussion post's title. */
    title: string;
    /** The discussion post's body text. */
    body: string;
    /** Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post. */
    private?: boolean;
  };
}
export interface Response$teams$create$discussion$in$org$Status$201 {
  "application/json": Schemas.team$discussion;
}
export interface Parameter$teams$get$discussion$in$org {
  org: Parameters.org;
  /** team_slug parameter */
  team_slug: Parameters.team$slug;
  discussion_number: Parameters.discussion$number;
}
export interface Response$teams$get$discussion$in$org$Status$200 {
  "application/json": Schemas.team$discussion;
}
export interface Parameter$teams$delete$discussion$in$org {
  org: Parameters.org;
  /** team_slug parameter */
  team_slug: Parameters.team$slug;
  discussion_number: Parameters.discussion$number;
}
export interface Parameter$teams$update$discussion$in$org {
  org: Parameters.org;
  /** team_slug parameter */
  team_slug: Parameters.team$slug;
  discussion_number: Parameters.discussion$number;
}
export interface RequestBody$teams$update$discussion$in$org {
  "application/json": {
    /** The discussion post's title. */
    title?: string;
    /** The discussion post's body text. */
    body?: string;
  };
}
export interface Response$teams$update$discussion$in$org$Status$200 {
  "application/json": Schemas.team$discussion;
}
export interface Parameter$teams$list$discussion$comments$in$org {
  org: Parameters.org;
  /** team_slug parameter */
  team_slug: Parameters.team$slug;
  discussion_number: Parameters.discussion$number;
  /** One of `asc` (ascending) or `desc` (descending). */
  direction?: Parameters.direction;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$teams$list$discussion$comments$in$org$Status$200 {
  "application/json": Schemas.team$discussion$comment[];
}
export interface Parameter$teams$create$discussion$comment$in$org {
  org: Parameters.org;
  /** team_slug parameter */
  team_slug: Parameters.team$slug;
  discussion_number: Parameters.discussion$number;
}
export interface RequestBody$teams$create$discussion$comment$in$org {
  "application/json": {
    /** The discussion comment's body text. */
    body: string;
  };
}
export interface Response$teams$create$discussion$comment$in$org$Status$201 {
  "application/json": Schemas.team$discussion$comment;
}
export interface Parameter$teams$get$discussion$comment$in$org {
  org: Parameters.org;
  /** team_slug parameter */
  team_slug: Parameters.team$slug;
  discussion_number: Parameters.discussion$number;
  comment_number: Parameters.comment$number;
}
export interface Response$teams$get$discussion$comment$in$org$Status$200 {
  "application/json": Schemas.team$discussion$comment;
}
export interface Parameter$teams$delete$discussion$comment$in$org {
  org: Parameters.org;
  /** team_slug parameter */
  team_slug: Parameters.team$slug;
  discussion_number: Parameters.discussion$number;
  comment_number: Parameters.comment$number;
}
export interface Parameter$teams$update$discussion$comment$in$org {
  org: Parameters.org;
  /** team_slug parameter */
  team_slug: Parameters.team$slug;
  discussion_number: Parameters.discussion$number;
  comment_number: Parameters.comment$number;
}
export interface RequestBody$teams$update$discussion$comment$in$org {
  "application/json": {
    /** The discussion comment's body text. */
    body: string;
  };
}
export interface Response$teams$update$discussion$comment$in$org$Status$200 {
  "application/json": Schemas.team$discussion$comment;
}
export interface Parameter$reactions$list$for$team$discussion$comment$in$org {
  org: Parameters.org;
  /** team_slug parameter */
  team_slug: Parameters.team$slug;
  discussion_number: Parameters.discussion$number;
  comment_number: Parameters.comment$number;
  /** Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment. */
  content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$reactions$list$for$team$discussion$comment$in$org$Status$200 {
  "application/json": Schemas.reaction[];
}
export interface Parameter$reactions$create$for$team$discussion$comment$in$org {
  org: Parameters.org;
  /** team_slug parameter */
  team_slug: Parameters.team$slug;
  discussion_number: Parameters.discussion$number;
  comment_number: Parameters.comment$number;
}
export interface RequestBody$reactions$create$for$team$discussion$comment$in$org {
  "application/json": {
    /** The [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types) to add to the team discussion comment. */
    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
  };
}
export interface Response$reactions$create$for$team$discussion$comment$in$org$Status$200 {
  "application/json": Schemas.reaction;
}
export interface Response$reactions$create$for$team$discussion$comment$in$org$Status$201 {
  "application/json": Schemas.reaction;
}
export interface Parameter$reactions$delete$for$team$discussion$comment {
  org: Parameters.org;
  /** team_slug parameter */
  team_slug: Parameters.team$slug;
  discussion_number: Parameters.discussion$number;
  comment_number: Parameters.comment$number;
  reaction_id: Parameters.reaction$id;
}
export interface Parameter$reactions$list$for$team$discussion$in$org {
  org: Parameters.org;
  /** team_slug parameter */
  team_slug: Parameters.team$slug;
  discussion_number: Parameters.discussion$number;
  /** Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion. */
  content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$reactions$list$for$team$discussion$in$org$Status$200 {
  "application/json": Schemas.reaction[];
}
export interface Parameter$reactions$create$for$team$discussion$in$org {
  org: Parameters.org;
  /** team_slug parameter */
  team_slug: Parameters.team$slug;
  discussion_number: Parameters.discussion$number;
}
export interface RequestBody$reactions$create$for$team$discussion$in$org {
  "application/json": {
    /** The [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types) to add to the team discussion. */
    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
  };
}
export interface Response$reactions$create$for$team$discussion$in$org$Status$200 {
  "application/json": Schemas.reaction;
}
export interface Response$reactions$create$for$team$discussion$in$org$Status$201 {
  "application/json": Schemas.reaction;
}
export interface Parameter$reactions$delete$for$team$discussion {
  org: Parameters.org;
  /** team_slug parameter */
  team_slug: Parameters.team$slug;
  discussion_number: Parameters.discussion$number;
  reaction_id: Parameters.reaction$id;
}
export interface Parameter$teams$list$members$in$org {
  org: Parameters.org;
  /** team_slug parameter */
  team_slug: Parameters.team$slug;
  /**
   * Filters members returned by their role in the team. Can be one of:
   * \* `member` - normal members of the team.
   * \* `maintainer` - team maintainers.
   * \* `all` - all members of the team.
   */
  role?: "member" | "maintainer" | "all";
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$teams$list$members$in$org$Status$200 {
  "application/json": Schemas.simple$user[];
}
export interface Parameter$teams$get$membership$for$user$in$org {
  org: Parameters.org;
  /** team_slug parameter */
  team_slug: Parameters.team$slug;
  username: Parameters.username;
}
export interface Response$teams$get$membership$for$user$in$org$Status$200 {
  "application/json": Schemas.team$membership;
}
export interface Parameter$teams$add$or$update$membership$for$user$in$org {
  org: Parameters.org;
  /** team_slug parameter */
  team_slug: Parameters.team$slug;
  username: Parameters.username;
}
export interface RequestBody$teams$add$or$update$membership$for$user$in$org {
  "application/json": {
    /**
     * The role that this user should have in the team. Can be one of:
     * \* `member` - a normal member of the team.
     * \* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.
     */
    role?: "member" | "maintainer";
  };
}
export interface Response$teams$add$or$update$membership$for$user$in$org$Status$200 {
  "application/json": Schemas.team$membership;
}
export interface Parameter$teams$remove$membership$for$user$in$org {
  org: Parameters.org;
  /** team_slug parameter */
  team_slug: Parameters.team$slug;
  username: Parameters.username;
}
export interface Parameter$teams$list$projects$in$org {
  org: Parameters.org;
  /** team_slug parameter */
  team_slug: Parameters.team$slug;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$teams$list$projects$in$org$Status$200 {
  "application/json": Schemas.team$project[];
}
export interface Parameter$teams$check$permissions$for$project$in$org {
  org: Parameters.org;
  /** team_slug parameter */
  team_slug: Parameters.team$slug;
  project_id: Parameters.project$id;
}
export interface Response$teams$check$permissions$for$project$in$org$Status$200 {
  "application/json": Schemas.team$project;
}
export interface Parameter$teams$add$or$update$project$permissions$in$org {
  org: Parameters.org;
  /** team_slug parameter */
  team_slug: Parameters.team$slug;
  project_id: Parameters.project$id;
}
export interface RequestBody$teams$add$or$update$project$permissions$in$org {
  "application/json": {
    /**
     * The permission to grant to the team for this project. Can be one of:
     * \* `read` - team members can read, but not write to or administer this project.
     * \* `write` - team members can read and write, but not administer this project.
     * \* `admin` - team members can read, write and administer this project.
     * Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#http-verbs)."
     */
    permission?: "read" | "write" | "admin";
  } | null;
}
export interface Response$teams$add$or$update$project$permissions$in$org$Status$403 {
  "application/json": {
    message?: string;
    documentation_url?: string;
  };
}
export interface Parameter$teams$remove$project$in$org {
  org: Parameters.org;
  /** team_slug parameter */
  team_slug: Parameters.team$slug;
  project_id: Parameters.project$id;
}
export interface Parameter$teams$list$repos$in$org {
  org: Parameters.org;
  /** team_slug parameter */
  team_slug: Parameters.team$slug;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$teams$list$repos$in$org$Status$200 {
  "application/json": Schemas.minimal$repository[];
}
export interface Parameter$teams$check$permissions$for$repo$in$org {
  org: Parameters.org;
  /** team_slug parameter */
  team_slug: Parameters.team$slug;
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface Response$teams$check$permissions$for$repo$in$org$Status$200 {
  "application/json": Schemas.team$repository;
}
export interface Parameter$teams$add$or$update$repo$permissions$in$org {
  org: Parameters.org;
  /** team_slug parameter */
  team_slug: Parameters.team$slug;
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface RequestBody$teams$add$or$update$repo$permissions$in$org {
  "application/json": {
    /**
     * The permission to grant the team on this repository. Can be one of:
     * \* `pull` - team members can pull, but not push to or administer this repository.
     * \* `push` - team members can pull and push, but not administer this repository.
     * \* `admin` - team members can pull, push and administer this repository.
     * \* `maintain` - team members can manage the repository without access to sensitive or destructive actions. Recommended for project managers. Only applies to repositories owned by organizations.
     * \* `triage` - team members can proactively manage issues and pull requests without write access. Recommended for contributors who triage a repository. Only applies to repositories owned by organizations.
     *
     * If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
     */
    permission?: "pull" | "push" | "admin" | "maintain" | "triage";
  };
}
export interface Parameter$teams$remove$repo$in$org {
  org: Parameters.org;
  /** team_slug parameter */
  team_slug: Parameters.team$slug;
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface Parameter$teams$list$child$in$org {
  org: Parameters.org;
  /** team_slug parameter */
  team_slug: Parameters.team$slug;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$teams$list$child$in$org$Status$200 {
  "application/json": Schemas.team[];
}
export interface Parameter$projects$get$card {
  /** card_id parameter */
  card_id: Parameters.card$id;
}
export interface Response$projects$get$card$Status$200 {
  "application/json": Schemas.project$card;
}
export type Response$projects$get$card$Status$401 = Responses.requires_authentication.Content;
export type Response$projects$get$card$Status$403 = Responses.forbidden.Content;
export type Response$projects$get$card$Status$404 = Responses.not_found.Content;
export interface Parameter$projects$delete$card {
  /** card_id parameter */
  card_id: Parameters.card$id;
}
export type Response$projects$delete$card$Status$401 = Responses.requires_authentication.Content;
export interface Response$projects$delete$card$Status$403 {
  "application/json": {
    message?: string;
    documentation_url?: string;
    errors?: string[];
  };
}
export type Response$projects$delete$card$Status$404 = Responses.not_found.Content;
export interface Parameter$projects$update$card {
  /** card_id parameter */
  card_id: Parameters.card$id;
}
export interface RequestBody$projects$update$card {
  "application/json": {
    /** The project card's note */
    note?: string | null;
    /** Whether or not the card is archived */
    archived?: boolean;
  };
}
export interface Response$projects$update$card$Status$200 {
  "application/json": Schemas.project$card;
}
export type Response$projects$update$card$Status$401 = Responses.requires_authentication.Content;
export type Response$projects$update$card$Status$403 = Responses.forbidden.Content;
export type Response$projects$update$card$Status$404 = Responses.not_found.Content;
export type Response$projects$update$card$Status$422 = Responses.validation_failed_simple.Content;
export interface Parameter$projects$move$card {
  /** card_id parameter */
  card_id: Parameters.card$id;
}
export interface RequestBody$projects$move$card {
  "application/json": {
    /** The position of the card in a column. Can be one of: `top`, `bottom`, or `after:<card_id>` to place after the specified card. */
    position: string;
    /** The unique identifier of the column the card should be moved to */
    column_id?: number;
  };
}
export interface Response$projects$move$card$Status$201 {
  "application/json": {};
}
export type Response$projects$move$card$Status$401 = Responses.requires_authentication.Content;
export interface Response$projects$move$card$Status$403 {
  "application/json": {
    message?: string;
    documentation_url?: string;
    errors?: {
      code?: string;
      message?: string;
      resource?: string;
      field?: string;
    }[];
  };
}
export type Response$projects$move$card$Status$422 = Responses.validation_failed.Content;
export interface Response$projects$move$card$Status$503 {
  "application/json": {
    code?: string;
    message?: string;
    documentation_url?: string;
    errors?: {
      code?: string;
      message?: string;
    }[];
  };
}
export interface Parameter$projects$get$column {
  /** column_id parameter */
  column_id: Parameters.column$id;
}
export interface Response$projects$get$column$Status$200 {
  "application/json": Schemas.project$column;
}
export type Response$projects$get$column$Status$401 = Responses.requires_authentication.Content;
export type Response$projects$get$column$Status$403 = Responses.forbidden.Content;
export type Response$projects$get$column$Status$404 = Responses.not_found.Content;
export interface Parameter$projects$delete$column {
  /** column_id parameter */
  column_id: Parameters.column$id;
}
export type Response$projects$delete$column$Status$401 = Responses.requires_authentication.Content;
export type Response$projects$delete$column$Status$403 = Responses.forbidden.Content;
export interface Parameter$projects$update$column {
  /** column_id parameter */
  column_id: Parameters.column$id;
}
export interface RequestBody$projects$update$column {
  "application/json": {
    /** Name of the project column */
    name: string;
  };
}
export interface Response$projects$update$column$Status$200 {
  "application/json": Schemas.project$column;
}
export type Response$projects$update$column$Status$401 = Responses.requires_authentication.Content;
export type Response$projects$update$column$Status$403 = Responses.forbidden.Content;
export interface Parameter$projects$list$cards {
  /** column_id parameter */
  column_id: Parameters.column$id;
  /** Filters the project cards that are returned by the card's state. Can be one of `all`,`archived`, or `not_archived`. */
  archived_state?: "all" | "archived" | "not_archived";
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$projects$list$cards$Status$200 {
  "application/json": Schemas.project$card[];
}
export type Response$projects$list$cards$Status$401 = Responses.requires_authentication.Content;
export type Response$projects$list$cards$Status$403 = Responses.forbidden.Content;
export interface Parameter$projects$create$card {
  /** column_id parameter */
  column_id: Parameters.column$id;
}
export interface RequestBody$projects$create$card {
  "application/json":
    | {
        /** The project card's note */
        note: string | null;
      }
    | {
        /** The unique identifier of the content associated with the card */
        content_id: number;
        /** The piece of content associated with the card */
        content_type: string;
      };
}
export interface Response$projects$create$card$Status$201 {
  "application/json": Schemas.project$card;
}
export type Response$projects$create$card$Status$401 = Responses.requires_authentication.Content;
export type Response$projects$create$card$Status$403 = Responses.forbidden.Content;
export interface Response$projects$create$card$Status$422 {
  "application/json": Schemas.validation$error | Schemas.validation$error$simple;
}
export interface Response$projects$create$card$Status$503 {
  "application/json": {
    code?: string;
    message?: string;
    documentation_url?: string;
    errors?: {
      code?: string;
      message?: string;
    }[];
  };
}
export interface Parameter$projects$move$column {
  /** column_id parameter */
  column_id: Parameters.column$id;
}
export interface RequestBody$projects$move$column {
  "application/json": {
    /** The position of the column in a project. Can be one of: `first`, `last`, or `after:<column_id>` to place after the specified column. */
    position: string;
  };
}
export interface Response$projects$move$column$Status$201 {
  "application/json": {};
}
export type Response$projects$move$column$Status$401 = Responses.requires_authentication.Content;
export type Response$projects$move$column$Status$403 = Responses.forbidden.Content;
export type Response$projects$move$column$Status$422 = Responses.validation_failed_simple.Content;
export interface Parameter$projects$get {
  project_id: Parameters.project$id;
}
export interface Response$projects$get$Status$200 {
  "application/json": Schemas.project;
}
export type Response$projects$get$Status$401 = Responses.requires_authentication.Content;
export type Response$projects$get$Status$403 = Responses.forbidden.Content;
export interface Parameter$projects$delete {
  project_id: Parameters.project$id;
}
export type Response$projects$delete$Status$401 = Responses.requires_authentication.Content;
export interface Response$projects$delete$Status$403 {
  "application/json": {
    message?: string;
    documentation_url?: string;
    errors?: string[];
  };
}
export type Response$projects$delete$Status$404 = Responses.not_found.Content;
export type Response$projects$delete$Status$410 = Responses.gone.Content;
export interface Parameter$projects$update {
  project_id: Parameters.project$id;
}
export interface RequestBody$projects$update {
  "application/json": {
    /** Name of the project */
    name?: string;
    /** Body of the project */
    body?: string | null;
    /** State of the project; either 'open' or 'closed' */
    state?: string;
    /** The baseline permission that all organization members have on this project */
    organization_permission?: "read" | "write" | "admin" | "none";
    /** Whether or not this project can be seen by everyone. */
    private?: boolean;
  };
}
export interface Response$projects$update$Status$200 {
  "application/json": Schemas.project;
}
export type Response$projects$update$Status$401 = Responses.requires_authentication.Content;
export interface Response$projects$update$Status$403 {
  "application/json": {
    message?: string;
    documentation_url?: string;
    errors?: string[];
  };
}
export type Response$projects$update$Status$410 = Responses.gone.Content;
export type Response$projects$update$Status$422 = Responses.validation_failed_simple.Content;
export interface Parameter$projects$list$collaborators {
  project_id: Parameters.project$id;
  /**
   * Filters the collaborators by their affiliation. Can be one of:
   * \* `outside`: Outside collaborators of a project that are not a member of the project's organization.
   * \* `direct`: Collaborators with permissions to a project, regardless of organization membership status.
   * \* `all`: All collaborators the authenticated user can see.
   */
  affiliation?: "outside" | "direct" | "all";
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$projects$list$collaborators$Status$200 {
  "application/json": Schemas.simple$user[];
}
export type Response$projects$list$collaborators$Status$401 = Responses.requires_authentication.Content;
export type Response$projects$list$collaborators$Status$403 = Responses.forbidden.Content;
export type Response$projects$list$collaborators$Status$404 = Responses.not_found.Content;
export type Response$projects$list$collaborators$Status$422 = Responses.validation_failed.Content;
export interface Parameter$projects$add$collaborator {
  project_id: Parameters.project$id;
  username: Parameters.username;
}
export interface RequestBody$projects$add$collaborator {
  "application/json": {
    /** The permission to grant the collaborator. */
    permission?: "read" | "write" | "admin";
  } | null;
}
export type Response$projects$add$collaborator$Status$401 = Responses.requires_authentication.Content;
export type Response$projects$add$collaborator$Status$403 = Responses.forbidden.Content;
export type Response$projects$add$collaborator$Status$404 = Responses.not_found.Content;
export type Response$projects$add$collaborator$Status$422 = Responses.validation_failed.Content;
export interface Parameter$projects$remove$collaborator {
  project_id: Parameters.project$id;
  username: Parameters.username;
}
export type Response$projects$remove$collaborator$Status$401 = Responses.requires_authentication.Content;
export type Response$projects$remove$collaborator$Status$403 = Responses.forbidden.Content;
export type Response$projects$remove$collaborator$Status$404 = Responses.not_found.Content;
export type Response$projects$remove$collaborator$Status$422 = Responses.validation_failed.Content;
export interface Parameter$projects$get$permission$for$user {
  project_id: Parameters.project$id;
  username: Parameters.username;
}
export interface Response$projects$get$permission$for$user$Status$200 {
  "application/json": Schemas.project$collaborator$permission;
}
export type Response$projects$get$permission$for$user$Status$401 = Responses.requires_authentication.Content;
export type Response$projects$get$permission$for$user$Status$403 = Responses.forbidden.Content;
export type Response$projects$get$permission$for$user$Status$404 = Responses.not_found.Content;
export type Response$projects$get$permission$for$user$Status$422 = Responses.validation_failed.Content;
export interface Parameter$projects$list$columns {
  project_id: Parameters.project$id;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$projects$list$columns$Status$200 {
  "application/json": Schemas.project$column[];
}
export type Response$projects$list$columns$Status$401 = Responses.requires_authentication.Content;
export type Response$projects$list$columns$Status$403 = Responses.forbidden.Content;
export interface Parameter$projects$create$column {
  project_id: Parameters.project$id;
}
export interface RequestBody$projects$create$column {
  "application/json": {
    /** Name of the project column */
    name: string;
  };
}
export interface Response$projects$create$column$Status$201 {
  "application/json": Schemas.project$column;
}
export type Response$projects$create$column$Status$401 = Responses.requires_authentication.Content;
export type Response$projects$create$column$Status$403 = Responses.forbidden.Content;
export type Response$projects$create$column$Status$422 = Responses.validation_failed_simple.Content;
export interface Response$rate$limit$get$Status$200 {
  "application/json": Schemas.rate$limit$overview;
}
export type Response$rate$limit$get$Status$404 = Responses.not_found.Content;
export interface Parameter$reactions$delete$legacy {
  reaction_id: Parameters.reaction$id;
}
export type Response$reactions$delete$legacy$Status$401 = Responses.requires_authentication.Content;
export type Response$reactions$delete$legacy$Status$403 = Responses.forbidden.Content;
export type Response$reactions$delete$legacy$Status$410 = Responses.gone.Content;
export interface Parameter$repos$get {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface Response$repos$get$Status$200 {
  "application/json": Schemas.full$repository;
}
export type Response$repos$get$Status$301 = Responses.moved_permanently.Content;
export type Response$repos$get$Status$403 = Responses.forbidden.Content;
export type Response$repos$get$Status$404 = Responses.not_found.Content;
export interface Parameter$repos$delete {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export type Response$repos$delete$Status$307 = Responses.temporary_redirect.Content;
export interface Response$repos$delete$Status$403 {
  "application/json": {
    message?: string;
    documentation_url?: string;
  };
}
export type Response$repos$delete$Status$404 = Responses.not_found.Content;
export interface Parameter$repos$update {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface RequestBody$repos$update {
  "application/json": {
    /** The name of the repository. */
    name?: string;
    /** A short description of the repository. */
    description?: string;
    /** A URL with more information about the repository. */
    homepage?: string;
    /**
     * Either `true` to make the repository private or `false` to make it public. Default: `false`.
     * **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private. **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
     */
    private?: boolean;
    /** Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`." */
    visibility?: "public" | "private" | "internal";
    /** Specify which security and analysis features to enable or disable. For example, to enable GitHub Advanced Security, use this data in the body of the PATCH request: `{"security_and_analysis": {"advanced_security": {"status": "enabled"}}}`. If you have admin permissions for a private repository covered by an Advanced Security license, you can check which security and analysis features are currently enabled by using a `GET /repos/{owner}/{repo}` request. */
    security_and_analysis?: {
      /** Use the `status` property to enable or disable GitHub Advanced Security for this repository. For more information, see "[About GitHub Advanced Security](/github/getting-started-with-github/learning-about-github/about-github-advanced-security)." */
      advanced_security?: {
        /** Can be `enabled` or `disabled`. */
        status?: string;
      };
      /** Use the `status` property to enable or disable secret scanning for this repository. For more information, see "[About secret scanning](/code-security/secret-security/about-secret-scanning)." */
      secret_scanning?: {
        /** Can be `enabled` or `disabled`. */
        status?: string;
      };
      /** Use the `status` property to enable or disable secret scanning push protection for this repository. For more information, see "[About push protection](/enterprise-cloud@latest/early-access/code-security/secret-scanning/protecting-pushes-with-secret-scanning)." */
      secret_scanning_push_protection?: {
        /** Can be `enabled` or `disabled`. */
        status?: string;
      };
    } | null;
    /** Either `true` to enable issues for this repository or `false` to disable them. */
    has_issues?: boolean;
    /** Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error. */
    has_projects?: boolean;
    /** Either `true` to enable the wiki for this repository or `false` to disable it. */
    has_wiki?: boolean;
    /** Either `true` to make this repo available as a template repository or `false` to prevent it. */
    is_template?: boolean;
    /** Updates the default branch for this repository. */
    default_branch?: string;
    /** Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging. */
    allow_squash_merge?: boolean;
    /** Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits. */
    allow_merge_commit?: boolean;
    /** Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging. */
    allow_rebase_merge?: boolean;
    /** Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge. */
    allow_auto_merge?: boolean;
    /** Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. */
    delete_branch_on_merge?: boolean;
    /** `true` to archive this repository. **Note**: You cannot unarchive repositories through the API. */
    archived?: boolean;
    /** Either `true` to allow private forks, or `false` to prevent private forks. */
    allow_forking?: boolean;
  };
}
export interface Response$repos$update$Status$200 {
  "application/json": Schemas.full$repository;
}
export type Response$repos$update$Status$307 = Responses.temporary_redirect.Content;
export type Response$repos$update$Status$403 = Responses.forbidden.Content;
export type Response$repos$update$Status$404 = Responses.not_found.Content;
export type Response$repos$update$Status$422 = Responses.validation_failed.Content;
export interface Parameter$actions$list$artifacts$for$repo {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$actions$list$artifacts$for$repo$Status$200 {
  "application/json": {
    total_count: number;
    artifacts: Schemas.artifact[];
  };
}
export interface Parameter$actions$get$artifact {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** artifact_id parameter */
  artifact_id: Parameters.artifact$id;
}
export interface Response$actions$get$artifact$Status$200 {
  "application/json": Schemas.artifact;
}
export interface Parameter$actions$delete$artifact {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** artifact_id parameter */
  artifact_id: Parameters.artifact$id;
}
export interface Parameter$actions$download$artifact {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** artifact_id parameter */
  artifact_id: Parameters.artifact$id;
  archive_format: string;
}
export interface Parameter$actions$get$job$for$workflow$run {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** job_id parameter */
  job_id: Parameters.job$id;
}
export interface Response$actions$get$job$for$workflow$run$Status$200 {
  "application/json": Schemas.job;
}
export interface Parameter$actions$download$job$logs$for$workflow$run {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** job_id parameter */
  job_id: Parameters.job$id;
}
export interface Parameter$actions$get$github$actions$permissions$repository {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface Response$actions$get$github$actions$permissions$repository$Status$200 {
  "application/json": Schemas.actions$repository$permissions;
}
export interface Parameter$actions$set$github$actions$permissions$repository {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface RequestBody$actions$set$github$actions$permissions$repository {
  "application/json": {
    enabled: Schemas.actions$enabled;
    allowed_actions?: Schemas.allowed$actions;
  };
}
export interface Parameter$actions$get$allowed$actions$repository {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface Response$actions$get$allowed$actions$repository$Status$200 {
  "application/json": Schemas.selected$actions;
}
export interface Parameter$actions$set$allowed$actions$repository {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface RequestBody$actions$set$allowed$actions$repository {
  "application/json": Schemas.selected$actions;
}
export interface Parameter$actions$list$self$hosted$runners$for$repo {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$actions$list$self$hosted$runners$for$repo$Status$200 {
  "application/json": {
    total_count: number;
    runners: Schemas.runner[];
  };
}
export interface Parameter$actions$list$runner$applications$for$repo {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface Response$actions$list$runner$applications$for$repo$Status$200 {
  "application/json": Schemas.runner$application[];
}
export interface Parameter$actions$create$registration$token$for$repo {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface Response$actions$create$registration$token$for$repo$Status$201 {
  "application/json": Schemas.authentication$token;
}
export interface Parameter$actions$create$remove$token$for$repo {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface Response$actions$create$remove$token$for$repo$Status$201 {
  "application/json": Schemas.authentication$token;
}
export interface Parameter$actions$get$self$hosted$runner$for$repo {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** Unique identifier of the self-hosted runner. */
  runner_id: Parameters.runner$id;
}
export interface Response$actions$get$self$hosted$runner$for$repo$Status$200 {
  "application/json": Schemas.runner;
}
export interface Parameter$actions$delete$self$hosted$runner$from$repo {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** Unique identifier of the self-hosted runner. */
  runner_id: Parameters.runner$id;
}
export interface Parameter$actions$list$labels$for$self$hosted$runner$for$repo {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** Unique identifier of the self-hosted runner. */
  runner_id: Parameters.runner$id;
}
export type Response$actions$list$labels$for$self$hosted$runner$for$repo$Status$200 = Responses.actions_runner_labels.Content;
export type Response$actions$list$labels$for$self$hosted$runner$for$repo$Status$404 = Responses.not_found.Content;
export interface Parameter$actions$set$custom$labels$for$self$hosted$runner$for$repo {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** Unique identifier of the self-hosted runner. */
  runner_id: Parameters.runner$id;
}
export interface RequestBody$actions$set$custom$labels$for$self$hosted$runner$for$repo {
  "application/json": {
    /** The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels. */
    labels: string[];
  };
}
export type Response$actions$set$custom$labels$for$self$hosted$runner$for$repo$Status$200 = Responses.actions_runner_labels.Content;
export type Response$actions$set$custom$labels$for$self$hosted$runner$for$repo$Status$404 = Responses.not_found.Content;
export type Response$actions$set$custom$labels$for$self$hosted$runner$for$repo$Status$422 = Responses.validation_failed_simple.Content;
export interface Parameter$actions$add$custom$labels$to$self$hosted$runner$for$repo {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** Unique identifier of the self-hosted runner. */
  runner_id: Parameters.runner$id;
}
export interface RequestBody$actions$add$custom$labels$to$self$hosted$runner$for$repo {
  "application/json": {
    /** The names of the custom labels to add to the runner. */
    labels: string[];
  };
}
export type Response$actions$add$custom$labels$to$self$hosted$runner$for$repo$Status$200 = Responses.actions_runner_labels.Content;
export type Response$actions$add$custom$labels$to$self$hosted$runner$for$repo$Status$404 = Responses.not_found.Content;
export type Response$actions$add$custom$labels$to$self$hosted$runner$for$repo$Status$422 = Responses.validation_failed_simple.Content;
export interface Parameter$actions$remove$all$custom$labels$from$self$hosted$runner$for$repo {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** Unique identifier of the self-hosted runner. */
  runner_id: Parameters.runner$id;
}
export type Response$actions$remove$all$custom$labels$from$self$hosted$runner$for$repo$Status$200 =
  Responses.actions_runner_labels_readonly.Content;
export type Response$actions$remove$all$custom$labels$from$self$hosted$runner$for$repo$Status$404 = Responses.not_found.Content;
export interface Parameter$actions$remove$custom$label$from$self$hosted$runner$for$repo {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** Unique identifier of the self-hosted runner. */
  runner_id: Parameters.runner$id;
  /** The name of a self-hosted runner's custom label. */
  name: Parameters.runner$label$name;
}
export type Response$actions$remove$custom$label$from$self$hosted$runner$for$repo$Status$200 = Responses.actions_runner_labels.Content;
export type Response$actions$remove$custom$label$from$self$hosted$runner$for$repo$Status$404 = Responses.not_found.Content;
export type Response$actions$remove$custom$label$from$self$hosted$runner$for$repo$Status$422 = Responses.validation_failed_simple.Content;
export interface Parameter$actions$list$workflow$runs$for$repo {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run. */
  actor?: Parameters.actor;
  /** Returns workflow runs associated with a branch. Use the name of the branch of the `push`. */
  branch?: Parameters.workflow$run$branch;
  /** Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)." */
  event?: Parameters.event;
  /** Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. For a list of the possible `status` and `conclusion` options, see "[Create a check run](https://docs.github.com/enterprise-server@3.4/rest/reference/checks#create-a-check-run)." */
  status?: Parameters.workflow$run$status;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
  /** Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/enterprise-server@3.4/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)." */
  created?: Parameters.created;
  /** If `true` pull requests are omitted from the response (empty array). */
  exclude_pull_requests?: Parameters.exclude$pull$requests;
}
export interface Response$actions$list$workflow$runs$for$repo$Status$200 {
  "application/json": {
    total_count: number;
    workflow_runs: Schemas.workflow$run[];
  };
}
export interface Parameter$actions$get$workflow$run {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The id of the workflow run. */
  run_id: Parameters.run$id;
  /** If `true` pull requests are omitted from the response (empty array). */
  exclude_pull_requests?: Parameters.exclude$pull$requests;
}
export interface Response$actions$get$workflow$run$Status$200 {
  "application/json": Schemas.workflow$run;
}
export interface Parameter$actions$delete$workflow$run {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The id of the workflow run. */
  run_id: Parameters.run$id;
}
export interface Parameter$actions$get$reviews$for$run {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The id of the workflow run. */
  run_id: Parameters.run$id;
}
export interface Response$actions$get$reviews$for$run$Status$200 {
  "application/json": Schemas.environment$approvals[];
}
export interface Parameter$actions$list$workflow$run$artifacts {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The id of the workflow run. */
  run_id: Parameters.run$id;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$actions$list$workflow$run$artifacts$Status$200 {
  "application/json": {
    total_count: number;
    artifacts: Schemas.artifact[];
  };
}
export interface Parameter$actions$cancel$workflow$run {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The id of the workflow run. */
  run_id: Parameters.run$id;
}
export interface Response$actions$cancel$workflow$run$Status$202 {
  "application/json": {};
}
export type Response$actions$cancel$workflow$run$Status$409 = Responses.conflict.Content;
export interface Parameter$actions$list$jobs$for$workflow$run {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The id of the workflow run. */
  run_id: Parameters.run$id;
  /**
   * Filters jobs by their `completed_at` timestamp. Can be one of:
   * \* `latest`: Returns jobs from the most recent execution of the workflow run.
   * \* `all`: Returns all jobs for a workflow run, including from old executions of the workflow run.
   */
  filter?: "latest" | "all";
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$actions$list$jobs$for$workflow$run$Status$200 {
  "application/json": {
    total_count: number;
    jobs: Schemas.job[];
  };
}
export interface Parameter$actions$download$workflow$run$logs {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The id of the workflow run. */
  run_id: Parameters.run$id;
}
export interface Parameter$actions$delete$workflow$run$logs {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The id of the workflow run. */
  run_id: Parameters.run$id;
}
export type Response$actions$delete$workflow$run$logs$Status$403 = Responses.forbidden.Content;
export type Response$actions$delete$workflow$run$logs$Status$500 = Responses.internal_error.Content;
export interface Parameter$actions$get$pending$deployments$for$run {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The id of the workflow run. */
  run_id: Parameters.run$id;
}
export interface Response$actions$get$pending$deployments$for$run$Status$200 {
  "application/json": Schemas.pending$deployment[];
}
export interface Parameter$actions$review$pending$deployments$for$run {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The id of the workflow run. */
  run_id: Parameters.run$id;
}
export interface RequestBody$actions$review$pending$deployments$for$run {
  "application/json": {
    /** The list of environment ids to approve or reject */
    environment_ids: number[];
    /** Whether to approve or reject deployment to the specified environments. Must be one of: `approved` or `rejected` */
    state: "approved" | "rejected";
    /** A comment to accompany the deployment review */
    comment: string;
  };
}
export interface Response$actions$review$pending$deployments$for$run$Status$200 {
  "application/json": Schemas.deployment[];
}
export interface Parameter$actions$re$run$workflow {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The id of the workflow run. */
  run_id: Parameters.run$id;
}
export interface Response$actions$re$run$workflow$Status$201 {
  "application/json": {};
}
export interface Parameter$actions$list$repo$secrets {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$actions$list$repo$secrets$Status$200 {
  "application/json": {
    total_count: number;
    secrets: Schemas.actions$secret[];
  };
}
export interface Parameter$actions$get$repo$public$key {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface Response$actions$get$repo$public$key$Status$200 {
  "application/json": Schemas.actions$public$key;
}
export interface Parameter$actions$get$repo$secret {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** secret_name parameter */
  secret_name: Parameters.secret$name;
}
export interface Response$actions$get$repo$secret$Status$200 {
  "application/json": Schemas.actions$secret;
}
export interface Parameter$actions$create$or$update$repo$secret {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** secret_name parameter */
  secret_name: Parameters.secret$name;
}
export interface RequestBody$actions$create$or$update$repo$secret {
  "application/json": {
    /** Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/enterprise-server@3.4/rest/reference/actions#get-a-repository-public-key) endpoint. */
    encrypted_value?: string;
    /** ID of the key you used to encrypt the secret. */
    key_id?: string;
  };
}
export interface Response$actions$create$or$update$repo$secret$Status$201 {
  "application/json": {};
}
export interface Parameter$actions$delete$repo$secret {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** secret_name parameter */
  secret_name: Parameters.secret$name;
}
export interface Parameter$actions$list$repo$workflows {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$actions$list$repo$workflows$Status$200 {
  "application/json": {
    total_count: number;
    workflows: Schemas.workflow[];
  };
}
export interface Parameter$actions$get$workflow {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The ID of the workflow. You can also pass the workflow file name as a string. */
  workflow_id: Parameters.workflow$id;
}
export interface Response$actions$get$workflow$Status$200 {
  "application/json": Schemas.workflow;
}
export interface Parameter$actions$disable$workflow {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The ID of the workflow. You can also pass the workflow file name as a string. */
  workflow_id: Parameters.workflow$id;
}
export interface Parameter$actions$create$workflow$dispatch {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The ID of the workflow. You can also pass the workflow file name as a string. */
  workflow_id: Parameters.workflow$id;
}
export interface RequestBody$actions$create$workflow$dispatch {
  "application/json": {
    /** The git reference for the workflow. The reference can be a branch or tag name. */
    ref: string;
    /** Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted. */
    inputs?: {
      [key: string]: string;
    };
  };
}
export interface Parameter$actions$enable$workflow {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The ID of the workflow. You can also pass the workflow file name as a string. */
  workflow_id: Parameters.workflow$id;
}
export interface Parameter$actions$list$workflow$runs {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The ID of the workflow. You can also pass the workflow file name as a string. */
  workflow_id: Parameters.workflow$id;
  /** Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run. */
  actor?: Parameters.actor;
  /** Returns workflow runs associated with a branch. Use the name of the branch of the `push`. */
  branch?: Parameters.workflow$run$branch;
  /** Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)." */
  event?: Parameters.event;
  /** Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. For a list of the possible `status` and `conclusion` options, see "[Create a check run](https://docs.github.com/enterprise-server@3.4/rest/reference/checks#create-a-check-run)." */
  status?: Parameters.workflow$run$status;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
  /** Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/enterprise-server@3.4/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)." */
  created?: Parameters.created;
  /** If `true` pull requests are omitted from the response (empty array). */
  exclude_pull_requests?: Parameters.exclude$pull$requests;
}
export interface Response$actions$list$workflow$runs$Status$200 {
  "application/json": {
    total_count: number;
    workflow_runs: Schemas.workflow$run[];
  };
}
export interface Parameter$issues$list$assignees {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$issues$list$assignees$Status$200 {
  "application/json": Schemas.simple$user[];
}
export type Response$issues$list$assignees$Status$404 = Responses.not_found.Content;
export interface Parameter$issues$check$user$can$be$assigned {
  owner: Parameters.owner;
  repo: Parameters.repo;
  assignee: string;
}
export interface Response$issues$check$user$can$be$assigned$Status$404 {
  "application/json": Schemas.basic$error;
}
export interface Parameter$repos$list$autolinks {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$repos$list$autolinks$Status$200 {
  "application/json": Schemas.autolink[];
}
export interface Parameter$repos$create$autolink {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface RequestBody$repos$create$autolink {
  "application/json": {
    /** The prefix appended by a number will generate a link any time it is found in an issue, pull request, or commit. */
    key_prefix: string;
    /** The URL must contain <num> for the reference number. */
    url_template: string;
  };
}
export interface Response$repos$create$autolink$Status$201 {
  "application/json": Schemas.autolink;
}
export type Response$repos$create$autolink$Status$422 = Responses.validation_failed.Content;
export interface Parameter$repos$get$autolink {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** autolink_id parameter */
  autolink_id: Parameters.autolink$id;
}
export interface Response$repos$get$autolink$Status$200 {
  "application/json": Schemas.autolink;
}
export type Response$repos$get$autolink$Status$404 = Responses.not_found.Content;
export interface Parameter$repos$delete$autolink {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** autolink_id parameter */
  autolink_id: Parameters.autolink$id;
}
export type Response$repos$delete$autolink$Status$404 = Responses.not_found.Content;
export interface Parameter$repos$list$branches {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** Setting to `true` returns only protected branches. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches. */
  protected?: boolean;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$repos$list$branches$Status$200 {
  "application/json": Schemas.short$branch[];
}
export type Response$repos$list$branches$Status$404 = Responses.not_found.Content;
export interface Parameter$repos$get$branch {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The name of the branch. */
  branch: Parameters.branch;
}
export interface Response$repos$get$branch$Status$200 {
  "application/json": Schemas.branch$with$protection;
}
export type Response$repos$get$branch$Status$301 = Responses.moved_permanently.Content;
export type Response$repos$get$branch$Status$404 = Responses.not_found.Content;
export type Response$repos$get$branch$Status$415 = Responses.preview_header_missing.Content;
export interface Parameter$repos$get$branch$protection {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The name of the branch. */
  branch: Parameters.branch;
}
export interface Response$repos$get$branch$protection$Status$200 {
  "application/json": Schemas.branch$protection;
}
export type Response$repos$get$branch$protection$Status$404 = Responses.not_found.Content;
export interface Parameter$repos$update$branch$protection {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The name of the branch. */
  branch: Parameters.branch;
}
export interface RequestBody$repos$update$branch$protection {
  "application/json": {
    /** Require status checks to pass before merging. Set to `null` to disable. */
    required_status_checks: {
      /** Require branches to be up to date before merging. */
      strict: boolean;
      /** **Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control. */
      contexts: string[];
      /** The list of status checks to require in order to merge into this branch. */
      checks?: {
        /** The name of the required check */
        context: string;
        /** The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status. */
        app_id?: number;
      }[];
    } | null;
    /** Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable. */
    enforce_admins: boolean | null;
    /** Require at least one approving review on a pull request, before merging. Set to `null` to disable. */
    required_pull_request_reviews: {
      /** Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories. */
      dismissal_restrictions?: {
        /** The list of user `login`s with dismissal access */
        users?: string[];
        /** The list of team `slug`s with dismissal access */
        teams?: string[];
      };
      /** Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit. */
      dismiss_stale_reviews?: boolean;
      /** Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) review them. */
      require_code_owner_reviews?: boolean;
      /** Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers. */
      required_approving_review_count?: number;
      /** Allow specific users or teams to bypass pull request requirements. */
      bypass_pull_request_allowances?: {
        /** The list of user `login`s allowed to bypass pull request requirements. */
        users?: string[];
        /** The list of team `slug`s allowed to bypass pull request requirements. */
        teams?: string[];
      };
    } | null;
    /** Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable. */
    restrictions: {
      /** The list of user `login`s with push access */
      users: string[];
      /** The list of team `slug`s with push access */
      teams: string[];
      /** The list of app `slug`s with push access */
      apps?: string[];
    } | null;
    /** Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see "[Requiring a linear commit history](https://docs.github.com/github/administering-a-repository/requiring-a-linear-commit-history)" in the GitHub Help documentation. */
    required_linear_history?: boolean;
    /** Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation." */
    allow_force_pushes?: boolean | null;
    /** Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation. */
    allow_deletions?: boolean;
    /** Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`. */
    required_conversation_resolution?: boolean;
  };
}
export interface Response$repos$update$branch$protection$Status$200 {
  "application/json": Schemas.protected$branch;
}
export type Response$repos$update$branch$protection$Status$403 = Responses.forbidden.Content;
export type Response$repos$update$branch$protection$Status$404 = Responses.not_found.Content;
export type Response$repos$update$branch$protection$Status$422 = Responses.validation_failed_simple.Content;
export interface Parameter$repos$delete$branch$protection {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The name of the branch. */
  branch: Parameters.branch;
}
export type Response$repos$delete$branch$protection$Status$403 = Responses.forbidden.Content;
export interface Parameter$repos$get$admin$branch$protection {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The name of the branch. */
  branch: Parameters.branch;
}
export interface Response$repos$get$admin$branch$protection$Status$200 {
  "application/json": Schemas.protected$branch$admin$enforced;
}
export interface Parameter$repos$set$admin$branch$protection {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The name of the branch. */
  branch: Parameters.branch;
}
export interface Response$repos$set$admin$branch$protection$Status$200 {
  "application/json": Schemas.protected$branch$admin$enforced;
}
export interface Parameter$repos$delete$admin$branch$protection {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The name of the branch. */
  branch: Parameters.branch;
}
export type Response$repos$delete$admin$branch$protection$Status$404 = Responses.not_found.Content;
export interface Parameter$repos$get$pull$request$review$protection {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The name of the branch. */
  branch: Parameters.branch;
}
export interface Response$repos$get$pull$request$review$protection$Status$200 {
  "application/json": Schemas.protected$branch$pull$request$review;
}
export interface Parameter$repos$delete$pull$request$review$protection {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The name of the branch. */
  branch: Parameters.branch;
}
export type Response$repos$delete$pull$request$review$protection$Status$404 = Responses.not_found.Content;
export interface Parameter$repos$update$pull$request$review$protection {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The name of the branch. */
  branch: Parameters.branch;
}
export interface RequestBody$repos$update$pull$request$review$protection {
  "application/json": {
    /** Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories. */
    dismissal_restrictions?: {
      /** The list of user `login`s with dismissal access */
      users?: string[];
      /** The list of team `slug`s with dismissal access */
      teams?: string[];
    };
    /** Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit. */
    dismiss_stale_reviews?: boolean;
    /** Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) have reviewed. */
    require_code_owner_reviews?: boolean;
    /** Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers. */
    required_approving_review_count?: number;
    /** Allow specific users or teams to bypass pull request requirements. */
    bypass_pull_request_allowances?: {
      /** The list of user `login`s allowed to bypass pull request requirements. */
      users?: string[];
      /** The list of team `slug`s allowed to bypass pull request requirements. */
      teams?: string[];
    };
  };
}
export interface Response$repos$update$pull$request$review$protection$Status$200 {
  "application/json": Schemas.protected$branch$pull$request$review;
}
export type Response$repos$update$pull$request$review$protection$Status$422 = Responses.validation_failed.Content;
export interface Parameter$repos$get$commit$signature$protection {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The name of the branch. */
  branch: Parameters.branch;
}
export interface Response$repos$get$commit$signature$protection$Status$200 {
  "application/json": Schemas.protected$branch$admin$enforced;
}
export type Response$repos$get$commit$signature$protection$Status$404 = Responses.not_found.Content;
export interface Parameter$repos$create$commit$signature$protection {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The name of the branch. */
  branch: Parameters.branch;
}
export interface Response$repos$create$commit$signature$protection$Status$200 {
  "application/json": Schemas.protected$branch$admin$enforced;
}
export type Response$repos$create$commit$signature$protection$Status$404 = Responses.not_found.Content;
export interface Parameter$repos$delete$commit$signature$protection {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The name of the branch. */
  branch: Parameters.branch;
}
export type Response$repos$delete$commit$signature$protection$Status$404 = Responses.not_found.Content;
export interface Parameter$repos$get$status$checks$protection {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The name of the branch. */
  branch: Parameters.branch;
}
export interface Response$repos$get$status$checks$protection$Status$200 {
  "application/json": Schemas.status$check$policy;
}
export type Response$repos$get$status$checks$protection$Status$404 = Responses.not_found.Content;
export interface Parameter$repos$remove$status$check$protection {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The name of the branch. */
  branch: Parameters.branch;
}
export interface Parameter$repos$update$status$check$protection {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The name of the branch. */
  branch: Parameters.branch;
}
export interface RequestBody$repos$update$status$check$protection {
  "application/json": {
    /** Require branches to be up to date before merging. */
    strict?: boolean;
    /** **Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control. */
    contexts?: string[];
    /** The list of status checks to require in order to merge into this branch. */
    checks?: {
      /** The name of the required check */
      context: string;
      /** The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status. */
      app_id?: number;
    }[];
  };
}
export interface Response$repos$update$status$check$protection$Status$200 {
  "application/json": Schemas.status$check$policy;
}
export type Response$repos$update$status$check$protection$Status$404 = Responses.not_found.Content;
export type Response$repos$update$status$check$protection$Status$422 = Responses.validation_failed.Content;
export interface Parameter$repos$get$all$status$check$contexts {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The name of the branch. */
  branch: Parameters.branch;
}
export interface Response$repos$get$all$status$check$contexts$Status$200 {
  "application/json": string[];
}
export type Response$repos$get$all$status$check$contexts$Status$404 = Responses.not_found.Content;
export interface Parameter$repos$set$status$check$contexts {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The name of the branch. */
  branch: Parameters.branch;
}
export interface RequestBody$repos$set$status$check$contexts {
  "application/json":
    | {
        /** contexts parameter */
        contexts: string[];
      }
    | string[];
}
export interface Response$repos$set$status$check$contexts$Status$200 {
  "application/json": string[];
}
export type Response$repos$set$status$check$contexts$Status$404 = Responses.not_found.Content;
export type Response$repos$set$status$check$contexts$Status$422 = Responses.validation_failed.Content;
export interface Parameter$repos$add$status$check$contexts {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The name of the branch. */
  branch: Parameters.branch;
}
export interface RequestBody$repos$add$status$check$contexts {
  "application/json":
    | {
        /** contexts parameter */
        contexts: string[];
      }
    | string[];
}
export interface Response$repos$add$status$check$contexts$Status$200 {
  "application/json": string[];
}
export type Response$repos$add$status$check$contexts$Status$403 = Responses.forbidden.Content;
export type Response$repos$add$status$check$contexts$Status$404 = Responses.not_found.Content;
export type Response$repos$add$status$check$contexts$Status$422 = Responses.validation_failed.Content;
export interface Parameter$repos$remove$status$check$contexts {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The name of the branch. */
  branch: Parameters.branch;
}
export interface RequestBody$repos$remove$status$check$contexts {
  "application/json":
    | {
        /** contexts parameter */
        contexts: string[];
      }
    | string[];
}
export interface Response$repos$remove$status$check$contexts$Status$200 {
  "application/json": string[];
}
export type Response$repos$remove$status$check$contexts$Status$404 = Responses.not_found.Content;
export type Response$repos$remove$status$check$contexts$Status$422 = Responses.validation_failed.Content;
export interface Parameter$repos$get$access$restrictions {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The name of the branch. */
  branch: Parameters.branch;
}
export interface Response$repos$get$access$restrictions$Status$200 {
  "application/json": Schemas.branch$restriction$policy;
}
export type Response$repos$get$access$restrictions$Status$404 = Responses.not_found.Content;
export interface Parameter$repos$delete$access$restrictions {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The name of the branch. */
  branch: Parameters.branch;
}
export interface Parameter$repos$get$apps$with$access$to$protected$branch {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The name of the branch. */
  branch: Parameters.branch;
}
export interface Response$repos$get$apps$with$access$to$protected$branch$Status$200 {
  "application/json": Schemas.integration[];
}
export type Response$repos$get$apps$with$access$to$protected$branch$Status$404 = Responses.not_found.Content;
export interface Parameter$repos$set$app$access$restrictions {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The name of the branch. */
  branch: Parameters.branch;
}
export interface RequestBody$repos$set$app$access$restrictions {
  "application/json":
    | {
        /** apps parameter */
        apps: string[];
      }
    | string[];
}
export interface Response$repos$set$app$access$restrictions$Status$200 {
  "application/json": Schemas.integration[];
}
export type Response$repos$set$app$access$restrictions$Status$422 = Responses.validation_failed.Content;
export interface Parameter$repos$add$app$access$restrictions {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The name of the branch. */
  branch: Parameters.branch;
}
export interface RequestBody$repos$add$app$access$restrictions {
  "application/json":
    | {
        /** apps parameter */
        apps: string[];
      }
    | string[];
}
export interface Response$repos$add$app$access$restrictions$Status$200 {
  "application/json": Schemas.integration[];
}
export type Response$repos$add$app$access$restrictions$Status$422 = Responses.validation_failed.Content;
export interface Parameter$repos$remove$app$access$restrictions {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The name of the branch. */
  branch: Parameters.branch;
}
export interface RequestBody$repos$remove$app$access$restrictions {
  "application/json":
    | {
        /** apps parameter */
        apps: string[];
      }
    | string[];
}
export interface Response$repos$remove$app$access$restrictions$Status$200 {
  "application/json": Schemas.integration[];
}
export type Response$repos$remove$app$access$restrictions$Status$422 = Responses.validation_failed.Content;
export interface Parameter$repos$get$teams$with$access$to$protected$branch {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The name of the branch. */
  branch: Parameters.branch;
}
export interface Response$repos$get$teams$with$access$to$protected$branch$Status$200 {
  "application/json": Schemas.team[];
}
export type Response$repos$get$teams$with$access$to$protected$branch$Status$404 = Responses.not_found.Content;
export interface Parameter$repos$set$team$access$restrictions {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The name of the branch. */
  branch: Parameters.branch;
}
export interface RequestBody$repos$set$team$access$restrictions {
  "application/json":
    | {
        /** teams parameter */
        teams: string[];
      }
    | string[];
}
export interface Response$repos$set$team$access$restrictions$Status$200 {
  "application/json": Schemas.team[];
}
export type Response$repos$set$team$access$restrictions$Status$422 = Responses.validation_failed.Content;
export interface Parameter$repos$add$team$access$restrictions {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The name of the branch. */
  branch: Parameters.branch;
}
export interface RequestBody$repos$add$team$access$restrictions {
  "application/json":
    | {
        /** teams parameter */
        teams: string[];
      }
    | string[];
}
export interface Response$repos$add$team$access$restrictions$Status$200 {
  "application/json": Schemas.team[];
}
export type Response$repos$add$team$access$restrictions$Status$422 = Responses.validation_failed.Content;
export interface Parameter$repos$remove$team$access$restrictions {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The name of the branch. */
  branch: Parameters.branch;
}
export interface RequestBody$repos$remove$team$access$restrictions {
  "application/json":
    | {
        /** teams parameter */
        teams: string[];
      }
    | string[];
}
export interface Response$repos$remove$team$access$restrictions$Status$200 {
  "application/json": Schemas.team[];
}
export type Response$repos$remove$team$access$restrictions$Status$422 = Responses.validation_failed.Content;
export interface Parameter$repos$get$users$with$access$to$protected$branch {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The name of the branch. */
  branch: Parameters.branch;
}
export interface Response$repos$get$users$with$access$to$protected$branch$Status$200 {
  "application/json": Schemas.simple$user[];
}
export type Response$repos$get$users$with$access$to$protected$branch$Status$404 = Responses.not_found.Content;
export interface Parameter$repos$set$user$access$restrictions {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The name of the branch. */
  branch: Parameters.branch;
}
export interface RequestBody$repos$set$user$access$restrictions {
  "application/json":
    | {
        /** users parameter */
        users: string[];
      }
    | string[];
}
export interface Response$repos$set$user$access$restrictions$Status$200 {
  "application/json": Schemas.simple$user[];
}
export type Response$repos$set$user$access$restrictions$Status$422 = Responses.validation_failed.Content;
export interface Parameter$repos$add$user$access$restrictions {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The name of the branch. */
  branch: Parameters.branch;
}
export interface RequestBody$repos$add$user$access$restrictions {
  "application/json":
    | {
        /** users parameter */
        users: string[];
      }
    | string[];
}
export interface Response$repos$add$user$access$restrictions$Status$200 {
  "application/json": Schemas.simple$user[];
}
export type Response$repos$add$user$access$restrictions$Status$422 = Responses.validation_failed.Content;
export interface Parameter$repos$remove$user$access$restrictions {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The name of the branch. */
  branch: Parameters.branch;
}
export interface RequestBody$repos$remove$user$access$restrictions {
  "application/json":
    | {
        /** users parameter */
        users: string[];
      }
    | string[];
}
export interface Response$repos$remove$user$access$restrictions$Status$200 {
  "application/json": Schemas.simple$user[];
}
export type Response$repos$remove$user$access$restrictions$Status$422 = Responses.validation_failed.Content;
export interface Parameter$repos$rename$branch {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The name of the branch. */
  branch: Parameters.branch;
}
export interface RequestBody$repos$rename$branch {
  "application/json": {
    /** The new name of the branch. */
    new_name: string;
  };
}
export interface Response$repos$rename$branch$Status$201 {
  "application/json": Schemas.branch$with$protection;
}
export type Response$repos$rename$branch$Status$403 = Responses.forbidden.Content;
export type Response$repos$rename$branch$Status$404 = Responses.not_found.Content;
export type Response$repos$rename$branch$Status$422 = Responses.validation_failed.Content;
export interface Parameter$checks$create {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface RequestBody$checks$create {
  "application/json": {} | {};
}
export interface Response$checks$create$Status$201 {
  "application/json": Schemas.check$run;
}
export interface Parameter$checks$get {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** check_run_id parameter */
  check_run_id: Parameters.check$run$id;
}
export interface Response$checks$get$Status$200 {
  "application/json": Schemas.check$run;
}
export interface Parameter$checks$update {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** check_run_id parameter */
  check_run_id: Parameters.check$run$id;
}
export interface RequestBody$checks$update {
  "application/json": {} | {};
}
export interface Response$checks$update$Status$200 {
  "application/json": Schemas.check$run;
}
export interface Parameter$checks$list$annotations {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** check_run_id parameter */
  check_run_id: Parameters.check$run$id;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$checks$list$annotations$Status$200 {
  "application/json": Schemas.check$annotation[];
}
export interface Parameter$checks$rerequest$run {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** check_run_id parameter */
  check_run_id: Parameters.check$run$id;
}
export interface Response$checks$rerequest$run$Status$201 {
  "application/json": {};
}
export interface Response$checks$rerequest$run$Status$403 {
  "application/json": Schemas.basic$error;
}
export type Response$checks$rerequest$run$Status$404 = Responses.not_found.Content;
export interface Response$checks$rerequest$run$Status$422 {
  "application/json": Schemas.basic$error;
}
export interface Parameter$checks$create$suite {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface RequestBody$checks$create$suite {
  "application/json": {
    /** The sha of the head commit. */
    head_sha: string;
  };
}
export interface Response$checks$create$suite$Status$200 {
  "application/json": Schemas.check$suite;
}
export interface Response$checks$create$suite$Status$201 {
  "application/json": Schemas.check$suite;
}
export interface Parameter$checks$set$suites$preferences {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface RequestBody$checks$set$suites$preferences {
  "application/json": {
    /** Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default. See the [`auto_trigger_checks` object](https://docs.github.com/enterprise-server@3.4/rest/reference/checks#auto_trigger_checks-object) description for details. */
    auto_trigger_checks?: {
      /** The `id` of the GitHub App. */
      app_id: number;
      /** Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or `false` to disable them. */
      setting: boolean;
    }[];
  };
}
export interface Response$checks$set$suites$preferences$Status$200 {
  "application/json": Schemas.check$suite$preference;
}
export interface Parameter$checks$get$suite {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** check_suite_id parameter */
  check_suite_id: Parameters.check$suite$id;
}
export interface Response$checks$get$suite$Status$200 {
  "application/json": Schemas.check$suite;
}
export interface Parameter$checks$list$for$suite {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** check_suite_id parameter */
  check_suite_id: Parameters.check$suite$id;
  /** Returns check runs with the specified `name`. */
  check_name?: Parameters.check$name;
  /** Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or `completed`. */
  status?: Parameters.status;
  /** Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most recent check runs) or `all`. */
  filter?: "latest" | "all";
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$checks$list$for$suite$Status$200 {
  "application/json": {
    total_count: number;
    check_runs: Schemas.check$run[];
  };
}
export interface Parameter$checks$rerequest$suite {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** check_suite_id parameter */
  check_suite_id: Parameters.check$suite$id;
}
export interface Response$checks$rerequest$suite$Status$201 {
  "application/json": {};
}
export interface Parameter$code$scanning$list$alerts$for$repo {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. */
  tool_name?: Parameters.tool$name;
  /** The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. */
  tool_guid?: Parameters.tool$guid;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */
  ref?: Parameters.git$ref;
  /** One of `asc` (ascending) or `desc` (descending). */
  direction?: Parameters.direction;
  /** Can be one of `created`, `updated`, `number`. */
  sort?: "created" | "updated" | "number";
  /** Set to `open`, `closed, `fixed`, or `dismissed` to list code scanning alerts in a specific state. */
  state?: Schemas.code$scanning$alert$state;
}
export interface Response$code$scanning$list$alerts$for$repo$Status$200 {
  "application/json": Schemas.code$scanning$alert$items[];
}
export type Response$code$scanning$list$alerts$for$repo$Status$403 = Responses.code_scanning_forbidden_read.Content;
export type Response$code$scanning$list$alerts$for$repo$Status$404 = Responses.not_found.Content;
export type Response$code$scanning$list$alerts$for$repo$Status$503 = Responses.service_unavailable.Content;
export interface Parameter$code$scanning$get$alert {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. */
  alert_number: Parameters.alert$number;
}
export interface Response$code$scanning$get$alert$Status$200 {
  "application/json": Schemas.code$scanning$alert;
}
export type Response$code$scanning$get$alert$Status$403 = Responses.code_scanning_forbidden_read.Content;
export type Response$code$scanning$get$alert$Status$404 = Responses.not_found.Content;
export type Response$code$scanning$get$alert$Status$503 = Responses.service_unavailable.Content;
export interface Parameter$code$scanning$update$alert {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. */
  alert_number: Parameters.alert$number;
}
export interface RequestBody$code$scanning$update$alert {
  "application/json": {
    state: Schemas.code$scanning$alert$set$state;
    dismissed_reason?: Schemas.code$scanning$alert$dismissed$reason;
  };
}
export interface Response$code$scanning$update$alert$Status$200 {
  "application/json": Schemas.code$scanning$alert;
}
export type Response$code$scanning$update$alert$Status$403 = Responses.code_scanning_forbidden_write.Content;
export type Response$code$scanning$update$alert$Status$404 = Responses.not_found.Content;
export type Response$code$scanning$update$alert$Status$503 = Responses.service_unavailable.Content;
export interface Parameter$code$scanning$list$alert$instances {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. */
  alert_number: Parameters.alert$number;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */
  ref?: Parameters.git$ref;
}
export interface Response$code$scanning$list$alert$instances$Status$200 {
  "application/json": Schemas.code$scanning$alert$instance[];
}
export type Response$code$scanning$list$alert$instances$Status$403 = Responses.code_scanning_forbidden_read.Content;
export type Response$code$scanning$list$alert$instances$Status$404 = Responses.not_found.Content;
export type Response$code$scanning$list$alert$instances$Status$503 = Responses.service_unavailable.Content;
export interface Parameter$code$scanning$list$recent$analyses {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. */
  tool_name?: Parameters.tool$name;
  /** The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. */
  tool_guid?: Parameters.tool$guid;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** The Git reference for the analyses you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */
  ref?: Schemas.code$scanning$ref;
  /** Filter analyses belonging to the same SARIF upload. */
  sarif_id?: Schemas.code$scanning$analysis$sarif$id;
}
export interface Response$code$scanning$list$recent$analyses$Status$200 {
  "application/json": Schemas.code$scanning$analysis[];
}
export type Response$code$scanning$list$recent$analyses$Status$403 = Responses.code_scanning_forbidden_read.Content;
export type Response$code$scanning$list$recent$analyses$Status$404 = Responses.not_found.Content;
export type Response$code$scanning$list$recent$analyses$Status$503 = Responses.service_unavailable.Content;
export interface Parameter$code$scanning$get$analysis {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation. */
  analysis_id: number;
}
export interface Response$code$scanning$get$analysis$Status$200 {
  "application/json+sarif": string;
  "application/json": Schemas.code$scanning$analysis;
}
export type Response$code$scanning$get$analysis$Status$403 = Responses.code_scanning_forbidden_read.Content;
export type Response$code$scanning$get$analysis$Status$404 = Responses.not_found.Content;
export type Response$code$scanning$get$analysis$Status$503 = Responses.service_unavailable.Content;
export interface Parameter$code$scanning$delete$analysis {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation. */
  analysis_id: number;
  /** Allow deletion if the specified analysis is the last in a set. If you attempt to delete the final analysis in a set without setting this parameter to `true`, you'll get a 400 response with the message: `Analysis is last of its type and deletion may result in the loss of historical alert data. Please specify confirm_delete.` */
  confirm_delete?: string | null;
}
export interface Response$code$scanning$delete$analysis$Status$200 {
  "application/json": Schemas.code$scanning$analysis$deletion;
}
export type Response$code$scanning$delete$analysis$Status$400 = Responses.bad_request.Content;
export type Response$code$scanning$delete$analysis$Status$403 = Responses.code_scanning_forbidden_write.Content;
export type Response$code$scanning$delete$analysis$Status$404 = Responses.not_found.Content;
export type Response$code$scanning$delete$analysis$Status$503 = Responses.service_unavailable.Content;
export interface Parameter$code$scanning$upload$sarif {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface RequestBody$code$scanning$upload$sarif {
  "application/json": {
    commit_sha: Schemas.code$scanning$analysis$commit$sha;
    ref: Schemas.code$scanning$ref;
    sarif: Schemas.code$scanning$analysis$sarif$file;
    /**
     * The base directory used in the analysis, as it appears in the SARIF file.
     * This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.
     */
    checkout_uri?: string;
    /** The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
    started_at?: string;
    /** The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to "API". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`. */
    tool_name?: string;
  };
}
export interface Response$code$scanning$upload$sarif$Status$202 {
  "application/json": Schemas.code$scanning$sarifs$receipt;
}
export type Response$code$scanning$upload$sarif$Status$403 = Responses.code_scanning_forbidden_write.Content;
export type Response$code$scanning$upload$sarif$Status$404 = Responses.not_found.Content;
export type Response$code$scanning$upload$sarif$Status$503 = Responses.service_unavailable.Content;
export interface Parameter$code$scanning$get$sarif {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The SARIF ID obtained after uploading. */
  sarif_id: string;
}
export interface Response$code$scanning$get$sarif$Status$200 {
  "application/json": Schemas.code$scanning$sarifs$status;
}
export type Response$code$scanning$get$sarif$Status$403 = Responses.code_scanning_forbidden_read.Content;
export type Response$code$scanning$get$sarif$Status$503 = Responses.service_unavailable.Content;
export interface Parameter$repos$list$collaborators {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /**
   * Filter collaborators returned by their affiliation. Can be one of:
   * \* `outside`: All outside collaborators of an organization-owned repository.
   * \* `direct`: All collaborators with permissions to an organization-owned repository, regardless of organization membership status.
   * \* `all`: All collaborators the authenticated user can see.
   */
  affiliation?: "outside" | "direct" | "all";
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$repos$list$collaborators$Status$200 {
  "application/json": Schemas.collaborator[];
}
export type Response$repos$list$collaborators$Status$404 = Responses.not_found.Content;
export interface Parameter$repos$check$collaborator {
  owner: Parameters.owner;
  repo: Parameters.repo;
  username: Parameters.username;
}
export interface Parameter$repos$add$collaborator {
  owner: Parameters.owner;
  repo: Parameters.repo;
  username: Parameters.username;
}
export interface RequestBody$repos$add$collaborator {
  "application/json": {
    /**
     * The permission to grant the collaborator. **Only valid on organization-owned repositories.** Can be one of:
     * \* `pull` - can pull, but not push to or administer this repository.
     * \* `push` - can pull and push, but not administer this repository.
     * \* `admin` - can pull, push and administer this repository.
     * \* `maintain` - Recommended for project managers who need to manage the repository without access to sensitive or destructive actions.
     * \* `triage` - Recommended for contributors who need to proactively manage issues and pull requests without write access.
     */
    permission?: "pull" | "push" | "admin" | "maintain" | "triage";
    permissions?: string;
  };
}
export interface Response$repos$add$collaborator$Status$201 {
  "application/json": Schemas.repository$invitation;
}
export type Response$repos$add$collaborator$Status$403 = Responses.forbidden.Content;
export type Response$repos$add$collaborator$Status$422 = Responses.validation_failed.Content;
export interface Parameter$repos$remove$collaborator {
  owner: Parameters.owner;
  repo: Parameters.repo;
  username: Parameters.username;
}
export interface Parameter$repos$get$collaborator$permission$level {
  owner: Parameters.owner;
  repo: Parameters.repo;
  username: Parameters.username;
}
export interface Response$repos$get$collaborator$permission$level$Status$200 {
  "application/json": Schemas.repository$collaborator$permission;
}
export type Response$repos$get$collaborator$permission$level$Status$404 = Responses.not_found.Content;
export interface Parameter$repos$list$commit$comments$for$repo {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$repos$list$commit$comments$for$repo$Status$200 {
  "application/json": Schemas.commit$comment[];
}
export interface Parameter$repos$get$commit$comment {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** comment_id parameter */
  comment_id: Parameters.comment$id;
}
export interface Response$repos$get$commit$comment$Status$200 {
  "application/json": Schemas.commit$comment;
}
export type Response$repos$get$commit$comment$Status$404 = Responses.not_found.Content;
export interface Parameter$repos$delete$commit$comment {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** comment_id parameter */
  comment_id: Parameters.comment$id;
}
export type Response$repos$delete$commit$comment$Status$404 = Responses.not_found.Content;
export interface Parameter$repos$update$commit$comment {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** comment_id parameter */
  comment_id: Parameters.comment$id;
}
export interface RequestBody$repos$update$commit$comment {
  "application/json": {
    /** The contents of the comment */
    body: string;
  };
}
export interface Response$repos$update$commit$comment$Status$200 {
  "application/json": Schemas.commit$comment;
}
export type Response$repos$update$commit$comment$Status$404 = Responses.not_found.Content;
export interface Parameter$reactions$list$for$commit$comment {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** comment_id parameter */
  comment_id: Parameters.comment$id;
  /** Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a commit comment. */
  content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$reactions$list$for$commit$comment$Status$200 {
  "application/json": Schemas.reaction[];
}
export type Response$reactions$list$for$commit$comment$Status$404 = Responses.not_found.Content;
export interface Parameter$reactions$create$for$commit$comment {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** comment_id parameter */
  comment_id: Parameters.comment$id;
}
export interface RequestBody$reactions$create$for$commit$comment {
  "application/json": {
    /** The [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types) to add to the commit comment. */
    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
  };
}
export interface Response$reactions$create$for$commit$comment$Status$200 {
  "application/json": Schemas.reaction;
}
export interface Response$reactions$create$for$commit$comment$Status$201 {
  "application/json": Schemas.reaction;
}
export type Response$reactions$create$for$commit$comment$Status$415 = Responses.preview_header_missing.Content;
export type Response$reactions$create$for$commit$comment$Status$422 = Responses.validation_failed.Content;
export interface Parameter$reactions$delete$for$commit$comment {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** comment_id parameter */
  comment_id: Parameters.comment$id;
  reaction_id: Parameters.reaction$id;
}
export interface Parameter$repos$list$commits {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** SHA or branch to start listing commits from. Default: the repository’s default branch (usually `master`). */
  sha?: string;
  /** Only commits containing this file path will be returned. */
  path?: string;
  /** GitHub login or email address by which to filter by commit author. */
  author?: string;
  /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
  since?: Parameters.since;
  /** Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
  until?: string;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$repos$list$commits$Status$200 {
  "application/json": Schemas.commit[];
}
export type Response$repos$list$commits$Status$400 = Responses.bad_request.Content;
export type Response$repos$list$commits$Status$404 = Responses.not_found.Content;
export type Response$repos$list$commits$Status$409 = Responses.conflict.Content;
export type Response$repos$list$commits$Status$500 = Responses.internal_error.Content;
export interface Parameter$repos$list$branches$for$head$commit {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** commit_sha parameter */
  commit_sha: Parameters.commit$sha;
}
export interface Response$repos$list$branches$for$head$commit$Status$200 {
  "application/json": Schemas.branch$short[];
}
export type Response$repos$list$branches$for$head$commit$Status$422 = Responses.validation_failed.Content;
export interface Parameter$repos$list$comments$for$commit {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** commit_sha parameter */
  commit_sha: Parameters.commit$sha;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$repos$list$comments$for$commit$Status$200 {
  "application/json": Schemas.commit$comment[];
}
export interface Parameter$repos$create$commit$comment {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** commit_sha parameter */
  commit_sha: Parameters.commit$sha;
}
export interface RequestBody$repos$create$commit$comment {
  "application/json": {
    /** The contents of the comment. */
    body: string;
    /** Relative path of the file to comment on. */
    path?: string;
    /** Line index in the diff to comment on. */
    position?: number;
    /** **Deprecated**. Use **position** parameter instead. Line number in the file to comment on. */
    line?: number;
  };
}
export interface Response$repos$create$commit$comment$Status$201 {
  "application/json": Schemas.commit$comment;
}
export type Response$repos$create$commit$comment$Status$403 = Responses.forbidden.Content;
export type Response$repos$create$commit$comment$Status$422 = Responses.validation_failed.Content;
export interface Parameter$repos$list$pull$requests$associated$with$commit {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** commit_sha parameter */
  commit_sha: Parameters.commit$sha;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$repos$list$pull$requests$associated$with$commit$Status$200 {
  "application/json": Schemas.pull$request$simple[];
}
export interface Parameter$repos$get$commit {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** ref parameter */
  ref: string;
}
export interface Response$repos$get$commit$Status$200 {
  "application/json": Schemas.commit;
}
export type Response$repos$get$commit$Status$404 = Responses.not_found.Content;
export type Response$repos$get$commit$Status$422 = Responses.validation_failed.Content;
export type Response$repos$get$commit$Status$500 = Responses.internal_error.Content;
export interface Parameter$checks$list$for$ref {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** ref parameter */
  ref: string;
  /** Returns check runs with the specified `name`. */
  check_name?: Parameters.check$name;
  /** Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or `completed`. */
  status?: Parameters.status;
  /** Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most recent check runs) or `all`. */
  filter?: "latest" | "all";
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
  app_id?: number;
}
export interface Response$checks$list$for$ref$Status$200 {
  "application/json": {
    total_count: number;
    check_runs: Schemas.check$run[];
  };
}
export interface Parameter$checks$list$suites$for$ref {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** ref parameter */
  ref: string;
  /** Filters check suites by GitHub App `id`. */
  app_id?: number;
  /** Returns check runs with the specified `name`. */
  check_name?: Parameters.check$name;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$checks$list$suites$for$ref$Status$200 {
  "application/json": {
    total_count: number;
    check_suites: Schemas.check$suite[];
  };
}
export interface Parameter$repos$get$combined$status$for$ref {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** ref parameter */
  ref: string;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$repos$get$combined$status$for$ref$Status$200 {
  "application/json": Schemas.combined$commit$status;
}
export type Response$repos$get$combined$status$for$ref$Status$404 = Responses.not_found.Content;
export interface Parameter$repos$list$commit$statuses$for$ref {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** ref parameter */
  ref: string;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$repos$list$commit$statuses$for$ref$Status$200 {
  "application/json": Schemas.status[];
}
export type Response$repos$list$commit$statuses$for$ref$Status$301 = Responses.moved_permanently.Content;
export interface Parameter$repos$compare$commits {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** The base branch and head branch to compare. This parameter expects the format `{base}...{head}`. */
  basehead: string;
}
export interface Response$repos$compare$commits$Status$200 {
  "application/json": Schemas.commit$comparison;
}
export type Response$repos$compare$commits$Status$404 = Responses.not_found.Content;
export type Response$repos$compare$commits$Status$500 = Responses.internal_error.Content;
export interface Parameter$repos$get$content {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** path parameter */
  path: string;
  /** The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`) */
  ref?: string;
}
export interface Response$repos$get$content$Status$200 {
  "application/vnd.github.v3.object": Schemas.content$tree;
  "application/json": Schemas.content$directory | Schemas.content$file | Schemas.content$symlink | Schemas.content$submodule;
}
export type Response$repos$get$content$Status$403 = Responses.forbidden.Content;
export type Response$repos$get$content$Status$404 = Responses.not_found.Content;
export interface Parameter$repos$create$or$update$file$contents {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** path parameter */
  path: string;
}
export interface RequestBody$repos$create$or$update$file$contents {
  "application/json": {
    /** The commit message. */
    message: string;
    /** The new file content, using Base64 encoding. */
    content: string;
    /** **Required if you are updating a file**. The blob SHA of the file being replaced. */
    sha?: string;
    /** The branch name. Default: the repository’s default branch (usually `master`) */
    branch?: string;
    /** The person that committed the file. Default: the authenticated user. */
    committer?: {
      /** The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted. */
      name: string;
      /** The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted. */
      email: string;
      date?: string;
    };
    /** The author of the file. Default: The `committer` or the authenticated user if you omit `committer`. */
    author?: {
      /** The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted. */
      name: string;
      /** The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted. */
      email: string;
      date?: string;
    };
  };
}
export interface Response$repos$create$or$update$file$contents$Status$200 {
  "application/json": Schemas.file$commit;
}
export interface Response$repos$create$or$update$file$contents$Status$201 {
  "application/json": Schemas.file$commit;
}
export type Response$repos$create$or$update$file$contents$Status$404 = Responses.not_found.Content;
export type Response$repos$create$or$update$file$contents$Status$409 = Responses.conflict.Content;
export type Response$repos$create$or$update$file$contents$Status$422 = Responses.validation_failed.Content;
export interface Parameter$repos$delete$file {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** path parameter */
  path: string;
}
export interface RequestBody$repos$delete$file {
  "application/json": {
    /** The commit message. */
    message: string;
    /** The blob SHA of the file being replaced. */
    sha: string;
    /** The branch name. Default: the repository’s default branch (usually `master`) */
    branch?: string;
    /** object containing information about the committer. */
    committer?: {
      /** The name of the author (or committer) of the commit */
      name?: string;
      /** The email of the author (or committer) of the commit */
      email?: string;
    };
    /** object containing information about the author. */
    author?: {
      /** The name of the author (or committer) of the commit */
      name?: string;
      /** The email of the author (or committer) of the commit */
      email?: string;
    };
  };
}
export interface Response$repos$delete$file$Status$200 {
  "application/json": Schemas.file$commit;
}
export type Response$repos$delete$file$Status$404 = Responses.not_found.Content;
export type Response$repos$delete$file$Status$409 = Responses.conflict.Content;
export type Response$repos$delete$file$Status$422 = Responses.validation_failed.Content;
export type Response$repos$delete$file$Status$503 = Responses.service_unavailable.Content;
export interface Parameter$repos$list$contributors {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** Set to `1` or `true` to include anonymous contributors in results. */
  anon?: string;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$repos$list$contributors$Status$200 {
  "application/json": Schemas.contributor[];
}
export type Response$repos$list$contributors$Status$403 = Responses.forbidden.Content;
export type Response$repos$list$contributors$Status$404 = Responses.not_found.Content;
export interface Parameter$dependabot$list$repo$secrets {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$dependabot$list$repo$secrets$Status$200 {
  "application/json": {
    total_count: number;
    secrets: Schemas.dependabot$secret[];
  };
}
export interface Parameter$dependabot$get$repo$public$key {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface Response$dependabot$get$repo$public$key$Status$200 {
  "application/json": Schemas.dependabot$public$key;
}
export interface Parameter$dependabot$get$repo$secret {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** secret_name parameter */
  secret_name: Parameters.secret$name;
}
export interface Response$dependabot$get$repo$secret$Status$200 {
  "application/json": Schemas.dependabot$secret;
}
export interface Parameter$dependabot$create$or$update$repo$secret {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** secret_name parameter */
  secret_name: Parameters.secret$name;
}
export interface RequestBody$dependabot$create$or$update$repo$secret {
  "application/json": {
    /** Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/enterprise-server@3.4/rest/reference/dependabot#get-a-repository-public-key) endpoint. */
    encrypted_value?: string;
    /** ID of the key you used to encrypt the secret. */
    key_id?: string;
  };
}
export interface Response$dependabot$create$or$update$repo$secret$Status$201 {
  "application/json": {};
}
export interface Parameter$dependabot$delete$repo$secret {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** secret_name parameter */
  secret_name: Parameters.secret$name;
}
export interface Parameter$repos$list$deployments {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The SHA recorded at creation time. */
  sha?: string;
  /** The name of the ref. This can be a branch, tag, or SHA. */
  ref?: string;
  /** The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`). */
  task?: string;
  /** The name of the environment that was deployed to (e.g., `staging` or `production`). */
  environment?: string | null;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$repos$list$deployments$Status$200 {
  "application/json": Schemas.deployment[];
}
export interface Parameter$repos$create$deployment {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface RequestBody$repos$create$deployment {
  "application/json": {
    /** The ref to deploy. This can be a branch, tag, or SHA. */
    ref: string;
    /** Specifies a task to execute (e.g., `deploy` or `deploy:migrations`). */
    task?: string;
    /** Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch. */
    auto_merge?: boolean;
    /** The [status](https://docs.github.com/enterprise-server@3.4/rest/reference/commits#commit-statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts. */
    required_contexts?: string[];
    payload?: {} | string;
    /** Name for the target deployment environment (e.g., `production`, `staging`, `qa`). */
    environment?: string;
    /** Short description of the deployment. */
    description?: string | null;
    /** Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false` */
    transient_environment?: boolean;
    /** Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise. */
    production_environment?: boolean;
  };
}
export interface Response$repos$create$deployment$Status$201 {
  "application/json": Schemas.deployment;
}
export interface Response$repos$create$deployment$Status$202 {
  "application/json": {
    message?: string;
  };
}
export type Response$repos$create$deployment$Status$422 = Responses.validation_failed.Content;
export interface Parameter$repos$get$deployment {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** deployment_id parameter */
  deployment_id: Parameters.deployment$id;
}
export interface Response$repos$get$deployment$Status$200 {
  "application/json": Schemas.deployment;
}
export type Response$repos$get$deployment$Status$404 = Responses.not_found.Content;
export interface Parameter$repos$delete$deployment {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** deployment_id parameter */
  deployment_id: Parameters.deployment$id;
}
export type Response$repos$delete$deployment$Status$404 = Responses.not_found.Content;
export type Response$repos$delete$deployment$Status$422 = Responses.validation_failed_simple.Content;
export interface Parameter$repos$list$deployment$statuses {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** deployment_id parameter */
  deployment_id: Parameters.deployment$id;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$repos$list$deployment$statuses$Status$200 {
  "application/json": Schemas.deployment$status[];
}
export type Response$repos$list$deployment$statuses$Status$404 = Responses.not_found.Content;
export interface Parameter$repos$create$deployment$status {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** deployment_id parameter */
  deployment_id: Parameters.deployment$id;
}
export interface RequestBody$repos$create$deployment$status {
  "application/json": {
    /** The state of the status. Can be one of `error`, `failure`, `inactive`, `in_progress`, `queued`, `pending`, or `success`. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub. */
    state: "error" | "failure" | "inactive" | "in_progress" | "queued" | "pending" | "success";
    /** The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It's recommended to use the `log_url` parameter, which replaces `target_url`. */
    target_url?: string;
    /** The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `""` */
    log_url?: string;
    /** A short description of the status. The maximum description length is 140 characters. */
    description?: string;
    /** Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`. */
    environment?: "production" | "staging" | "qa";
    /** Sets the URL for accessing your environment. Default: `""` */
    environment_url?: string;
    /** Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true` */
    auto_inactive?: boolean;
  };
}
export interface Response$repos$create$deployment$status$Status$201 {
  "application/json": Schemas.deployment$status;
}
export type Response$repos$create$deployment$status$Status$422 = Responses.validation_failed.Content;
export interface Parameter$repos$get$deployment$status {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** deployment_id parameter */
  deployment_id: Parameters.deployment$id;
  status_id: number;
}
export interface Response$repos$get$deployment$status$Status$200 {
  "application/json": Schemas.deployment$status;
}
export type Response$repos$get$deployment$status$Status$404 = Responses.not_found.Content;
export interface Parameter$repos$create$dispatch$event {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface RequestBody$repos$create$dispatch$event {
  "application/json": {
    /** A custom webhook event name. */
    event_type: string;
    /** JSON payload with extra information about the webhook event that your action or worklow may use. */
    client_payload?: {};
  };
}
export type Response$repos$create$dispatch$event$Status$422 = Responses.validation_failed.Content;
export interface Parameter$repos$get$all$environments {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface Response$repos$get$all$environments$Status$200 {
  "application/json": {
    /** The number of environments in this repository */
    total_count?: number;
    environments?: Schemas.environment[];
  };
}
export interface Parameter$repos$get$environment {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The name of the environment */
  environment_name: Parameters.environment$name;
}
export interface Response$repos$get$environment$Status$200 {
  "application/json": Schemas.environment;
}
export interface Parameter$repos$create$or$update$environment {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The name of the environment */
  environment_name: Parameters.environment$name;
}
export interface RequestBody$repos$create$or$update$environment {
  "application/json": {
    wait_timer?: Schemas.wait$timer;
    /** The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed. */
    reviewers?:
      | {
          type?: Schemas.deployment$reviewer$type;
          /** The id of the user or team who can review the deployment */
          id?: number;
        }[]
      | null;
    deployment_branch_policy?: Schemas.deployment_branch_policy;
  } | null;
}
export interface Response$repos$create$or$update$environment$Status$200 {
  "application/json": Schemas.environment;
}
export interface Response$repos$create$or$update$environment$Status$422 {
  "application/json": Schemas.basic$error;
}
export interface Parameter$repos$delete$an$environment {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The name of the environment */
  environment_name: Parameters.environment$name;
}
export interface Parameter$activity$list$repo$events {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$activity$list$repo$events$Status$200 {
  "application/json": Schemas.event[];
}
export interface Parameter$repos$list$forks {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The sort order. Can be either `newest`, `oldest`, or `stargazers`. */
  sort?: "newest" | "oldest" | "stargazers" | "watchers";
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$repos$list$forks$Status$200 {
  "application/json": Schemas.minimal$repository[];
}
export type Response$repos$list$forks$Status$400 = Responses.bad_request.Content;
export interface Parameter$repos$create$fork {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface RequestBody$repos$create$fork {
  "application/json": {
    /** Optional parameter to specify the organization name if forking into an organization. */
    organization?: string;
  } | null;
}
export interface Response$repos$create$fork$Status$202 {
  "application/json": Schemas.full$repository;
}
export type Response$repos$create$fork$Status$400 = Responses.bad_request.Content;
export type Response$repos$create$fork$Status$403 = Responses.forbidden.Content;
export type Response$repos$create$fork$Status$404 = Responses.not_found.Content;
export type Response$repos$create$fork$Status$422 = Responses.validation_failed.Content;
export interface Parameter$git$create$blob {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface RequestBody$git$create$blob {
  "application/json": {
    /** The new blob's content. */
    content: string;
    /** The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported. */
    encoding?: string;
  };
}
export interface Response$git$create$blob$Status$201 {
  "application/json": Schemas.short$blob;
}
export type Response$git$create$blob$Status$403 = Responses.forbidden.Content;
export type Response$git$create$blob$Status$404 = Responses.not_found.Content;
export type Response$git$create$blob$Status$409 = Responses.conflict.Content;
export type Response$git$create$blob$Status$422 = Responses.validation_failed.Content;
export interface Parameter$git$get$blob {
  owner: Parameters.owner;
  repo: Parameters.repo;
  file_sha: string;
}
export interface Response$git$get$blob$Status$200 {
  "application/json": Schemas.blob;
}
export type Response$git$get$blob$Status$403 = Responses.forbidden.Content;
export type Response$git$get$blob$Status$404 = Responses.not_found.Content;
export type Response$git$get$blob$Status$422 = Responses.validation_failed.Content;
export interface Parameter$git$create$commit {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface RequestBody$git$create$commit {
  "application/json": {
    /** The commit message */
    message: string;
    /** The SHA of the tree object this commit points to */
    tree: string;
    /** The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided. */
    parents?: string[];
    /** Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details. */
    author?: {
      /** The name of the author (or committer) of the commit */
      name: string;
      /** The email of the author (or committer) of the commit */
      email: string;
      /** Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
      date?: string;
    };
    /** Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details. */
    committer?: {
      /** The name of the author (or committer) of the commit */
      name?: string;
      /** The email of the author (or committer) of the commit */
      email?: string;
      /** Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
      date?: string;
    };
    /** The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits. */
    signature?: string;
  };
}
export interface Response$git$create$commit$Status$201 {
  "application/json": Schemas.git$commit;
}
export type Response$git$create$commit$Status$404 = Responses.not_found.Content;
export type Response$git$create$commit$Status$422 = Responses.validation_failed.Content;
export interface Parameter$git$get$commit {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** commit_sha parameter */
  commit_sha: Parameters.commit$sha;
}
export interface Response$git$get$commit$Status$200 {
  "application/json": Schemas.git$commit;
}
export type Response$git$get$commit$Status$404 = Responses.not_found.Content;
export interface Parameter$git$list$matching$refs {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** ref parameter */
  ref: string;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$git$list$matching$refs$Status$200 {
  "application/json": Schemas.git$ref[];
}
export interface Parameter$git$get$ref {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** ref parameter */
  ref: string;
}
export interface Response$git$get$ref$Status$200 {
  "application/json": Schemas.git$ref;
}
export type Response$git$get$ref$Status$404 = Responses.not_found.Content;
export interface Parameter$git$create$ref {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface RequestBody$git$create$ref {
  "application/json": {
    /** The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected. */
    ref: string;
    /** The SHA1 value for this reference. */
    sha: string;
    key?: string;
  };
}
export interface Response$git$create$ref$Status$201 {
  "application/json": Schemas.git$ref;
}
export type Response$git$create$ref$Status$422 = Responses.validation_failed.Content;
export interface Parameter$git$delete$ref {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** ref parameter */
  ref: string;
}
export type Response$git$delete$ref$Status$422 = Responses.validation_failed.Content;
export interface Parameter$git$update$ref {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** ref parameter */
  ref: string;
}
export interface RequestBody$git$update$ref {
  "application/json": {
    /** The SHA1 value to set this reference to */
    sha: string;
    /** Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work. */
    force?: boolean;
  };
}
export interface Response$git$update$ref$Status$200 {
  "application/json": Schemas.git$ref;
}
export type Response$git$update$ref$Status$422 = Responses.validation_failed.Content;
export interface Parameter$git$create$tag {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface RequestBody$git$create$tag {
  "application/json": {
    /** The tag's name. This is typically a version (e.g., "v0.0.1"). */
    tag: string;
    /** The tag message. */
    message: string;
    /** The SHA of the git object this is tagging. */
    object: string;
    /** The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`. */
    type: "commit" | "tree" | "blob";
    /** An object with information about the individual creating the tag. */
    tagger?: {
      /** The name of the author of the tag */
      name: string;
      /** The email of the author of the tag */
      email: string;
      /** When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
      date?: string;
    };
  };
}
export interface Response$git$create$tag$Status$201 {
  "application/json": Schemas.git$tag;
}
export type Response$git$create$tag$Status$422 = Responses.validation_failed.Content;
export interface Parameter$git$get$tag {
  owner: Parameters.owner;
  repo: Parameters.repo;
  tag_sha: string;
}
export interface Response$git$get$tag$Status$200 {
  "application/json": Schemas.git$tag;
}
export type Response$git$get$tag$Status$404 = Responses.not_found.Content;
export interface Parameter$git$create$tree {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface RequestBody$git$create$tree {
  "application/json": {
    /** Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure. */
    tree: {
      /** The file referenced in the tree. */
      path?: string;
      /** The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink. */
      mode?: "100644" | "100755" | "040000" | "160000" | "120000";
      /** Either `blob`, `tree`, or `commit`. */
      type?: "blob" | "tree" | "commit";
      /**
       * The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null` then the file will be deleted.
       *
       * **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
       */
      sha?: string | null;
      /**
       * The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.
       *
       * **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
       */
      content?: string;
    }[];
    /**
     * The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.
     * If not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit.
     */
    base_tree?: string;
  };
}
export interface Response$git$create$tree$Status$201 {
  "application/json": Schemas.git$tree;
}
export type Response$git$create$tree$Status$403 = Responses.forbidden.Content;
export type Response$git$create$tree$Status$404 = Responses.not_found.Content;
export type Response$git$create$tree$Status$422 = Responses.validation_failed.Content;
export interface Parameter$git$get$tree {
  owner: Parameters.owner;
  repo: Parameters.repo;
  tree_sha: string;
  /** Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in `:tree_sha`. For example, setting `recursive` to any of the following will enable returning objects or subtrees: `0`, `1`, `"true"`, and `"false"`. Omit this parameter to prevent recursively returning objects or subtrees. */
  recursive?: string;
}
export interface Response$git$get$tree$Status$200 {
  "application/json": Schemas.git$tree;
}
export type Response$git$get$tree$Status$404 = Responses.not_found.Content;
export type Response$git$get$tree$Status$422 = Responses.validation_failed.Content;
export interface Parameter$repos$list$webhooks {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$repos$list$webhooks$Status$200 {
  "application/json": Schemas.hook[];
}
export type Response$repos$list$webhooks$Status$404 = Responses.not_found.Content;
export interface Parameter$repos$create$webhook {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface RequestBody$repos$create$webhook {
  "application/json": {
    /** Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`. */
    name?: string;
    /** Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#create-hook-config-params). */
    config?: {
      url?: Schemas.webhook$config$url;
      content_type?: Schemas.webhook$config$content$type;
      secret?: Schemas.webhook$config$secret;
      insecure_ssl?: Schemas.webhook$config$insecure$ssl;
      token?: string;
      digest?: string;
    };
    /** Determines what [events](https://docs.github.com/enterprise-server@3.4/webhooks/event-payloads) the hook is triggered for. */
    events?: string[];
    /** Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications. */
    active?: boolean;
  } | null;
}
export interface Response$repos$create$webhook$Status$201 {
  "application/json": Schemas.hook;
}
export type Response$repos$create$webhook$Status$403 = Responses.forbidden.Content;
export type Response$repos$create$webhook$Status$404 = Responses.not_found.Content;
export type Response$repos$create$webhook$Status$422 = Responses.validation_failed.Content;
export interface Parameter$repos$get$webhook {
  owner: Parameters.owner;
  repo: Parameters.repo;
  hook_id: Parameters.hook$id;
}
export interface Response$repos$get$webhook$Status$200 {
  "application/json": Schemas.hook;
}
export type Response$repos$get$webhook$Status$404 = Responses.not_found.Content;
export interface Parameter$repos$delete$webhook {
  owner: Parameters.owner;
  repo: Parameters.repo;
  hook_id: Parameters.hook$id;
}
export type Response$repos$delete$webhook$Status$404 = Responses.not_found.Content;
export interface Parameter$repos$update$webhook {
  owner: Parameters.owner;
  repo: Parameters.repo;
  hook_id: Parameters.hook$id;
}
export interface RequestBody$repos$update$webhook {
  "application/json": {
    /** Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#create-hook-config-params). */
    config?: {
      url: Schemas.webhook$config$url;
      content_type?: Schemas.webhook$config$content$type;
      secret?: Schemas.webhook$config$secret;
      insecure_ssl?: Schemas.webhook$config$insecure$ssl;
      address?: string;
      room?: string;
    };
    /** Determines what [events](https://docs.github.com/enterprise-server@3.4/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events. */
    events?: string[];
    /** Determines a list of events to be added to the list of events that the Hook triggers for. */
    add_events?: string[];
    /** Determines a list of events to be removed from the list of events that the Hook triggers for. */
    remove_events?: string[];
    /** Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications. */
    active?: boolean;
  };
}
export interface Response$repos$update$webhook$Status$200 {
  "application/json": Schemas.hook;
}
export type Response$repos$update$webhook$Status$404 = Responses.not_found.Content;
export type Response$repos$update$webhook$Status$422 = Responses.validation_failed.Content;
export interface Parameter$repos$get$webhook$config$for$repo {
  owner: Parameters.owner;
  repo: Parameters.repo;
  hook_id: Parameters.hook$id;
}
export interface Response$repos$get$webhook$config$for$repo$Status$200 {
  "application/json": Schemas.webhook$config;
}
export interface Parameter$repos$update$webhook$config$for$repo {
  owner: Parameters.owner;
  repo: Parameters.repo;
  hook_id: Parameters.hook$id;
}
export interface RequestBody$repos$update$webhook$config$for$repo {
  "application/json": {
    url?: Schemas.webhook$config$url;
    content_type?: Schemas.webhook$config$content$type;
    secret?: Schemas.webhook$config$secret;
    insecure_ssl?: Schemas.webhook$config$insecure$ssl;
  };
}
export interface Response$repos$update$webhook$config$for$repo$Status$200 {
  "application/json": Schemas.webhook$config;
}
export interface Parameter$repos$list$webhook$deliveries {
  owner: Parameters.owner;
  repo: Parameters.repo;
  hook_id: Parameters.hook$id;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors. */
  cursor?: Parameters.cursor;
}
export interface Response$repos$list$webhook$deliveries$Status$200 {
  "application/json": Schemas.hook$delivery$item[];
}
export type Response$repos$list$webhook$deliveries$Status$400 = Responses.bad_request.Content;
export type Response$repos$list$webhook$deliveries$Status$422 = Responses.validation_failed.Content;
export interface Parameter$repos$get$webhook$delivery {
  owner: Parameters.owner;
  repo: Parameters.repo;
  hook_id: Parameters.hook$id;
  delivery_id: Parameters.delivery$id;
}
export interface Response$repos$get$webhook$delivery$Status$200 {
  "application/json": Schemas.hook$delivery;
}
export type Response$repos$get$webhook$delivery$Status$400 = Responses.bad_request.Content;
export type Response$repos$get$webhook$delivery$Status$422 = Responses.validation_failed.Content;
export interface Parameter$repos$redeliver$webhook$delivery {
  owner: Parameters.owner;
  repo: Parameters.repo;
  hook_id: Parameters.hook$id;
  delivery_id: Parameters.delivery$id;
}
export type Response$repos$redeliver$webhook$delivery$Status$202 = Responses.accepted.Content;
export type Response$repos$redeliver$webhook$delivery$Status$400 = Responses.bad_request.Content;
export type Response$repos$redeliver$webhook$delivery$Status$422 = Responses.validation_failed.Content;
export interface Parameter$repos$ping$webhook {
  owner: Parameters.owner;
  repo: Parameters.repo;
  hook_id: Parameters.hook$id;
}
export type Response$repos$ping$webhook$Status$404 = Responses.not_found.Content;
export interface Parameter$repos$test$push$webhook {
  owner: Parameters.owner;
  repo: Parameters.repo;
  hook_id: Parameters.hook$id;
}
export type Response$repos$test$push$webhook$Status$404 = Responses.not_found.Content;
export interface Parameter$apps$get$repo$installation {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface Response$apps$get$repo$installation$Status$200 {
  "application/json": Schemas.installation;
}
export type Response$apps$get$repo$installation$Status$301 = Responses.moved_permanently.Content;
export type Response$apps$get$repo$installation$Status$404 = Responses.not_found.Content;
export interface Parameter$repos$list$invitations {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$repos$list$invitations$Status$200 {
  "application/json": Schemas.repository$invitation[];
}
export interface Parameter$repos$delete$invitation {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** invitation_id parameter */
  invitation_id: Parameters.invitation$id;
}
export interface Parameter$repos$update$invitation {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** invitation_id parameter */
  invitation_id: Parameters.invitation$id;
}
export interface RequestBody$repos$update$invitation {
  "application/json": {
    /** The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`. */
    permissions?: "read" | "write" | "maintain" | "triage" | "admin";
  };
}
export interface Response$repos$update$invitation$Status$200 {
  "application/json": Schemas.repository$invitation;
}
export interface Parameter$issues$list$for$repo {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned. */
  milestone?: string;
  /** Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`. */
  state?: "open" | "closed" | "all";
  /** Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user. */
  assignee?: string;
  /** The user that created the issue. */
  creator?: string;
  /** A user that's mentioned in the issue. */
  mentioned?: string;
  /** A list of comma separated label names. Example: `bug,ui,@high` */
  labels?: Parameters.labels;
  /** What to sort results by. Can be either `created`, `updated`, `comments`. */
  sort?: "created" | "updated" | "comments";
  /** One of `asc` (ascending) or `desc` (descending). */
  direction?: Parameters.direction;
  /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
  since?: Parameters.since;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$issues$list$for$repo$Status$200 {
  "application/json": Schemas.issue[];
}
export type Response$issues$list$for$repo$Status$301 = Responses.moved_permanently.Content;
export type Response$issues$list$for$repo$Status$404 = Responses.not_found.Content;
export type Response$issues$list$for$repo$Status$422 = Responses.validation_failed.Content;
export interface Parameter$issues$create {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface RequestBody$issues$create {
  "application/json": {
    /** The title of the issue. */
    title: string | number;
    /** The contents of the issue. */
    body?: string;
    /** Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_ */
    assignee?: string | null;
    milestone?: (string | number) | null;
    /** Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._ */
    labels?: (
      | string
      | {
          id?: number;
          name?: string;
          description?: string | null;
          color?: string | null;
        }
    )[];
    /** Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._ */
    assignees?: string[];
  };
}
export interface Response$issues$create$Status$201 {
  "application/json": Schemas.issue;
}
export type Response$issues$create$Status$403 = Responses.forbidden.Content;
export type Response$issues$create$Status$404 = Responses.not_found.Content;
export type Response$issues$create$Status$410 = Responses.gone.Content;
export type Response$issues$create$Status$422 = Responses.validation_failed.Content;
export type Response$issues$create$Status$503 = Responses.service_unavailable.Content;
export interface Parameter$issues$list$comments$for$repo {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** One of `created` (when the repository was starred) or `updated` (when it was last pushed to). */
  sort?: Parameters.sort;
  /** Either `asc` or `desc`. Ignored without the `sort` parameter. */
  direction?: "asc" | "desc";
  /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
  since?: Parameters.since;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$issues$list$comments$for$repo$Status$200 {
  "application/json": Schemas.issue$comment[];
}
export type Response$issues$list$comments$for$repo$Status$404 = Responses.not_found.Content;
export type Response$issues$list$comments$for$repo$Status$422 = Responses.validation_failed.Content;
export interface Parameter$issues$get$comment {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** comment_id parameter */
  comment_id: Parameters.comment$id;
}
export interface Response$issues$get$comment$Status$200 {
  "application/json": Schemas.issue$comment;
}
export type Response$issues$get$comment$Status$404 = Responses.not_found.Content;
export interface Parameter$issues$delete$comment {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** comment_id parameter */
  comment_id: Parameters.comment$id;
}
export interface Parameter$issues$update$comment {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** comment_id parameter */
  comment_id: Parameters.comment$id;
}
export interface RequestBody$issues$update$comment {
  "application/json": {
    /** The contents of the comment. */
    body: string;
  };
}
export interface Response$issues$update$comment$Status$200 {
  "application/json": Schemas.issue$comment;
}
export type Response$issues$update$comment$Status$422 = Responses.validation_failed.Content;
export interface Parameter$reactions$list$for$issue$comment {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** comment_id parameter */
  comment_id: Parameters.comment$id;
  /** Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue comment. */
  content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$reactions$list$for$issue$comment$Status$200 {
  "application/json": Schemas.reaction[];
}
export type Response$reactions$list$for$issue$comment$Status$404 = Responses.not_found.Content;
export interface Parameter$reactions$create$for$issue$comment {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** comment_id parameter */
  comment_id: Parameters.comment$id;
}
export interface RequestBody$reactions$create$for$issue$comment {
  "application/json": {
    /** The [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types) to add to the issue comment. */
    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
  };
}
export interface Response$reactions$create$for$issue$comment$Status$200 {
  "application/json": Schemas.reaction;
}
export interface Response$reactions$create$for$issue$comment$Status$201 {
  "application/json": Schemas.reaction;
}
export type Response$reactions$create$for$issue$comment$Status$422 = Responses.validation_failed.Content;
export interface Parameter$reactions$delete$for$issue$comment {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** comment_id parameter */
  comment_id: Parameters.comment$id;
  reaction_id: Parameters.reaction$id;
}
export interface Parameter$issues$list$events$for$repo {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$issues$list$events$for$repo$Status$200 {
  "application/json": Schemas.issue$event[];
}
export type Response$issues$list$events$for$repo$Status$422 = Responses.validation_failed.Content;
export interface Parameter$issues$get$event {
  owner: Parameters.owner;
  repo: Parameters.repo;
  event_id: number;
}
export interface Response$issues$get$event$Status$200 {
  "application/json": Schemas.issue$event;
}
export type Response$issues$get$event$Status$403 = Responses.forbidden.Content;
export type Response$issues$get$event$Status$404 = Responses.not_found.Content;
export type Response$issues$get$event$Status$410 = Responses.gone.Content;
export interface Parameter$issues$get {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** issue_number parameter */
  issue_number: Parameters.issue$number;
}
export interface Response$issues$get$Status$200 {
  "application/json": Schemas.issue;
}
export type Response$issues$get$Status$301 = Responses.moved_permanently.Content;
export type Response$issues$get$Status$404 = Responses.not_found.Content;
export type Response$issues$get$Status$410 = Responses.gone.Content;
export interface Parameter$issues$update {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** issue_number parameter */
  issue_number: Parameters.issue$number;
}
export interface RequestBody$issues$update {
  "application/json": {
    /** The title of the issue. */
    title?: (string | number) | null;
    /** The contents of the issue. */
    body?: string | null;
    /** Login for the user that this issue should be assigned to. **This field is deprecated.** */
    assignee?: string | null;
    /** State of the issue. Either `open` or `closed`. */
    state?: "open" | "closed";
    milestone?: (string | number) | null;
    /** Labels to associate with this issue. Pass one or more Labels to _replace_ the set of Labels on this Issue. Send an empty array (`[]`) to clear all Labels from the Issue. _NOTE: Only users with push access can set labels for issues. Labels are silently dropped otherwise._ */
    labels?: (
      | string
      | {
          id?: number;
          name?: string;
          description?: string | null;
          color?: string | null;
        }
    )[];
    /** Logins for Users to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this Issue. Send an empty array (`[]`) to clear all assignees from the Issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._ */
    assignees?: string[];
  };
}
export interface Response$issues$update$Status$200 {
  "application/json": Schemas.issue;
}
export type Response$issues$update$Status$301 = Responses.moved_permanently.Content;
export type Response$issues$update$Status$403 = Responses.forbidden.Content;
export type Response$issues$update$Status$404 = Responses.not_found.Content;
export type Response$issues$update$Status$410 = Responses.gone.Content;
export type Response$issues$update$Status$422 = Responses.validation_failed.Content;
export type Response$issues$update$Status$503 = Responses.service_unavailable.Content;
export interface Parameter$issues$add$assignees {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** issue_number parameter */
  issue_number: Parameters.issue$number;
}
export interface RequestBody$issues$add$assignees {
  "application/json": {
    /** Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._ */
    assignees?: string[];
  };
}
export interface Response$issues$add$assignees$Status$201 {
  "application/json": Schemas.issue;
}
export interface Parameter$issues$remove$assignees {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** issue_number parameter */
  issue_number: Parameters.issue$number;
}
export interface RequestBody$issues$remove$assignees {
  "application/json": {
    /** Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._ */
    assignees?: string[];
  };
}
export interface Response$issues$remove$assignees$Status$200 {
  "application/json": Schemas.issue;
}
export interface Parameter$issues$list$comments {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** issue_number parameter */
  issue_number: Parameters.issue$number;
  /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
  since?: Parameters.since;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$issues$list$comments$Status$200 {
  "application/json": Schemas.issue$comment[];
}
export type Response$issues$list$comments$Status$404 = Responses.not_found.Content;
export type Response$issues$list$comments$Status$410 = Responses.gone.Content;
export interface Parameter$issues$create$comment {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** issue_number parameter */
  issue_number: Parameters.issue$number;
}
export interface RequestBody$issues$create$comment {
  "application/json": {
    /** The contents of the comment. */
    body: string;
  };
}
export interface Response$issues$create$comment$Status$201 {
  "application/json": Schemas.issue$comment;
}
export type Response$issues$create$comment$Status$403 = Responses.forbidden.Content;
export type Response$issues$create$comment$Status$404 = Responses.not_found.Content;
export type Response$issues$create$comment$Status$410 = Responses.gone.Content;
export type Response$issues$create$comment$Status$422 = Responses.validation_failed.Content;
export interface Parameter$issues$list$events {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** issue_number parameter */
  issue_number: Parameters.issue$number;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$issues$list$events$Status$200 {
  "application/json": Schemas.issue$event$for$issue[];
}
export type Response$issues$list$events$Status$410 = Responses.gone.Content;
export interface Parameter$issues$list$labels$on$issue {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** issue_number parameter */
  issue_number: Parameters.issue$number;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$issues$list$labels$on$issue$Status$200 {
  "application/json": Schemas.label[];
}
export type Response$issues$list$labels$on$issue$Status$410 = Responses.gone.Content;
export interface Parameter$issues$set$labels {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** issue_number parameter */
  issue_number: Parameters.issue$number;
}
export interface RequestBody$issues$set$labels {
  "application/json":
    | {
        /** The names of the labels to set for the issue. The labels you set replace any existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also add labels to the existing labels for an issue. For more information, see "[Add labels to an issue](https://docs.github.com/enterprise-server@3.4/rest/reference/issues#add-labels-to-an-issue)." */
        labels?: string[];
      }
    | string[]
    | {
        labels?: {
          name: string;
        }[];
      }
    | {
        name: string;
      }[]
    | string;
}
export interface Response$issues$set$labels$Status$200 {
  "application/json": Schemas.label[];
}
export type Response$issues$set$labels$Status$410 = Responses.gone.Content;
export type Response$issues$set$labels$Status$422 = Responses.validation_failed.Content;
export interface Parameter$issues$add$labels {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** issue_number parameter */
  issue_number: Parameters.issue$number;
}
export interface RequestBody$issues$add$labels {
  "application/json":
    | {
        /** The names of the labels to add to the issue's existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also replace all of the labels for an issue. For more information, see "[Set labels for an issue](https://docs.github.com/enterprise-server@3.4/rest/reference/issues#set-labels-for-an-issue)." */
        labels?: string[];
      }
    | string[]
    | {
        labels?: {
          name: string;
        }[];
      }
    | {
        name: string;
      }[]
    | string;
}
export interface Response$issues$add$labels$Status$200 {
  "application/json": Schemas.label[];
}
export type Response$issues$add$labels$Status$410 = Responses.gone.Content;
export type Response$issues$add$labels$Status$422 = Responses.validation_failed.Content;
export interface Parameter$issues$remove$all$labels {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** issue_number parameter */
  issue_number: Parameters.issue$number;
}
export type Response$issues$remove$all$labels$Status$410 = Responses.gone.Content;
export interface Parameter$issues$remove$label {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** issue_number parameter */
  issue_number: Parameters.issue$number;
  name: string;
}
export interface Response$issues$remove$label$Status$200 {
  "application/json": Schemas.label[];
}
export type Response$issues$remove$label$Status$404 = Responses.not_found.Content;
export type Response$issues$remove$label$Status$410 = Responses.gone.Content;
export interface Parameter$issues$lock {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** issue_number parameter */
  issue_number: Parameters.issue$number;
}
export interface RequestBody$issues$lock {
  "application/json": {
    /**
     * The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:
     * \* `off-topic`
     * \* `too heated`
     * \* `resolved`
     * \* `spam`
     */
    lock_reason?: "off-topic" | "too heated" | "resolved" | "spam";
  } | null;
}
export type Response$issues$lock$Status$403 = Responses.forbidden.Content;
export type Response$issues$lock$Status$404 = Responses.not_found.Content;
export type Response$issues$lock$Status$410 = Responses.gone.Content;
export type Response$issues$lock$Status$422 = Responses.validation_failed.Content;
export interface Parameter$issues$unlock {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** issue_number parameter */
  issue_number: Parameters.issue$number;
}
export type Response$issues$unlock$Status$403 = Responses.forbidden.Content;
export type Response$issues$unlock$Status$404 = Responses.not_found.Content;
export interface Parameter$reactions$list$for$issue {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** issue_number parameter */
  issue_number: Parameters.issue$number;
  /** Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue. */
  content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$reactions$list$for$issue$Status$200 {
  "application/json": Schemas.reaction[];
}
export type Response$reactions$list$for$issue$Status$404 = Responses.not_found.Content;
export type Response$reactions$list$for$issue$Status$410 = Responses.gone.Content;
export interface Parameter$reactions$create$for$issue {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** issue_number parameter */
  issue_number: Parameters.issue$number;
}
export interface RequestBody$reactions$create$for$issue {
  "application/json": {
    /** The [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types) to add to the issue. */
    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
  };
}
export interface Response$reactions$create$for$issue$Status$200 {
  "application/json": Schemas.reaction;
}
export interface Response$reactions$create$for$issue$Status$201 {
  "application/json": Schemas.reaction;
}
export type Response$reactions$create$for$issue$Status$422 = Responses.validation_failed.Content;
export interface Parameter$reactions$delete$for$issue {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** issue_number parameter */
  issue_number: Parameters.issue$number;
  reaction_id: Parameters.reaction$id;
}
export interface Parameter$issues$list$events$for$timeline {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** issue_number parameter */
  issue_number: Parameters.issue$number;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$issues$list$events$for$timeline$Status$200 {
  "application/json": Schemas.timeline$issue$events[];
}
export type Response$issues$list$events$for$timeline$Status$404 = Responses.not_found.Content;
export type Response$issues$list$events$for$timeline$Status$410 = Responses.gone.Content;
export interface Parameter$repos$list$deploy$keys {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$repos$list$deploy$keys$Status$200 {
  "application/json": Schemas.deploy$key[];
}
export interface Parameter$repos$create$deploy$key {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface RequestBody$repos$create$deploy$key {
  "application/json": {
    /** A name for the key. */
    title?: string;
    /** The contents of the key. */
    key: string;
    /**
     * If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.
     *
     * Deploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see "[Repository permission levels for an organization](https://docs.github.com/articles/repository-permission-levels-for-an-organization/)" and "[Permission levels for a user account repository](https://docs.github.com/articles/permission-levels-for-a-user-account-repository/)."
     */
    read_only?: boolean;
  };
}
export interface Response$repos$create$deploy$key$Status$201 {
  "application/json": Schemas.deploy$key;
}
export type Response$repos$create$deploy$key$Status$422 = Responses.validation_failed.Content;
export interface Parameter$repos$get$deploy$key {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** key_id parameter */
  key_id: Parameters.key$id;
}
export interface Response$repos$get$deploy$key$Status$200 {
  "application/json": Schemas.deploy$key;
}
export type Response$repos$get$deploy$key$Status$404 = Responses.not_found.Content;
export interface Parameter$repos$delete$deploy$key {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** key_id parameter */
  key_id: Parameters.key$id;
}
export interface Parameter$issues$list$labels$for$repo {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$issues$list$labels$for$repo$Status$200 {
  "application/json": Schemas.label[];
}
export type Response$issues$list$labels$for$repo$Status$404 = Responses.not_found.Content;
export interface Parameter$issues$create$label {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface RequestBody$issues$create$label {
  "application/json": {
    /** The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)." */
    name: string;
    /** The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`. */
    color?: string;
    /** A short description of the label. Must be 100 characters or fewer. */
    description?: string;
  };
}
export interface Response$issues$create$label$Status$201 {
  "application/json": Schemas.label;
}
export type Response$issues$create$label$Status$404 = Responses.not_found.Content;
export type Response$issues$create$label$Status$422 = Responses.validation_failed.Content;
export interface Parameter$issues$get$label {
  owner: Parameters.owner;
  repo: Parameters.repo;
  name: string;
}
export interface Response$issues$get$label$Status$200 {
  "application/json": Schemas.label;
}
export type Response$issues$get$label$Status$404 = Responses.not_found.Content;
export interface Parameter$issues$delete$label {
  owner: Parameters.owner;
  repo: Parameters.repo;
  name: string;
}
export interface Parameter$issues$update$label {
  owner: Parameters.owner;
  repo: Parameters.repo;
  name: string;
}
export interface RequestBody$issues$update$label {
  "application/json": {
    /** The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)." */
    new_name?: string;
    /** The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`. */
    color?: string;
    /** A short description of the label. Must be 100 characters or fewer. */
    description?: string;
  };
}
export interface Response$issues$update$label$Status$200 {
  "application/json": Schemas.label;
}
export interface Parameter$repos$list$languages {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface Response$repos$list$languages$Status$200 {
  "application/json": Schemas.language;
}
export interface Parameter$repos$enable$lfs$for$repo {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export type Response$repos$enable$lfs$for$repo$Status$202 = Responses.accepted.Content;
export interface Parameter$repos$disable$lfs$for$repo {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface Parameter$licenses$get$for$repo {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface Response$licenses$get$for$repo$Status$200 {
  "application/json": Schemas.license$content;
}
export interface Parameter$repos$merge$upstream {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface RequestBody$repos$merge$upstream {
  "application/json": {
    /** The name of the branch which should be updated to match upstream. */
    branch: string;
  };
}
export interface Response$repos$merge$upstream$Status$200 {
  "application/json": Schemas.merged$upstream;
}
export interface Parameter$repos$merge {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface RequestBody$repos$merge {
  "application/json": {
    /** The name of the base branch that the head will be merged into. */
    base: string;
    /** The head to merge. This can be a branch name or a commit SHA1. */
    head: string;
    /** Commit message to use for the merge commit. If omitted, a default message will be used. */
    commit_message?: string;
  };
}
export interface Response$repos$merge$Status$201 {
  "application/json": Schemas.commit;
}
export type Response$repos$merge$Status$403 = Responses.forbidden.Content;
export type Response$repos$merge$Status$422 = Responses.validation_failed.Content;
export interface Parameter$issues$list$milestones {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The state of the milestone. Either `open`, `closed`, or `all`. */
  state?: "open" | "closed" | "all";
  /** What to sort results by. Either `due_on` or `completeness`. */
  sort?: "due_on" | "completeness";
  /** The direction of the sort. Either `asc` or `desc`. */
  direction?: "asc" | "desc";
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$issues$list$milestones$Status$200 {
  "application/json": Schemas.milestone[];
}
export type Response$issues$list$milestones$Status$404 = Responses.not_found.Content;
export interface Parameter$issues$create$milestone {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface RequestBody$issues$create$milestone {
  "application/json": {
    /** The title of the milestone. */
    title: string;
    /** The state of the milestone. Either `open` or `closed`. */
    state?: "open" | "closed";
    /** A description of the milestone. */
    description?: string;
    /** The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
    due_on?: string;
  };
}
export interface Response$issues$create$milestone$Status$201 {
  "application/json": Schemas.milestone;
}
export type Response$issues$create$milestone$Status$404 = Responses.not_found.Content;
export type Response$issues$create$milestone$Status$422 = Responses.validation_failed.Content;
export interface Parameter$issues$get$milestone {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** milestone_number parameter */
  milestone_number: Parameters.milestone$number;
}
export interface Response$issues$get$milestone$Status$200 {
  "application/json": Schemas.milestone;
}
export type Response$issues$get$milestone$Status$404 = Responses.not_found.Content;
export interface Parameter$issues$delete$milestone {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** milestone_number parameter */
  milestone_number: Parameters.milestone$number;
}
export type Response$issues$delete$milestone$Status$404 = Responses.not_found.Content;
export interface Parameter$issues$update$milestone {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** milestone_number parameter */
  milestone_number: Parameters.milestone$number;
}
export interface RequestBody$issues$update$milestone {
  "application/json": {
    /** The title of the milestone. */
    title?: string;
    /** The state of the milestone. Either `open` or `closed`. */
    state?: "open" | "closed";
    /** A description of the milestone. */
    description?: string;
    /** The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
    due_on?: string;
  };
}
export interface Response$issues$update$milestone$Status$200 {
  "application/json": Schemas.milestone;
}
export interface Parameter$issues$list$labels$for$milestone {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** milestone_number parameter */
  milestone_number: Parameters.milestone$number;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$issues$list$labels$for$milestone$Status$200 {
  "application/json": Schemas.label[];
}
export interface Parameter$activity$list$repo$notifications$for$authenticated$user {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** If `true`, show notifications marked as read. */
  all?: Parameters.all;
  /** If `true`, only shows notifications in which the user is directly participating or mentioned. */
  participating?: Parameters.participating;
  /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
  since?: Parameters.since;
  /** Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
  before?: Parameters.before;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$activity$list$repo$notifications$for$authenticated$user$Status$200 {
  "application/json": Schemas.thread[];
}
export interface Parameter$activity$mark$repo$notifications$as$read {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface RequestBody$activity$mark$repo$notifications$as$read {
  "application/json": {
    /** Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp. */
    last_read_at?: string;
  };
}
export interface Response$activity$mark$repo$notifications$as$read$Status$202 {
  "application/json": {
    message?: string;
    url?: string;
  };
}
export interface Parameter$repos$get$pages {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface Response$repos$get$pages$Status$200 {
  "application/json": Schemas.page;
}
export type Response$repos$get$pages$Status$404 = Responses.not_found.Content;
export interface Parameter$repos$update$information$about$pages$site {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface RequestBody$repos$update$information$about$pages$site {
  "application/json":
    | {
        source: any;
      }
    | {
        cname: any;
      }
    | {
        public: any;
      }
    | {
        https_enforced: any;
      };
}
export type Response$repos$update$information$about$pages$site$Status$400 = Responses.bad_request.Content;
export type Response$repos$update$information$about$pages$site$Status$422 = Responses.validation_failed.Content;
export interface Parameter$repos$create$pages$site {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface RequestBody$repos$create$pages$site {
  /** The source branch and directory used to publish your Pages site. */
  "application/json": {
    /** The source branch and directory used to publish your Pages site. */
    source: {
      /** The repository branch used to publish your site's source files. */
      branch: string;
      /** The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/` */
      path?: "/" | "/docs";
    };
  } | null;
}
export interface Response$repos$create$pages$site$Status$201 {
  "application/json": Schemas.page;
}
export type Response$repos$create$pages$site$Status$409 = Responses.conflict.Content;
export type Response$repos$create$pages$site$Status$422 = Responses.validation_failed.Content;
export interface Parameter$repos$delete$pages$site {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export type Response$repos$delete$pages$site$Status$404 = Responses.not_found.Content;
export type Response$repos$delete$pages$site$Status$422 = Responses.validation_failed.Content;
export interface Parameter$repos$list$pages$builds {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$repos$list$pages$builds$Status$200 {
  "application/json": Schemas.page$build[];
}
export interface Parameter$repos$request$pages$build {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface Response$repos$request$pages$build$Status$201 {
  "application/json": Schemas.page$build$status;
}
export interface Parameter$repos$get$latest$pages$build {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface Response$repos$get$latest$pages$build$Status$200 {
  "application/json": Schemas.page$build;
}
export interface Parameter$repos$get$pages$build {
  owner: Parameters.owner;
  repo: Parameters.repo;
  build_id: number;
}
export interface Response$repos$get$pages$build$Status$200 {
  "application/json": Schemas.page$build;
}
export interface Parameter$enterprise$admin$list$pre$receive$hooks$for$repo {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
  /** One of `asc` (ascending) or `desc` (descending). */
  direction?: Parameters.direction;
  sort?: "created" | "updated" | "name";
}
export interface Response$enterprise$admin$list$pre$receive$hooks$for$repo$Status$200 {
  "application/json": Schemas.repository$pre$receive$hook[];
}
export interface Parameter$enterprise$admin$get$pre$receive$hook$for$repo {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** pre_receive_hook_id parameter */
  pre_receive_hook_id: Parameters.pre$receive$hook$id;
}
export interface Response$enterprise$admin$get$pre$receive$hook$for$repo$Status$200 {
  "application/json": Schemas.repository$pre$receive$hook;
}
export interface Parameter$enterprise$admin$remove$pre$receive$hook$enforcement$for$repo {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** pre_receive_hook_id parameter */
  pre_receive_hook_id: Parameters.pre$receive$hook$id;
}
export interface Response$enterprise$admin$remove$pre$receive$hook$enforcement$for$repo$Status$200 {
  "application/json": Schemas.repository$pre$receive$hook;
}
export interface Parameter$enterprise$admin$update$pre$receive$hook$enforcement$for$repo {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** pre_receive_hook_id parameter */
  pre_receive_hook_id: Parameters.pre$receive$hook$id;
}
export interface RequestBody$enterprise$admin$update$pre$receive$hook$enforcement$for$repo {
  "application/json": {
    /** The state of enforcement for the hook on this repository. */
    enforcement?: "enabled" | "disabled" | "testing";
  };
}
export interface Response$enterprise$admin$update$pre$receive$hook$enforcement$for$repo$Status$200 {
  "application/json": Schemas.repository$pre$receive$hook;
}
export interface Parameter$projects$list$for$repo {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`. */
  state?: "open" | "closed" | "all";
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$projects$list$for$repo$Status$200 {
  "application/json": Schemas.project[];
}
export type Response$projects$list$for$repo$Status$401 = Responses.requires_authentication.Content;
export type Response$projects$list$for$repo$Status$403 = Responses.forbidden.Content;
export type Response$projects$list$for$repo$Status$404 = Responses.not_found.Content;
export type Response$projects$list$for$repo$Status$410 = Responses.gone.Content;
export type Response$projects$list$for$repo$Status$422 = Responses.validation_failed_simple.Content;
export interface Parameter$projects$create$for$repo {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface RequestBody$projects$create$for$repo {
  "application/json": {
    /** The name of the project. */
    name: string;
    /** The description of the project. */
    body?: string;
  };
}
export interface Response$projects$create$for$repo$Status$201 {
  "application/json": Schemas.project;
}
export type Response$projects$create$for$repo$Status$401 = Responses.requires_authentication.Content;
export type Response$projects$create$for$repo$Status$403 = Responses.forbidden.Content;
export type Response$projects$create$for$repo$Status$404 = Responses.not_found.Content;
export type Response$projects$create$for$repo$Status$410 = Responses.gone.Content;
export type Response$projects$create$for$repo$Status$422 = Responses.validation_failed_simple.Content;
export interface Parameter$pulls$list {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** Either `open`, `closed`, or `all` to filter by state. */
  state?: "open" | "closed" | "all";
  /** Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`. */
  head?: string;
  /** Filter pulls by base branch name. Example: `gh-pages`. */
  base?: string;
  /** What to sort results by. Can be either `created`, `updated`, `popularity` (comment count) or `long-running` (age, filtering by pulls updated in the last month). */
  sort?: "created" | "updated" | "popularity" | "long-running";
  /** The direction of the sort. Can be either `asc` or `desc`. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`. */
  direction?: "asc" | "desc";
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$pulls$list$Status$200 {
  "application/json": Schemas.pull$request$simple[];
}
export type Response$pulls$list$Status$422 = Responses.validation_failed.Content;
export interface Parameter$pulls$create {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface RequestBody$pulls$create {
  "application/json": {
    /** The title of the new pull request. */
    title?: string;
    /** The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`. */
    head: string;
    /** The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository. */
    base: string;
    /** The contents of the pull request. */
    body?: string;
    /** Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request. */
    maintainer_can_modify?: boolean;
    /** Indicates whether the pull request is a draft. See "[Draft Pull Requests](https://docs.github.com/en/articles/about-pull-requests#draft-pull-requests)" in the GitHub Help documentation to learn more. */
    draft?: boolean;
    issue?: number;
  };
}
export interface Response$pulls$create$Status$201 {
  "application/json": Schemas.pull$request;
}
export type Response$pulls$create$Status$403 = Responses.forbidden.Content;
export type Response$pulls$create$Status$422 = Responses.validation_failed.Content;
export interface Parameter$pulls$list$review$comments$for$repo {
  owner: Parameters.owner;
  repo: Parameters.repo;
  sort?: "created" | "updated" | "created_at";
  /** Can be either `asc` or `desc`. Ignored without `sort` parameter. */
  direction?: "asc" | "desc";
  /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
  since?: Parameters.since;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$pulls$list$review$comments$for$repo$Status$200 {
  "application/json": Schemas.pull$request$review$comment[];
}
export interface Parameter$pulls$get$review$comment {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** comment_id parameter */
  comment_id: Parameters.comment$id;
}
export interface Response$pulls$get$review$comment$Status$200 {
  "application/json": Schemas.pull$request$review$comment;
}
export type Response$pulls$get$review$comment$Status$404 = Responses.not_found.Content;
export interface Parameter$pulls$delete$review$comment {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** comment_id parameter */
  comment_id: Parameters.comment$id;
}
export type Response$pulls$delete$review$comment$Status$404 = Responses.not_found.Content;
export interface Parameter$pulls$update$review$comment {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** comment_id parameter */
  comment_id: Parameters.comment$id;
}
export interface RequestBody$pulls$update$review$comment {
  "application/json": {
    /** The text of the reply to the review comment. */
    body: string;
  };
}
export interface Response$pulls$update$review$comment$Status$200 {
  "application/json": Schemas.pull$request$review$comment;
}
export interface Parameter$reactions$list$for$pull$request$review$comment {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** comment_id parameter */
  comment_id: Parameters.comment$id;
  /** Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a pull request review comment. */
  content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$reactions$list$for$pull$request$review$comment$Status$200 {
  "application/json": Schemas.reaction[];
}
export type Response$reactions$list$for$pull$request$review$comment$Status$404 = Responses.not_found.Content;
export interface Parameter$reactions$create$for$pull$request$review$comment {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** comment_id parameter */
  comment_id: Parameters.comment$id;
}
export interface RequestBody$reactions$create$for$pull$request$review$comment {
  "application/json": {
    /** The [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types) to add to the pull request review comment. */
    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
  };
}
export interface Response$reactions$create$for$pull$request$review$comment$Status$200 {
  "application/json": Schemas.reaction;
}
export interface Response$reactions$create$for$pull$request$review$comment$Status$201 {
  "application/json": Schemas.reaction;
}
export type Response$reactions$create$for$pull$request$review$comment$Status$422 = Responses.validation_failed.Content;
export interface Parameter$reactions$delete$for$pull$request$comment {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** comment_id parameter */
  comment_id: Parameters.comment$id;
  reaction_id: Parameters.reaction$id;
}
export interface Parameter$pulls$get {
  owner: Parameters.owner;
  repo: Parameters.repo;
  pull_number: Parameters.pull$number;
}
export interface Response$pulls$get$Status$200 {
  "application/json": Schemas.pull$request;
}
export type Response$pulls$get$Status$404 = Responses.not_found.Content;
export type Response$pulls$get$Status$500 = Responses.internal_error.Content;
export interface Parameter$pulls$update {
  owner: Parameters.owner;
  repo: Parameters.repo;
  pull_number: Parameters.pull$number;
}
export interface RequestBody$pulls$update {
  "application/json": {
    /** The title of the pull request. */
    title?: string;
    /** The contents of the pull request. */
    body?: string;
    /** State of this Pull Request. Either `open` or `closed`. */
    state?: "open" | "closed";
    /** The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository. */
    base?: string;
    /** Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request. */
    maintainer_can_modify?: boolean;
  };
}
export interface Response$pulls$update$Status$200 {
  "application/json": Schemas.pull$request;
}
export type Response$pulls$update$Status$403 = Responses.forbidden.Content;
export type Response$pulls$update$Status$422 = Responses.validation_failed.Content;
export interface Parameter$pulls$list$review$comments {
  owner: Parameters.owner;
  repo: Parameters.repo;
  pull_number: Parameters.pull$number;
  /** One of `created` (when the repository was starred) or `updated` (when it was last pushed to). */
  sort?: Parameters.sort;
  /** Can be either `asc` or `desc`. Ignored without `sort` parameter. */
  direction?: "asc" | "desc";
  /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
  since?: Parameters.since;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$pulls$list$review$comments$Status$200 {
  "application/json": Schemas.pull$request$review$comment[];
}
export interface Parameter$pulls$create$review$comment {
  owner: Parameters.owner;
  repo: Parameters.repo;
  pull_number: Parameters.pull$number;
}
export interface RequestBody$pulls$create$review$comment {
  "application/json": {
    /** The text of the review comment. */
    body: string;
    /** The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`. */
    commit_id?: string;
    /** The relative path to the file that necessitates a comment. */
    path?: string;
    /** **Required without `comfort-fade` preview unless using `in_reply_to`**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above. */
    position?: number;
    /** **Required with `comfort-fade` preview unless using `in_reply_to`**. In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see "[Diff view options](https://docs.github.com/en/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub Help documentation. */
    side?: "LEFT" | "RIGHT";
    /** **Required with `comfort-fade` preview unless using `in_reply_to`**. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to. */
    line?: number;
    /** **Required when using multi-line comments unless using `in_reply_to`**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. */
    start_line?: number;
    /** **Required when using multi-line comments unless using `in_reply_to`**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. See `side` in this table for additional context. */
    start_side?: "LEFT" | "RIGHT" | "side";
    /** The ID of the review comment to reply to. To find the ID of a review comment with ["List review comments on a pull request"](#list-review-comments-on-a-pull-request). When specified, all parameters other than `body` in the request body are ignored. */
    in_reply_to?: number;
  };
}
export interface Response$pulls$create$review$comment$Status$201 {
  "application/json": Schemas.pull$request$review$comment;
}
export type Response$pulls$create$review$comment$Status$403 = Responses.forbidden.Content;
export type Response$pulls$create$review$comment$Status$422 = Responses.validation_failed.Content;
export interface Parameter$pulls$create$reply$for$review$comment {
  owner: Parameters.owner;
  repo: Parameters.repo;
  pull_number: Parameters.pull$number;
  /** comment_id parameter */
  comment_id: Parameters.comment$id;
}
export interface RequestBody$pulls$create$reply$for$review$comment {
  "application/json": {
    /** The text of the review comment. */
    body: string;
  };
}
export interface Response$pulls$create$reply$for$review$comment$Status$201 {
  "application/json": Schemas.pull$request$review$comment;
}
export type Response$pulls$create$reply$for$review$comment$Status$404 = Responses.not_found.Content;
export interface Parameter$pulls$list$commits {
  owner: Parameters.owner;
  repo: Parameters.repo;
  pull_number: Parameters.pull$number;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$pulls$list$commits$Status$200 {
  "application/json": Schemas.commit[];
}
export interface Parameter$pulls$list$files {
  owner: Parameters.owner;
  repo: Parameters.repo;
  pull_number: Parameters.pull$number;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$pulls$list$files$Status$200 {
  "application/json": Schemas.diff$entry[];
}
export type Response$pulls$list$files$Status$422 = Responses.validation_failed.Content;
export type Response$pulls$list$files$Status$500 = Responses.internal_error.Content;
export interface Parameter$pulls$check$if$merged {
  owner: Parameters.owner;
  repo: Parameters.repo;
  pull_number: Parameters.pull$number;
}
export interface Parameter$pulls$merge {
  owner: Parameters.owner;
  repo: Parameters.repo;
  pull_number: Parameters.pull$number;
}
export interface RequestBody$pulls$merge {
  "application/json": {
    /** Title for the automatic commit message. */
    commit_title?: string;
    /** Extra detail to append to automatic commit message. */
    commit_message?: string;
    /** SHA that pull request head must match to allow merge. */
    sha?: string;
    /** Merge method to use. Possible values are `merge`, `squash` or `rebase`. Default is `merge`. */
    merge_method?: "merge" | "squash" | "rebase";
  } | null;
}
export interface Response$pulls$merge$Status$200 {
  "application/json": Schemas.pull$request$merge$result;
}
export type Response$pulls$merge$Status$403 = Responses.forbidden.Content;
export type Response$pulls$merge$Status$404 = Responses.not_found.Content;
export interface Response$pulls$merge$Status$405 {
  "application/json": {
    message?: string;
    documentation_url?: string;
  };
}
export interface Response$pulls$merge$Status$409 {
  "application/json": {
    message?: string;
    documentation_url?: string;
  };
}
export type Response$pulls$merge$Status$422 = Responses.validation_failed.Content;
export interface Parameter$pulls$list$requested$reviewers {
  owner: Parameters.owner;
  repo: Parameters.repo;
  pull_number: Parameters.pull$number;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$pulls$list$requested$reviewers$Status$200 {
  "application/json": Schemas.pull$request$review$request;
}
export interface Parameter$pulls$request$reviewers {
  owner: Parameters.owner;
  repo: Parameters.repo;
  pull_number: Parameters.pull$number;
}
export interface RequestBody$pulls$request$reviewers {
  "application/json":
    | {
        reviewers: any;
      }
    | {
        team_reviewers: any;
      };
}
export interface Response$pulls$request$reviewers$Status$201 {
  "application/json": Schemas.pull$request$simple;
}
export type Response$pulls$request$reviewers$Status$403 = Responses.forbidden.Content;
export interface Parameter$pulls$remove$requested$reviewers {
  owner: Parameters.owner;
  repo: Parameters.repo;
  pull_number: Parameters.pull$number;
}
export interface RequestBody$pulls$remove$requested$reviewers {
  "application/json": {
    /** An array of user `login`s that will be removed. */
    reviewers: string[];
    /** An array of team `slug`s that will be removed. */
    team_reviewers?: string[];
  };
}
export interface Response$pulls$remove$requested$reviewers$Status$200 {
  "application/json": Schemas.pull$request$simple;
}
export type Response$pulls$remove$requested$reviewers$Status$422 = Responses.validation_failed.Content;
export interface Parameter$pulls$list$reviews {
  owner: Parameters.owner;
  repo: Parameters.repo;
  pull_number: Parameters.pull$number;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$pulls$list$reviews$Status$200 {
  "application/json": Schemas.pull$request$review[];
}
export interface Parameter$pulls$create$review {
  owner: Parameters.owner;
  repo: Parameters.repo;
  pull_number: Parameters.pull$number;
}
export interface RequestBody$pulls$create$review {
  "application/json": {
    /** The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value. */
    commit_id?: string;
    /** **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review. */
    body?: string;
    /** The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/enterprise-server@3.4/rest/reference/pulls#submit-a-review-for-a-pull-request) when you are ready. */
    event?: "APPROVE" | "REQUEST_CHANGES" | "COMMENT";
    /** Use the following table to specify the location, destination, and contents of the draft review comment. */
    comments?: {
      /** The relative path to the file that necessitates a review comment. */
      path: string;
      /** The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note below. */
      position?: number;
      /** Text of the review comment. */
      body: string;
      line?: number;
      side?: string;
      start_line?: number;
      start_side?: string;
    }[];
  };
}
export interface Response$pulls$create$review$Status$200 {
  "application/json": Schemas.pull$request$review;
}
export type Response$pulls$create$review$Status$403 = Responses.forbidden.Content;
export type Response$pulls$create$review$Status$422 = Responses.validation_failed_simple.Content;
export interface Parameter$pulls$get$review {
  owner: Parameters.owner;
  repo: Parameters.repo;
  pull_number: Parameters.pull$number;
  /** review_id parameter */
  review_id: Parameters.review$id;
}
export interface Response$pulls$get$review$Status$200 {
  "application/json": Schemas.pull$request$review;
}
export type Response$pulls$get$review$Status$404 = Responses.not_found.Content;
export interface Parameter$pulls$update$review {
  owner: Parameters.owner;
  repo: Parameters.repo;
  pull_number: Parameters.pull$number;
  /** review_id parameter */
  review_id: Parameters.review$id;
}
export interface RequestBody$pulls$update$review {
  "application/json": {
    /** The body text of the pull request review. */
    body: string;
  };
}
export interface Response$pulls$update$review$Status$200 {
  "application/json": Schemas.pull$request$review;
}
export type Response$pulls$update$review$Status$422 = Responses.validation_failed_simple.Content;
export interface Parameter$pulls$delete$pending$review {
  owner: Parameters.owner;
  repo: Parameters.repo;
  pull_number: Parameters.pull$number;
  /** review_id parameter */
  review_id: Parameters.review$id;
}
export interface Response$pulls$delete$pending$review$Status$200 {
  "application/json": Schemas.pull$request$review;
}
export type Response$pulls$delete$pending$review$Status$404 = Responses.not_found.Content;
export type Response$pulls$delete$pending$review$Status$422 = Responses.validation_failed_simple.Content;
export interface Parameter$pulls$list$comments$for$review {
  owner: Parameters.owner;
  repo: Parameters.repo;
  pull_number: Parameters.pull$number;
  /** review_id parameter */
  review_id: Parameters.review$id;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$pulls$list$comments$for$review$Status$200 {
  "application/json": Schemas.review$comment[];
}
export type Response$pulls$list$comments$for$review$Status$404 = Responses.not_found.Content;
export interface Parameter$pulls$dismiss$review {
  owner: Parameters.owner;
  repo: Parameters.repo;
  pull_number: Parameters.pull$number;
  /** review_id parameter */
  review_id: Parameters.review$id;
}
export interface RequestBody$pulls$dismiss$review {
  "application/json": {
    /** The message for the pull request review dismissal */
    message: string;
    event?: string;
  };
}
export interface Response$pulls$dismiss$review$Status$200 {
  "application/json": Schemas.pull$request$review;
}
export type Response$pulls$dismiss$review$Status$404 = Responses.not_found.Content;
export type Response$pulls$dismiss$review$Status$422 = Responses.validation_failed_simple.Content;
export interface Parameter$pulls$submit$review {
  owner: Parameters.owner;
  repo: Parameters.repo;
  pull_number: Parameters.pull$number;
  /** review_id parameter */
  review_id: Parameters.review$id;
}
export interface RequestBody$pulls$submit$review {
  "application/json": {
    /** The body text of the pull request review */
    body?: string;
    /** The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action. */
    event: "APPROVE" | "REQUEST_CHANGES" | "COMMENT";
  };
}
export interface Response$pulls$submit$review$Status$200 {
  "application/json": Schemas.pull$request$review;
}
export type Response$pulls$submit$review$Status$403 = Responses.forbidden.Content;
export type Response$pulls$submit$review$Status$404 = Responses.not_found.Content;
export type Response$pulls$submit$review$Status$422 = Responses.validation_failed_simple.Content;
export interface Parameter$pulls$update$branch {
  owner: Parameters.owner;
  repo: Parameters.repo;
  pull_number: Parameters.pull$number;
}
export interface RequestBody$pulls$update$branch {
  "application/json": {
    /** The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the "[List commits](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#list-commits)" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref. */
    expected_head_sha?: string;
  } | null;
}
export interface Response$pulls$update$branch$Status$202 {
  "application/json": {
    message?: string;
    url?: string;
  };
}
export type Response$pulls$update$branch$Status$403 = Responses.forbidden.Content;
export type Response$pulls$update$branch$Status$422 = Responses.validation_failed.Content;
export interface Parameter$repos$get$readme {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`) */
  ref?: string;
}
export interface Response$repos$get$readme$Status$200 {
  "application/json": Schemas.content$file;
}
export type Response$repos$get$readme$Status$404 = Responses.not_found.Content;
export type Response$repos$get$readme$Status$422 = Responses.validation_failed.Content;
export interface Parameter$repos$get$readme$in$directory {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The alternate path to look for a README file */
  dir: string;
  /** The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`) */
  ref?: string;
}
export interface Response$repos$get$readme$in$directory$Status$200 {
  "application/json": Schemas.content$file;
}
export type Response$repos$get$readme$in$directory$Status$404 = Responses.not_found.Content;
export type Response$repos$get$readme$in$directory$Status$422 = Responses.validation_failed.Content;
export interface Parameter$repos$list$releases {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$repos$list$releases$Status$200 {
  "application/json": Schemas.release[];
}
export type Response$repos$list$releases$Status$404 = Responses.not_found.Content;
export interface Parameter$repos$create$release {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface RequestBody$repos$create$release {
  "application/json": {
    /** The name of the tag. */
    tag_name: string;
    /** Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`). */
    target_commitish?: string;
    /** The name of the release. */
    name?: string;
    /** Text describing the contents of the tag. */
    body?: string;
    /** `true` to create a draft (unpublished) release, `false` to create a published one. */
    draft?: boolean;
    /** `true` to identify the release as a prerelease. `false` to identify the release as a full release. */
    prerelease?: boolean;
    /** Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes. */
    generate_release_notes?: boolean;
  };
}
export interface Response$repos$create$release$Status$201 {
  "application/json": Schemas.release;
}
export type Response$repos$create$release$Status$422 = Responses.validation_failed.Content;
export interface Parameter$repos$get$release$asset {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** asset_id parameter */
  asset_id: Parameters.asset$id;
}
export interface Response$repos$get$release$asset$Status$200 {
  "application/json": Schemas.release$asset;
}
export type Response$repos$get$release$asset$Status$404 = Responses.not_found.Content;
export type Response$repos$get$release$asset$Status$415 = Responses.preview_header_missing.Content;
export interface Parameter$repos$delete$release$asset {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** asset_id parameter */
  asset_id: Parameters.asset$id;
}
export interface Parameter$repos$update$release$asset {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** asset_id parameter */
  asset_id: Parameters.asset$id;
}
export interface RequestBody$repos$update$release$asset {
  "application/json": {
    /** The file name of the asset. */
    name?: string;
    /** An alternate short description of the asset. Used in place of the filename. */
    label?: string;
    state?: string;
  };
}
export interface Response$repos$update$release$asset$Status$200 {
  "application/json": Schemas.release$asset;
}
export interface Parameter$repos$generate$release$notes {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface RequestBody$repos$generate$release$notes {
  "application/json": {
    /** The tag name for the release. This can be an existing tag or a new one. */
    tag_name: string;
    /** Specifies the commitish value that will be the target for the release's tag. Required if the supplied tag_name does not reference an existing tag. Ignored if the tag_name already exists. */
    target_commitish?: string;
    /** The name of the previous tag to use as the starting point for the release notes. Use to manually specify the range for the set of changes considered as part this release. */
    previous_tag_name?: string;
    /** Specifies a path to a file in the repository containing configuration settings used for generating the release notes. If unspecified, the configuration file located in the repository at '.github/release.yml' or '.github/release.yaml' will be used. If that is not present, the default configuration will be used. */
    configuration_file_path?: string;
  };
}
export interface Response$repos$generate$release$notes$Status$200 {
  "application/json": Schemas.release$notes$content;
}
export type Response$repos$generate$release$notes$Status$404 = Responses.not_found.Content;
export interface Parameter$repos$get$latest$release {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface Response$repos$get$latest$release$Status$200 {
  "application/json": Schemas.release;
}
export interface Parameter$repos$get$release$by$tag {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** tag parameter */
  tag: string;
}
export interface Response$repos$get$release$by$tag$Status$200 {
  "application/json": Schemas.release;
}
export type Response$repos$get$release$by$tag$Status$404 = Responses.not_found.Content;
export interface Parameter$repos$get$release {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** release_id parameter */
  release_id: Parameters.release$id;
}
export interface Response$repos$get$release$Status$200 {
  "application/json": Schemas.release;
}
export type Response$repos$get$release$Status$404 = Responses.not_found.Content;
export interface Parameter$repos$delete$release {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** release_id parameter */
  release_id: Parameters.release$id;
}
export interface Parameter$repos$update$release {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** release_id parameter */
  release_id: Parameters.release$id;
}
export interface RequestBody$repos$update$release {
  "application/json": {
    /** The name of the tag. */
    tag_name?: string;
    /** Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`). */
    target_commitish?: string;
    /** The name of the release. */
    name?: string;
    /** Text describing the contents of the tag. */
    body?: string;
    /** `true` makes the release a draft, and `false` publishes the release. */
    draft?: boolean;
    /** `true` to identify the release as a prerelease, `false` to identify the release as a full release. */
    prerelease?: boolean;
  };
}
export interface Response$repos$update$release$Status$200 {
  "application/json": Schemas.release;
}
export interface Parameter$repos$list$release$assets {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** release_id parameter */
  release_id: Parameters.release$id;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$repos$list$release$assets$Status$200 {
  "application/json": Schemas.release$asset[];
}
export interface Parameter$repos$upload$release$asset {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** release_id parameter */
  release_id: Parameters.release$id;
  name: string;
  label?: string;
}
export interface RequestBody$repos$upload$release$asset {
  /** The raw file data */
  "*/*": string;
}
export interface Response$repos$upload$release$asset$Status$201 {
  "application/json": Schemas.release$asset;
}
export interface Parameter$reactions$create$for$release {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** release_id parameter */
  release_id: Parameters.release$id;
}
export interface RequestBody$reactions$create$for$release {
  "application/json": {
    /** The [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types) to add to the release. */
    content: "+1" | "laugh" | "heart" | "hooray" | "rocket" | "eyes";
  };
}
export interface Response$reactions$create$for$release$Status$200 {
  "application/json": Schemas.reaction;
}
export interface Response$reactions$create$for$release$Status$201 {
  "application/json": Schemas.reaction;
}
export type Response$reactions$create$for$release$Status$422 = Responses.validation_failed.Content;
export interface Parameter$repos$list$cache$info {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$repos$list$cache$info$Status$200 {
  "application/json": {
    host: string;
    location: string;
    git: {
      sync_status: "offline" | "inactive" | "in_sync" | "not_in_sync";
      last_sync: string;
    };
  }[];
}
export type Response$repos$list$cache$info$Status$403 = Responses.forbidden.Content;
export type Response$repos$list$cache$info$Status$404 = Responses.not_found.Content;
export interface Parameter$secret$scanning$list$alerts$for$repo {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** Set to `open` or `resolved` to only list secret scanning alerts in a specific state. */
  state?: Parameters.secret$scanning$alert$state;
  /**
   * A comma-separated list of secret types to return. By default all secret types are returned.
   * See "[Secret scanning patterns](https://docs.github.com/enterprise-server@3.4/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)"
   * for a complete list of secret types (API slug).
   */
  secret_type?: Parameters.secret$scanning$alert$secret$type;
  /** A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`. */
  resolution?: Parameters.secret$scanning$alert$resolution;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
}
export interface Response$secret$scanning$list$alerts$for$repo$Status$200 {
  "application/json": Schemas.secret$scanning$alert[];
}
export type Response$secret$scanning$list$alerts$for$repo$Status$503 = Responses.service_unavailable.Content;
export interface Parameter$secret$scanning$get$alert {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. */
  alert_number: Parameters.alert$number;
}
export interface Response$secret$scanning$get$alert$Status$200 {
  "application/json": Schemas.secret$scanning$alert;
}
export type Response$secret$scanning$get$alert$Status$503 = Responses.service_unavailable.Content;
export interface Parameter$secret$scanning$update$alert {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. */
  alert_number: Parameters.alert$number;
}
export interface RequestBody$secret$scanning$update$alert {
  "application/json": {
    state: Schemas.secret$scanning$alert$state;
    resolution?: Schemas.secret$scanning$alert$resolution;
  };
}
export interface Response$secret$scanning$update$alert$Status$200 {
  "application/json": Schemas.secret$scanning$alert;
}
export type Response$secret$scanning$update$alert$Status$503 = Responses.service_unavailable.Content;
export interface Parameter$secret$scanning$list$locations$for$alert {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. */
  alert_number: Parameters.alert$number;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
}
export interface Response$secret$scanning$list$locations$for$alert$Status$200 {
  /** List of locations where the secret was detected */
  "application/json": Schemas.secret$scanning$location[];
}
export type Response$secret$scanning$list$locations$for$alert$Status$503 = Responses.service_unavailable.Content;
export interface Parameter$activity$list$stargazers$for$repo {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$activity$list$stargazers$for$repo$Status$200 {
  "application/json": Schemas.simple$user[] | Schemas.stargazer[];
}
export type Response$activity$list$stargazers$for$repo$Status$422 = Responses.validation_failed.Content;
export interface Parameter$repos$get$code$frequency$stats {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface Response$repos$get$code$frequency$stats$Status$200 {
  "application/json": Schemas.code$frequency$stat[];
}
export type Response$repos$get$code$frequency$stats$Status$202 = Responses.accepted.Content;
export interface Parameter$repos$get$commit$activity$stats {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface Response$repos$get$commit$activity$stats$Status$200 {
  "application/json": Schemas.commit$activity[];
}
export type Response$repos$get$commit$activity$stats$Status$202 = Responses.accepted.Content;
export interface Parameter$repos$get$contributors$stats {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface Response$repos$get$contributors$stats$Status$200 {
  "application/json": Schemas.contributor$activity[];
}
export type Response$repos$get$contributors$stats$Status$202 = Responses.accepted.Content;
export interface Parameter$repos$get$participation$stats {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface Response$repos$get$participation$stats$Status$200 {
  "application/json": Schemas.participation$stats;
}
export type Response$repos$get$participation$stats$Status$404 = Responses.not_found.Content;
export interface Parameter$repos$get$punch$card$stats {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface Response$repos$get$punch$card$stats$Status$200 {
  "application/json": Schemas.code$frequency$stat[];
}
export interface Parameter$repos$create$commit$status {
  owner: Parameters.owner;
  repo: Parameters.repo;
  sha: string;
}
export interface RequestBody$repos$create$commit$status {
  "application/json": {
    /** The state of the status. Can be one of `error`, `failure`, `pending`, or `success`. */
    state: "error" | "failure" | "pending" | "success";
    /**
     * The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.
     * For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:
     * `http://ci.example.com/user/repo/build/sha`
     */
    target_url?: string;
    /** A short description of the status. */
    description?: string;
    /** A string label to differentiate this status from the status of other systems. This field is case-insensitive. */
    context?: string;
  };
}
export interface Response$repos$create$commit$status$Status$201 {
  "application/json": Schemas.status;
}
export interface Parameter$activity$list$watchers$for$repo {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$activity$list$watchers$for$repo$Status$200 {
  "application/json": Schemas.simple$user[];
}
export interface Parameter$activity$get$repo$subscription {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface Response$activity$get$repo$subscription$Status$200 {
  "application/json": Schemas.repository$subscription;
}
export type Response$activity$get$repo$subscription$Status$403 = Responses.forbidden.Content;
export interface Parameter$activity$set$repo$subscription {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface RequestBody$activity$set$repo$subscription {
  "application/json": {
    /** Determines if notifications should be received from this repository. */
    subscribed?: boolean;
    /** Determines if all notifications should be blocked from this repository. */
    ignored?: boolean;
  };
}
export interface Response$activity$set$repo$subscription$Status$200 {
  "application/json": Schemas.repository$subscription;
}
export interface Parameter$activity$delete$repo$subscription {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface Parameter$repos$list$tags {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$repos$list$tags$Status$200 {
  "application/json": Schemas.tag[];
}
export interface Parameter$repos$download$tarball$archive {
  owner: Parameters.owner;
  repo: Parameters.repo;
  ref: string;
}
export interface Parameter$repos$list$teams {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$repos$list$teams$Status$200 {
  "application/json": Schemas.team[];
}
export interface Parameter$repos$get$all$topics {
  owner: Parameters.owner;
  repo: Parameters.repo;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
}
export interface Response$repos$get$all$topics$Status$200 {
  "application/json": Schemas.topic;
}
export type Response$repos$get$all$topics$Status$404 = Responses.not_found.Content;
export interface Parameter$repos$replace$all$topics {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface RequestBody$repos$replace$all$topics {
  "application/json": {
    /** An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` cannot contain uppercase letters. */
    names: string[];
  };
}
export interface Response$repos$replace$all$topics$Status$200 {
  "application/json": Schemas.topic;
}
export type Response$repos$replace$all$topics$Status$404 = Responses.not_found.Content;
export type Response$repos$replace$all$topics$Status$422 = Responses.validation_failed_simple.Content;
export interface Parameter$repos$transfer {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface RequestBody$repos$transfer {
  "application/json": {
    /** The username or organization name the repository will be transferred to. */
    new_owner: string;
    /** ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories. */
    team_ids?: number[];
  };
}
export interface Response$repos$transfer$Status$202 {
  "application/json": Schemas.minimal$repository;
}
export interface Parameter$repos$download$zipball$archive {
  owner: Parameters.owner;
  repo: Parameters.repo;
  ref: string;
}
export interface Parameter$repos$create$using$template {
  template_owner: string;
  template_repo: string;
}
export interface RequestBody$repos$create$using$template {
  "application/json": {
    /** The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization. */
    owner?: string;
    /** The name of the new repository. */
    name: string;
    /** A short description of the new repository. */
    description?: string;
    /** Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`. */
    include_all_branches?: boolean;
    /** Either `true` to create a new private repository or `false` to create a new public one. */
    private?: boolean;
  };
}
export interface Response$repos$create$using$template$Status$201 {
  "application/json": Schemas.repository;
}
export interface Parameter$repos$list$public {
  /** A repository ID. Only return repositories with an ID greater than this ID. */
  since?: Parameters.since$repo;
  /** Specifies the types of repositories to return. Can be one of `all` or `public`. Default: `public`. Note: For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories available to all users on the enterprise. */
  visibility?: "all" | "public";
}
export interface Response$repos$list$public$Status$200 {
  "application/json": Schemas.minimal$repository[];
}
export type Response$repos$list$public$Status$422 = Responses.validation_failed.Content;
export interface Parameter$actions$list$environment$secrets {
  repository_id: Parameters.repository$id;
  /** The name of the environment */
  environment_name: Parameters.environment$name;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$actions$list$environment$secrets$Status$200 {
  "application/json": {
    total_count: number;
    secrets: Schemas.actions$secret[];
  };
}
export interface Parameter$actions$get$environment$public$key {
  repository_id: Parameters.repository$id;
  /** The name of the environment */
  environment_name: Parameters.environment$name;
}
export interface Response$actions$get$environment$public$key$Status$200 {
  "application/json": Schemas.actions$public$key;
}
export interface Parameter$actions$get$environment$secret {
  repository_id: Parameters.repository$id;
  /** The name of the environment */
  environment_name: Parameters.environment$name;
  /** secret_name parameter */
  secret_name: Parameters.secret$name;
}
export interface Response$actions$get$environment$secret$Status$200 {
  "application/json": Schemas.actions$secret;
}
export interface Parameter$actions$create$or$update$environment$secret {
  repository_id: Parameters.repository$id;
  /** The name of the environment */
  environment_name: Parameters.environment$name;
  /** secret_name parameter */
  secret_name: Parameters.secret$name;
}
export interface RequestBody$actions$create$or$update$environment$secret {
  "application/json": {
    /** Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an environment public key](https://docs.github.com/enterprise-server@3.4/rest/reference/actions#get-an-environment-public-key) endpoint. */
    encrypted_value: string;
    /** ID of the key you used to encrypt the secret. */
    key_id: string;
  };
}
export interface Response$actions$create$or$update$environment$secret$Status$201 {
  "application/json": Schemas.empty$object;
}
export interface Parameter$actions$delete$environment$secret {
  repository_id: Parameters.repository$id;
  /** The name of the environment */
  environment_name: Parameters.environment$name;
  /** secret_name parameter */
  secret_name: Parameters.secret$name;
}
export interface Parameter$search$code {
  /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.4/rest/reference/search#constructing-a-search-query). See "[Searching code](https://docs.github.com/articles/searching-code/)" for a detailed list of qualifiers. */
  q: string;
  /** Sorts the results of your query. Can only be `indexed`, which indicates how recently a file has been indexed by the GitHub Enterprise Server search infrastructure. Default: [best match](https://docs.github.com/enterprise-server@3.4/rest/reference/search#ranking-search-results) */
  sort?: "indexed";
  /** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */
  order?: Parameters.order;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$search$code$Status$200 {
  "application/json": {
    total_count: number;
    incomplete_results: boolean;
    items: Schemas.code$search$result$item[];
  };
}
export type Response$search$code$Status$403 = Responses.forbidden.Content;
export type Response$search$code$Status$422 = Responses.validation_failed.Content;
export type Response$search$code$Status$503 = Responses.service_unavailable.Content;
export interface Parameter$search$commits {
  /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.4/rest/reference/search#constructing-a-search-query). See "[Searching commits](https://docs.github.com/articles/searching-commits/)" for a detailed list of qualifiers. */
  q: string;
  /** Sorts the results of your query by `author-date` or `committer-date`. Default: [best match](https://docs.github.com/enterprise-server@3.4/rest/reference/search#ranking-search-results) */
  sort?: "author-date" | "committer-date";
  /** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */
  order?: Parameters.order;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$search$commits$Status$200 {
  "application/json": {
    total_count: number;
    incomplete_results: boolean;
    items: Schemas.commit$search$result$item[];
  };
}
export interface Parameter$search$issues$and$pull$requests {
  /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.4/rest/reference/search#constructing-a-search-query). See "[Searching issues and pull requests](https://docs.github.com/articles/searching-issues-and-pull-requests/)" for a detailed list of qualifiers. */
  q: string;
  /** Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://docs.github.com/enterprise-server@3.4/rest/reference/search#ranking-search-results) */
  sort?:
    | "comments"
    | "reactions"
    | "reactions-+1"
    | "reactions--1"
    | "reactions-smile"
    | "reactions-thinking_face"
    | "reactions-heart"
    | "reactions-tada"
    | "interactions"
    | "created"
    | "updated";
  /** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */
  order?: Parameters.order;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$search$issues$and$pull$requests$Status$200 {
  "application/json": {
    total_count: number;
    incomplete_results: boolean;
    items: Schemas.issue$search$result$item[];
  };
}
export type Response$search$issues$and$pull$requests$Status$403 = Responses.forbidden.Content;
export type Response$search$issues$and$pull$requests$Status$422 = Responses.validation_failed.Content;
export type Response$search$issues$and$pull$requests$Status$503 = Responses.service_unavailable.Content;
export interface Parameter$search$labels {
  /** The id of the repository. */
  repository_id: number;
  /** The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.4/rest/reference/search#constructing-a-search-query). */
  q: string;
  /** Sorts the results of your query by when the label was `created` or `updated`. Default: [best match](https://docs.github.com/enterprise-server@3.4/rest/reference/search#ranking-search-results) */
  sort?: "created" | "updated";
  /** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */
  order?: Parameters.order;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$search$labels$Status$200 {
  "application/json": {
    total_count: number;
    incomplete_results: boolean;
    items: Schemas.label$search$result$item[];
  };
}
export type Response$search$labels$Status$403 = Responses.forbidden.Content;
export type Response$search$labels$Status$404 = Responses.not_found.Content;
export type Response$search$labels$Status$422 = Responses.validation_failed.Content;
export interface Parameter$search$repos {
  /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.4/rest/reference/search#constructing-a-search-query). See "[Searching for repositories](https://docs.github.com/articles/searching-for-repositories/)" for a detailed list of qualifiers. */
  q: string;
  /** Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how recently the items were `updated`. Default: [best match](https://docs.github.com/enterprise-server@3.4/rest/reference/search#ranking-search-results) */
  sort?: "stars" | "forks" | "help-wanted-issues" | "updated";
  /** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */
  order?: Parameters.order;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$search$repos$Status$200 {
  "application/json": {
    total_count: number;
    incomplete_results: boolean;
    items: Schemas.repo$search$result$item[];
  };
}
export type Response$search$repos$Status$422 = Responses.validation_failed.Content;
export type Response$search$repos$Status$503 = Responses.service_unavailable.Content;
export interface Parameter$search$topics {
  /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.4/rest/reference/search#constructing-a-search-query). */
  q: string;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$search$topics$Status$200 {
  "application/json": {
    total_count: number;
    incomplete_results: boolean;
    items: Schemas.topic$search$result$item[];
  };
}
export interface Parameter$search$users {
  /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.4/rest/reference/search#constructing-a-search-query). See "[Searching users](https://docs.github.com/articles/searching-users/)" for a detailed list of qualifiers. */
  q: string;
  /** Sorts the results of your query by number of `followers` or `repositories`, or when the person `joined` GitHub Enterprise Server. Default: [best match](https://docs.github.com/enterprise-server@3.4/rest/reference/search#ranking-search-results) */
  sort?: "followers" | "repositories" | "joined";
  /** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */
  order?: Parameters.order;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$search$users$Status$200 {
  "application/json": {
    total_count: number;
    incomplete_results: boolean;
    items: Schemas.user$search$result$item[];
  };
}
export type Response$search$users$Status$422 = Responses.validation_failed.Content;
export type Response$search$users$Status$503 = Responses.service_unavailable.Content;
export interface Response$enterprise$admin$get$configuration$status$Status$200 {
  "application/json": Schemas.configuration$status;
}
export interface Response$enterprise$admin$get$maintenance$status$Status$200 {
  "application/json": Schemas.maintenance$status;
}
export interface RequestBody$enterprise$admin$enable$or$disable$maintenance$mode {
  "application/x-www-form-urlencoded": {
    /**
     * A JSON string with the attributes `enabled` and `when`.
     *
     * The possible values for `enabled` are `true` and `false`. When it's `false`, the attribute `when` is ignored and the maintenance mode is turned off. `when` defines the time period when the maintenance was enabled.
     *
     * The possible values for `when` are `now` or any date parseable by [mojombo/chronic](https://github.com/mojombo/chronic).
     */
    maintenance: string;
  };
}
export interface Response$enterprise$admin$enable$or$disable$maintenance$mode$Status$200 {
  "application/json": Schemas.maintenance$status;
}
export interface Response$enterprise$admin$get$settings$Status$200 {
  "application/json": Schemas.enterprise$settings;
}
export interface RequestBody$enterprise$admin$set$settings {
  "application/x-www-form-urlencoded": {
    /** A JSON string with the new settings. Note that you only need to pass the specific settings you want to modify. For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-settings). */
    settings: string;
  };
}
export interface Response$enterprise$admin$get$all$authorized$ssh$keys$Status$200 {
  "application/json": Schemas.ssh$key[];
}
export interface RequestBody$enterprise$admin$add$authorized$ssh$key {
  "application/x-www-form-urlencoded": {
    /** The public SSH key. */
    authorized_key: string;
  };
}
export interface Response$enterprise$admin$add$authorized$ssh$key$Status$201 {
  "application/json": Schemas.ssh$key[];
}
export interface RequestBody$enterprise$admin$remove$authorized$ssh$key {
  "application/x-www-form-urlencoded": {
    /** The public SSH key. */
    authorized_key: string;
  };
}
export interface Response$enterprise$admin$remove$authorized$ssh$key$Status$200 {
  "application/json": Schemas.ssh$key[];
}
export interface RequestBody$enterprise$admin$create$enterprise$server$license {
  "application/x-www-form-urlencoded": {
    /** The content of your _.ghl_ license file. */
    license: string;
    /** You **must** provide a password _only if_ you are uploading your license for the first time. If you previously set a password through the web interface, you don't need this parameter. */
    password?: string;
    /** An optional JSON string containing the installation settings. For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-settings). */
    settings?: string;
  };
}
export interface RequestBody$enterprise$admin$upgrade$license {
  "application/x-www-form-urlencoded": {
    /** The content of your new _.ghl_ license file. */
    license?: string;
  };
}
export interface Parameter$teams$get$legacy {
  team_id: Parameters.team$id;
}
export interface Response$teams$get$legacy$Status$200 {
  "application/json": Schemas.team$full;
}
export type Response$teams$get$legacy$Status$404 = Responses.not_found.Content;
export interface Parameter$teams$delete$legacy {
  team_id: Parameters.team$id;
}
export type Response$teams$delete$legacy$Status$404 = Responses.not_found.Content;
export type Response$teams$delete$legacy$Status$422 = Responses.validation_failed.Content;
export interface Parameter$teams$update$legacy {
  team_id: Parameters.team$id;
}
export interface RequestBody$teams$update$legacy {
  "application/json": {
    /** The name of the team. */
    name: string;
    /** The description of the team. */
    description?: string;
    /**
     * The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:
     * **For a non-nested team:**
     * \* `secret` - only visible to organization owners and members of this team.
     * \* `closed` - visible to all members of this organization.
     * **For a parent or child team:**
     * \* `closed` - visible to all members of this organization.
     */
    privacy?: "secret" | "closed";
    /**
     * **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:
     * \* `pull` - team members can pull, but not push to or administer newly-added repositories.
     * \* `push` - team members can pull and push, but not administer newly-added repositories.
     * \* `admin` - team members can pull, push and administer newly-added repositories.
     */
    permission?: "pull" | "push" | "admin";
    /** The ID of a team to set as the parent team. */
    parent_team_id?: number | null;
  };
}
export interface Response$teams$update$legacy$Status$200 {
  "application/json": Schemas.team$full;
}
export interface Response$teams$update$legacy$Status$201 {
  "application/json": Schemas.team$full;
}
export type Response$teams$update$legacy$Status$403 = Responses.forbidden.Content;
export type Response$teams$update$legacy$Status$404 = Responses.not_found.Content;
export type Response$teams$update$legacy$Status$422 = Responses.validation_failed.Content;
export interface Parameter$teams$list$discussions$legacy {
  team_id: Parameters.team$id;
  /** One of `asc` (ascending) or `desc` (descending). */
  direction?: Parameters.direction;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$teams$list$discussions$legacy$Status$200 {
  "application/json": Schemas.team$discussion[];
}
export interface Parameter$teams$create$discussion$legacy {
  team_id: Parameters.team$id;
}
export interface RequestBody$teams$create$discussion$legacy {
  "application/json": {
    /** The discussion post's title. */
    title: string;
    /** The discussion post's body text. */
    body: string;
    /** Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post. */
    private?: boolean;
  };
}
export interface Response$teams$create$discussion$legacy$Status$201 {
  "application/json": Schemas.team$discussion;
}
export interface Parameter$teams$get$discussion$legacy {
  team_id: Parameters.team$id;
  discussion_number: Parameters.discussion$number;
}
export interface Response$teams$get$discussion$legacy$Status$200 {
  "application/json": Schemas.team$discussion;
}
export interface Parameter$teams$delete$discussion$legacy {
  team_id: Parameters.team$id;
  discussion_number: Parameters.discussion$number;
}
export interface Parameter$teams$update$discussion$legacy {
  team_id: Parameters.team$id;
  discussion_number: Parameters.discussion$number;
}
export interface RequestBody$teams$update$discussion$legacy {
  "application/json": {
    /** The discussion post's title. */
    title?: string;
    /** The discussion post's body text. */
    body?: string;
  };
}
export interface Response$teams$update$discussion$legacy$Status$200 {
  "application/json": Schemas.team$discussion;
}
export interface Parameter$teams$list$discussion$comments$legacy {
  team_id: Parameters.team$id;
  discussion_number: Parameters.discussion$number;
  /** One of `asc` (ascending) or `desc` (descending). */
  direction?: Parameters.direction;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$teams$list$discussion$comments$legacy$Status$200 {
  "application/json": Schemas.team$discussion$comment[];
}
export interface Parameter$teams$create$discussion$comment$legacy {
  team_id: Parameters.team$id;
  discussion_number: Parameters.discussion$number;
}
export interface RequestBody$teams$create$discussion$comment$legacy {
  "application/json": {
    /** The discussion comment's body text. */
    body: string;
  };
}
export interface Response$teams$create$discussion$comment$legacy$Status$201 {
  "application/json": Schemas.team$discussion$comment;
}
export interface Parameter$teams$get$discussion$comment$legacy {
  team_id: Parameters.team$id;
  discussion_number: Parameters.discussion$number;
  comment_number: Parameters.comment$number;
}
export interface Response$teams$get$discussion$comment$legacy$Status$200 {
  "application/json": Schemas.team$discussion$comment;
}
export interface Parameter$teams$delete$discussion$comment$legacy {
  team_id: Parameters.team$id;
  discussion_number: Parameters.discussion$number;
  comment_number: Parameters.comment$number;
}
export interface Parameter$teams$update$discussion$comment$legacy {
  team_id: Parameters.team$id;
  discussion_number: Parameters.discussion$number;
  comment_number: Parameters.comment$number;
}
export interface RequestBody$teams$update$discussion$comment$legacy {
  "application/json": {
    /** The discussion comment's body text. */
    body: string;
  };
}
export interface Response$teams$update$discussion$comment$legacy$Status$200 {
  "application/json": Schemas.team$discussion$comment;
}
export interface Parameter$reactions$list$for$team$discussion$comment$legacy {
  team_id: Parameters.team$id;
  discussion_number: Parameters.discussion$number;
  comment_number: Parameters.comment$number;
  /** Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment. */
  content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$reactions$list$for$team$discussion$comment$legacy$Status$200 {
  "application/json": Schemas.reaction[];
}
export interface Parameter$reactions$create$for$team$discussion$comment$legacy {
  team_id: Parameters.team$id;
  discussion_number: Parameters.discussion$number;
  comment_number: Parameters.comment$number;
}
export interface RequestBody$reactions$create$for$team$discussion$comment$legacy {
  "application/json": {
    /** The [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types) to add to the team discussion comment. */
    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
  };
}
export interface Response$reactions$create$for$team$discussion$comment$legacy$Status$201 {
  "application/json": Schemas.reaction;
}
export interface Parameter$reactions$list$for$team$discussion$legacy {
  team_id: Parameters.team$id;
  discussion_number: Parameters.discussion$number;
  /** Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion. */
  content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$reactions$list$for$team$discussion$legacy$Status$200 {
  "application/json": Schemas.reaction[];
}
export interface Parameter$reactions$create$for$team$discussion$legacy {
  team_id: Parameters.team$id;
  discussion_number: Parameters.discussion$number;
}
export interface RequestBody$reactions$create$for$team$discussion$legacy {
  "application/json": {
    /** The [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types) to add to the team discussion. */
    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
  };
}
export interface Response$reactions$create$for$team$discussion$legacy$Status$201 {
  "application/json": Schemas.reaction;
}
export interface Parameter$teams$list$members$legacy {
  team_id: Parameters.team$id;
  /**
   * Filters members returned by their role in the team. Can be one of:
   * \* `member` - normal members of the team.
   * \* `maintainer` - team maintainers.
   * \* `all` - all members of the team.
   */
  role?: "member" | "maintainer" | "all";
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$teams$list$members$legacy$Status$200 {
  "application/json": Schemas.simple$user[];
}
export type Response$teams$list$members$legacy$Status$404 = Responses.not_found.Content;
export interface Parameter$teams$get$member$legacy {
  team_id: Parameters.team$id;
  username: Parameters.username;
}
export interface Parameter$teams$add$member$legacy {
  team_id: Parameters.team$id;
  username: Parameters.username;
}
export type Response$teams$add$member$legacy$Status$403 = Responses.forbidden.Content;
export interface Parameter$teams$remove$member$legacy {
  team_id: Parameters.team$id;
  username: Parameters.username;
}
export interface Parameter$teams$get$membership$for$user$legacy {
  team_id: Parameters.team$id;
  username: Parameters.username;
}
export interface Response$teams$get$membership$for$user$legacy$Status$200 {
  "application/json": Schemas.team$membership;
}
export type Response$teams$get$membership$for$user$legacy$Status$404 = Responses.not_found.Content;
export interface Parameter$teams$add$or$update$membership$for$user$legacy {
  team_id: Parameters.team$id;
  username: Parameters.username;
}
export interface RequestBody$teams$add$or$update$membership$for$user$legacy {
  "application/json": {
    /**
     * The role that this user should have in the team. Can be one of:
     * \* `member` - a normal member of the team.
     * \* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.
     */
    role?: "member" | "maintainer";
  };
}
export interface Response$teams$add$or$update$membership$for$user$legacy$Status$200 {
  "application/json": Schemas.team$membership;
}
export type Response$teams$add$or$update$membership$for$user$legacy$Status$404 = Responses.not_found.Content;
export interface Parameter$teams$remove$membership$for$user$legacy {
  team_id: Parameters.team$id;
  username: Parameters.username;
}
export interface Parameter$teams$list$projects$legacy {
  team_id: Parameters.team$id;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$teams$list$projects$legacy$Status$200 {
  "application/json": Schemas.team$project[];
}
export type Response$teams$list$projects$legacy$Status$404 = Responses.not_found.Content;
export interface Parameter$teams$check$permissions$for$project$legacy {
  team_id: Parameters.team$id;
  project_id: Parameters.project$id;
}
export interface Response$teams$check$permissions$for$project$legacy$Status$200 {
  "application/json": Schemas.team$project;
}
export interface Parameter$teams$add$or$update$project$permissions$legacy {
  team_id: Parameters.team$id;
  project_id: Parameters.project$id;
}
export interface RequestBody$teams$add$or$update$project$permissions$legacy {
  "application/json": {
    /**
     * The permission to grant to the team for this project. Can be one of:
     * \* `read` - team members can read, but not write to or administer this project.
     * \* `write` - team members can read and write, but not administer this project.
     * \* `admin` - team members can read, write and administer this project.
     * Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#http-verbs)."
     */
    permission?: "read" | "write" | "admin";
  };
}
export interface Response$teams$add$or$update$project$permissions$legacy$Status$403 {
  "application/json": {
    message?: string;
    documentation_url?: string;
  };
}
export type Response$teams$add$or$update$project$permissions$legacy$Status$404 = Responses.not_found.Content;
export type Response$teams$add$or$update$project$permissions$legacy$Status$422 = Responses.validation_failed.Content;
export interface Parameter$teams$remove$project$legacy {
  team_id: Parameters.team$id;
  project_id: Parameters.project$id;
}
export type Response$teams$remove$project$legacy$Status$404 = Responses.not_found.Content;
export type Response$teams$remove$project$legacy$Status$415 = Responses.preview_header_missing.Content;
export type Response$teams$remove$project$legacy$Status$422 = Responses.validation_failed.Content;
export interface Parameter$teams$list$repos$legacy {
  team_id: Parameters.team$id;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$teams$list$repos$legacy$Status$200 {
  "application/json": Schemas.minimal$repository[];
}
export type Response$teams$list$repos$legacy$Status$404 = Responses.not_found.Content;
export interface Parameter$teams$check$permissions$for$repo$legacy {
  team_id: Parameters.team$id;
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface Response$teams$check$permissions$for$repo$legacy$Status$200 {
  "application/json": Schemas.team$repository;
}
export interface Parameter$teams$add$or$update$repo$permissions$legacy {
  team_id: Parameters.team$id;
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface RequestBody$teams$add$or$update$repo$permissions$legacy {
  "application/json": {
    /**
     * The permission to grant the team on this repository. Can be one of:
     * \* `pull` - team members can pull, but not push to or administer this repository.
     * \* `push` - team members can pull and push, but not administer this repository.
     * \* `admin` - team members can pull, push and administer this repository.
     *
     * If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
     */
    permission?: "pull" | "push" | "admin";
  };
}
export type Response$teams$add$or$update$repo$permissions$legacy$Status$403 = Responses.forbidden.Content;
export type Response$teams$add$or$update$repo$permissions$legacy$Status$422 = Responses.validation_failed.Content;
export interface Parameter$teams$remove$repo$legacy {
  team_id: Parameters.team$id;
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export interface Parameter$teams$list$child$legacy {
  team_id: Parameters.team$id;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$teams$list$child$legacy$Status$200 {
  "application/json": Schemas.team[];
}
export type Response$teams$list$child$legacy$Status$403 = Responses.forbidden.Content;
export type Response$teams$list$child$legacy$Status$404 = Responses.not_found.Content;
export type Response$teams$list$child$legacy$Status$422 = Responses.validation_failed.Content;
export interface Response$users$get$authenticated$Status$200 {
  "application/json": Schemas.private$user | Schemas.public$user;
}
export type Response$users$get$authenticated$Status$401 = Responses.requires_authentication.Content;
export type Response$users$get$authenticated$Status$403 = Responses.forbidden.Content;
export interface RequestBody$users$update$authenticated {
  "application/json": {
    /** The new name of the user. */
    name?: string;
    /** The publicly visible email address of the user. */
    email?: string;
    /** The new blog URL of the user. */
    blog?: string;
    /** The new Twitter username of the user. */
    twitter_username?: string | null;
    /** The new company of the user. */
    company?: string;
    /** The new location of the user. */
    location?: string;
    /** The new hiring availability of the user. */
    hireable?: boolean;
    /** The new short biography of the user. */
    bio?: string;
  };
}
export interface Response$users$update$authenticated$Status$200 {
  "application/json": Schemas.private$user;
}
export type Response$users$update$authenticated$Status$401 = Responses.requires_authentication.Content;
export type Response$users$update$authenticated$Status$403 = Responses.forbidden.Content;
export type Response$users$update$authenticated$Status$404 = Responses.not_found.Content;
export type Response$users$update$authenticated$Status$422 = Responses.validation_failed.Content;
export interface Parameter$users$list$emails$for$authenticated$user {
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$users$list$emails$for$authenticated$user$Status$200 {
  "application/json": Schemas.email[];
}
export type Response$users$list$emails$for$authenticated$user$Status$401 = Responses.requires_authentication.Content;
export type Response$users$list$emails$for$authenticated$user$Status$403 = Responses.forbidden.Content;
export type Response$users$list$emails$for$authenticated$user$Status$404 = Responses.not_found.Content;
export interface RequestBody$users$add$email$for$authenticated$user {
  "application/json":
    | {
        /** Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key. */
        emails: string[];
      }
    | string[]
    | string;
}
export interface Response$users$add$email$for$authenticated$user$Status$201 {
  "application/json": Schemas.email[];
}
export type Response$users$add$email$for$authenticated$user$Status$401 = Responses.requires_authentication.Content;
export type Response$users$add$email$for$authenticated$user$Status$403 = Responses.forbidden.Content;
export type Response$users$add$email$for$authenticated$user$Status$404 = Responses.not_found.Content;
export type Response$users$add$email$for$authenticated$user$Status$422 = Responses.validation_failed.Content;
export interface RequestBody$users$delete$email$for$authenticated$user {
  "application/json":
    | {
        /** Email addresses associated with the GitHub user account. */
        emails: string[];
      }
    | string[]
    | string;
}
export type Response$users$delete$email$for$authenticated$user$Status$401 = Responses.requires_authentication.Content;
export type Response$users$delete$email$for$authenticated$user$Status$403 = Responses.forbidden.Content;
export type Response$users$delete$email$for$authenticated$user$Status$404 = Responses.not_found.Content;
export type Response$users$delete$email$for$authenticated$user$Status$422 = Responses.validation_failed.Content;
export interface Parameter$users$list$followers$for$authenticated$user {
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$users$list$followers$for$authenticated$user$Status$200 {
  "application/json": Schemas.simple$user[];
}
export type Response$users$list$followers$for$authenticated$user$Status$401 = Responses.requires_authentication.Content;
export type Response$users$list$followers$for$authenticated$user$Status$403 = Responses.forbidden.Content;
export interface Parameter$users$list$followed$by$authenticated$user {
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$users$list$followed$by$authenticated$user$Status$200 {
  "application/json": Schemas.simple$user[];
}
export type Response$users$list$followed$by$authenticated$user$Status$401 = Responses.requires_authentication.Content;
export type Response$users$list$followed$by$authenticated$user$Status$403 = Responses.forbidden.Content;
export interface Parameter$users$check$person$is$followed$by$authenticated {
  username: Parameters.username;
}
export type Response$users$check$person$is$followed$by$authenticated$Status$401 = Responses.requires_authentication.Content;
export type Response$users$check$person$is$followed$by$authenticated$Status$403 = Responses.forbidden.Content;
export interface Response$users$check$person$is$followed$by$authenticated$Status$404 {
  "application/json": Schemas.basic$error;
}
export interface Parameter$users$follow {
  username: Parameters.username;
}
export type Response$users$follow$Status$401 = Responses.requires_authentication.Content;
export type Response$users$follow$Status$403 = Responses.forbidden.Content;
export type Response$users$follow$Status$404 = Responses.not_found.Content;
export interface Parameter$users$unfollow {
  username: Parameters.username;
}
export type Response$users$unfollow$Status$401 = Responses.requires_authentication.Content;
export type Response$users$unfollow$Status$403 = Responses.forbidden.Content;
export type Response$users$unfollow$Status$404 = Responses.not_found.Content;
export interface Parameter$users$list$gpg$keys$for$authenticated$user {
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$users$list$gpg$keys$for$authenticated$user$Status$200 {
  "application/json": Schemas.gpg$key[];
}
export type Response$users$list$gpg$keys$for$authenticated$user$Status$401 = Responses.requires_authentication.Content;
export type Response$users$list$gpg$keys$for$authenticated$user$Status$403 = Responses.forbidden.Content;
export type Response$users$list$gpg$keys$for$authenticated$user$Status$404 = Responses.not_found.Content;
export interface RequestBody$users$create$gpg$key$for$authenticated$user {
  "application/json": {
    /** A GPG key in ASCII-armored format. */
    armored_public_key: string;
  };
}
export interface Response$users$create$gpg$key$for$authenticated$user$Status$201 {
  "application/json": Schemas.gpg$key;
}
export type Response$users$create$gpg$key$for$authenticated$user$Status$401 = Responses.requires_authentication.Content;
export type Response$users$create$gpg$key$for$authenticated$user$Status$403 = Responses.forbidden.Content;
export type Response$users$create$gpg$key$for$authenticated$user$Status$404 = Responses.not_found.Content;
export type Response$users$create$gpg$key$for$authenticated$user$Status$422 = Responses.validation_failed.Content;
export interface Parameter$users$get$gpg$key$for$authenticated$user {
  /** gpg_key_id parameter */
  gpg_key_id: Parameters.gpg$key$id;
}
export interface Response$users$get$gpg$key$for$authenticated$user$Status$200 {
  "application/json": Schemas.gpg$key;
}
export type Response$users$get$gpg$key$for$authenticated$user$Status$401 = Responses.requires_authentication.Content;
export type Response$users$get$gpg$key$for$authenticated$user$Status$403 = Responses.forbidden.Content;
export type Response$users$get$gpg$key$for$authenticated$user$Status$404 = Responses.not_found.Content;
export interface Parameter$users$delete$gpg$key$for$authenticated$user {
  /** gpg_key_id parameter */
  gpg_key_id: Parameters.gpg$key$id;
}
export type Response$users$delete$gpg$key$for$authenticated$user$Status$401 = Responses.requires_authentication.Content;
export type Response$users$delete$gpg$key$for$authenticated$user$Status$403 = Responses.forbidden.Content;
export type Response$users$delete$gpg$key$for$authenticated$user$Status$404 = Responses.not_found.Content;
export type Response$users$delete$gpg$key$for$authenticated$user$Status$422 = Responses.validation_failed.Content;
export interface Parameter$apps$list$installations$for$authenticated$user {
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$apps$list$installations$for$authenticated$user$Status$200 {
  "application/json": {
    total_count: number;
    installations: Schemas.installation[];
  };
}
export type Response$apps$list$installations$for$authenticated$user$Status$401 = Responses.requires_authentication.Content;
export type Response$apps$list$installations$for$authenticated$user$Status$403 = Responses.forbidden.Content;
export type Response$apps$list$installations$for$authenticated$user$Status$415 = Responses.preview_header_missing.Content;
export interface Parameter$apps$list$installation$repos$for$authenticated$user {
  /** installation_id parameter */
  installation_id: Parameters.installation$id;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$apps$list$installation$repos$for$authenticated$user$Status$200 {
  "application/json": {
    total_count: number;
    repository_selection?: string;
    repositories: Schemas.repository[];
  };
}
export type Response$apps$list$installation$repos$for$authenticated$user$Status$403 = Responses.forbidden.Content;
export type Response$apps$list$installation$repos$for$authenticated$user$Status$404 = Responses.not_found.Content;
export interface Parameter$apps$add$repo$to$installation$for$authenticated$user {
  /** installation_id parameter */
  installation_id: Parameters.installation$id;
  repository_id: Parameters.repository$id;
}
export type Response$apps$add$repo$to$installation$for$authenticated$user$Status$403 = Responses.forbidden.Content;
export type Response$apps$add$repo$to$installation$for$authenticated$user$Status$404 = Responses.not_found.Content;
export interface Parameter$apps$remove$repo$from$installation$for$authenticated$user {
  /** installation_id parameter */
  installation_id: Parameters.installation$id;
  repository_id: Parameters.repository$id;
}
export type Response$apps$remove$repo$from$installation$for$authenticated$user$Status$403 = Responses.forbidden.Content;
export type Response$apps$remove$repo$from$installation$for$authenticated$user$Status$404 = Responses.not_found.Content;
export interface Parameter$issues$list$for$authenticated$user {
  /**
   * Indicates which sorts of issues to return. Can be one of:
   * \* `assigned`: Issues assigned to you
   * \* `created`: Issues created by you
   * \* `mentioned`: Issues mentioning you
   * \* `subscribed`: Issues you're subscribed to updates for
   * \* `all` or `repos`: All issues the authenticated user can see, regardless of participation or creation
   */
  filter?: "assigned" | "created" | "mentioned" | "subscribed" | "repos" | "all";
  /** Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`. */
  state?: "open" | "closed" | "all";
  /** A list of comma separated label names. Example: `bug,ui,@high` */
  labels?: Parameters.labels;
  /** What to sort results by. Can be either `created`, `updated`, `comments`. */
  sort?: "created" | "updated" | "comments";
  /** One of `asc` (ascending) or `desc` (descending). */
  direction?: Parameters.direction;
  /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
  since?: Parameters.since;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$issues$list$for$authenticated$user$Status$200 {
  "application/json": Schemas.issue[];
}
export type Response$issues$list$for$authenticated$user$Status$404 = Responses.not_found.Content;
export interface Parameter$users$list$public$ssh$keys$for$authenticated$user {
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$users$list$public$ssh$keys$for$authenticated$user$Status$200 {
  "application/json": Schemas.key[];
}
export type Response$users$list$public$ssh$keys$for$authenticated$user$Status$401 = Responses.requires_authentication.Content;
export type Response$users$list$public$ssh$keys$for$authenticated$user$Status$403 = Responses.forbidden.Content;
export type Response$users$list$public$ssh$keys$for$authenticated$user$Status$404 = Responses.not_found.Content;
export interface RequestBody$users$create$public$ssh$key$for$authenticated$user {
  "application/json": {
    /** A descriptive name for the new key. */
    title?: string;
    /** The public SSH key to add to your GitHub account. */
    key: string;
  };
}
export interface Response$users$create$public$ssh$key$for$authenticated$user$Status$201 {
  "application/json": Schemas.key;
}
export type Response$users$create$public$ssh$key$for$authenticated$user$Status$401 = Responses.requires_authentication.Content;
export type Response$users$create$public$ssh$key$for$authenticated$user$Status$403 = Responses.forbidden.Content;
export type Response$users$create$public$ssh$key$for$authenticated$user$Status$404 = Responses.not_found.Content;
export type Response$users$create$public$ssh$key$for$authenticated$user$Status$422 = Responses.validation_failed.Content;
export interface Parameter$users$get$public$ssh$key$for$authenticated$user {
  /** key_id parameter */
  key_id: Parameters.key$id;
}
export interface Response$users$get$public$ssh$key$for$authenticated$user$Status$200 {
  "application/json": Schemas.key;
}
export type Response$users$get$public$ssh$key$for$authenticated$user$Status$401 = Responses.requires_authentication.Content;
export type Response$users$get$public$ssh$key$for$authenticated$user$Status$403 = Responses.forbidden.Content;
export type Response$users$get$public$ssh$key$for$authenticated$user$Status$404 = Responses.not_found.Content;
export interface Parameter$users$delete$public$ssh$key$for$authenticated$user {
  /** key_id parameter */
  key_id: Parameters.key$id;
}
export type Response$users$delete$public$ssh$key$for$authenticated$user$Status$401 = Responses.requires_authentication.Content;
export type Response$users$delete$public$ssh$key$for$authenticated$user$Status$403 = Responses.forbidden.Content;
export type Response$users$delete$public$ssh$key$for$authenticated$user$Status$404 = Responses.not_found.Content;
export interface Parameter$orgs$list$memberships$for$authenticated$user {
  /** Indicates the state of the memberships to return. Can be either `active` or `pending`. If not specified, the API returns both active and pending memberships. */
  state?: "active" | "pending";
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$orgs$list$memberships$for$authenticated$user$Status$200 {
  "application/json": Schemas.org$membership[];
}
export type Response$orgs$list$memberships$for$authenticated$user$Status$401 = Responses.requires_authentication.Content;
export type Response$orgs$list$memberships$for$authenticated$user$Status$403 = Responses.forbidden.Content;
export type Response$orgs$list$memberships$for$authenticated$user$Status$422 = Responses.validation_failed.Content;
export interface Parameter$orgs$get$membership$for$authenticated$user {
  org: Parameters.org;
}
export interface Response$orgs$get$membership$for$authenticated$user$Status$200 {
  "application/json": Schemas.org$membership;
}
export type Response$orgs$get$membership$for$authenticated$user$Status$403 = Responses.forbidden.Content;
export type Response$orgs$get$membership$for$authenticated$user$Status$404 = Responses.not_found.Content;
export interface Parameter$orgs$update$membership$for$authenticated$user {
  org: Parameters.org;
}
export interface RequestBody$orgs$update$membership$for$authenticated$user {
  "application/json": {
    /** The state that the membership should be in. Only `"active"` will be accepted. */
    state: "active";
  };
}
export interface Response$orgs$update$membership$for$authenticated$user$Status$200 {
  "application/json": Schemas.org$membership;
}
export type Response$orgs$update$membership$for$authenticated$user$Status$403 = Responses.forbidden.Content;
export type Response$orgs$update$membership$for$authenticated$user$Status$404 = Responses.not_found.Content;
export type Response$orgs$update$membership$for$authenticated$user$Status$422 = Responses.validation_failed.Content;
export interface Parameter$migrations$list$for$authenticated$user {
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$migrations$list$for$authenticated$user$Status$200 {
  "application/json": Schemas.migration[];
}
export type Response$migrations$list$for$authenticated$user$Status$401 = Responses.requires_authentication.Content;
export type Response$migrations$list$for$authenticated$user$Status$403 = Responses.forbidden.Content;
export interface RequestBody$migrations$start$for$authenticated$user {
  "application/json": {
    /** Lock the repositories being migrated at the start of the migration */
    lock_repositories?: boolean;
    /** Do not include attachments in the migration */
    exclude_attachments?: boolean;
    /** Do not include releases in the migration */
    exclude_releases?: boolean;
    /** Indicates whether projects owned by the organization or users should be excluded. */
    exclude_owner_projects?: boolean;
    /** Exclude attributes from the API response to improve performance */
    exclude?: "repositories"[];
    repositories: string[];
  };
}
export interface Response$migrations$start$for$authenticated$user$Status$201 {
  "application/json": Schemas.migration;
}
export type Response$migrations$start$for$authenticated$user$Status$401 = Responses.requires_authentication.Content;
export type Response$migrations$start$for$authenticated$user$Status$403 = Responses.forbidden.Content;
export type Response$migrations$start$for$authenticated$user$Status$422 = Responses.validation_failed.Content;
export interface Parameter$migrations$get$archive$for$authenticated$user {
  /** migration_id parameter */
  migration_id: Parameters.migration$id;
}
export type Response$migrations$get$archive$for$authenticated$user$Status$401 = Responses.requires_authentication.Content;
export type Response$migrations$get$archive$for$authenticated$user$Status$403 = Responses.forbidden.Content;
export interface Parameter$migrations$list$repos$for$authenticated$user {
  /** migration_id parameter */
  migration_id: Parameters.migration$id;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$migrations$list$repos$for$authenticated$user$Status$200 {
  "application/json": Schemas.minimal$repository[];
}
export type Response$migrations$list$repos$for$authenticated$user$Status$404 = Responses.not_found.Content;
export interface Parameter$orgs$list$for$authenticated$user {
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$orgs$list$for$authenticated$user$Status$200 {
  "application/json": Schemas.organization$simple[];
}
export type Response$orgs$list$for$authenticated$user$Status$401 = Responses.requires_authentication.Content;
export type Response$orgs$list$for$authenticated$user$Status$403 = Responses.forbidden.Content;
export interface RequestBody$projects$create$for$authenticated$user {
  "application/json": {
    /** Name of the project */
    name: string;
    /** Body of the project */
    body?: string | null;
  };
}
export interface Response$projects$create$for$authenticated$user$Status$201 {
  "application/json": Schemas.project;
}
export type Response$projects$create$for$authenticated$user$Status$401 = Responses.requires_authentication.Content;
export type Response$projects$create$for$authenticated$user$Status$403 = Responses.forbidden.Content;
export type Response$projects$create$for$authenticated$user$Status$415 = Responses.preview_header_missing.Content;
export type Response$projects$create$for$authenticated$user$Status$422 = Responses.validation_failed_simple.Content;
export interface Parameter$users$list$public$emails$for$authenticated$user {
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$users$list$public$emails$for$authenticated$user$Status$200 {
  "application/json": Schemas.email[];
}
export type Response$users$list$public$emails$for$authenticated$user$Status$401 = Responses.requires_authentication.Content;
export type Response$users$list$public$emails$for$authenticated$user$Status$403 = Responses.forbidden.Content;
export type Response$users$list$public$emails$for$authenticated$user$Status$404 = Responses.not_found.Content;
export interface Parameter$repos$list$for$authenticated$user {
  /** Can be one of `all`, `public`, or `private`. Note: For GitHub AE, can be one of `all`, `internal`, or `private`. */
  visibility?: "all" | "public" | "private";
  /**
   * Comma-separated list of values. Can include:
   * \* `owner`: Repositories that are owned by the authenticated user.
   * \* `collaborator`: Repositories that the user has been added to as a collaborator.
   * \* `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.
   */
  affiliation?: string;
  /**
   * Can be one of `all`, `owner`, `public`, `private`, `member`. Note: For GitHub AE, can be one of `all`, `owner`, `internal`, `private`, `member`. Default: `all`
   *
   * Will cause a `422` error if used in the same request as **visibility** or **affiliation**. Will cause a `422` error if used in the same request as **visibility** or **affiliation**.
   */
  type?: "all" | "owner" | "public" | "private" | "member";
  /** Can be one of `created`, `updated`, `pushed`, `full_name`. */
  sort?: "created" | "updated" | "pushed" | "full_name";
  /** Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc` */
  direction?: "asc" | "desc";
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
  /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
  since?: Parameters.since;
  /** Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
  before?: Parameters.before;
}
export interface Response$repos$list$for$authenticated$user$Status$200 {
  "application/json": Schemas.repository[];
}
export type Response$repos$list$for$authenticated$user$Status$401 = Responses.requires_authentication.Content;
export type Response$repos$list$for$authenticated$user$Status$403 = Responses.forbidden.Content;
export type Response$repos$list$for$authenticated$user$Status$422 = Responses.validation_failed.Content;
export interface RequestBody$repos$create$for$authenticated$user {
  "application/json": {
    /** The name of the repository. */
    name: string;
    /** A short description of the repository. */
    description?: string;
    /** A URL with more information about the repository. */
    homepage?: string;
    /** Whether the repository is private. */
    private?: boolean;
    /** Whether issues are enabled. */
    has_issues?: boolean;
    /** Whether projects are enabled. */
    has_projects?: boolean;
    /** Whether the wiki is enabled. */
    has_wiki?: boolean;
    /** The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization. */
    team_id?: number;
    /** Whether the repository is initialized with a minimal README. */
    auto_init?: boolean;
    /** The desired language or platform to apply to the .gitignore. */
    gitignore_template?: string;
    /** The license keyword of the open source license for this repository. */
    license_template?: string;
    /** Whether to allow squash merges for pull requests. */
    allow_squash_merge?: boolean;
    /** Whether to allow merge commits for pull requests. */
    allow_merge_commit?: boolean;
    /** Whether to allow rebase merges for pull requests. */
    allow_rebase_merge?: boolean;
    /** Whether to allow Auto-merge to be used on pull requests. */
    allow_auto_merge?: boolean;
    /** Whether to delete head branches when pull requests are merged */
    delete_branch_on_merge?: boolean;
    /** Whether downloads are enabled. */
    has_downloads?: boolean;
    /** Whether this repository acts as a template that can be used to generate new repositories. */
    is_template?: boolean;
  };
}
export interface Response$repos$create$for$authenticated$user$Status$201 {
  "application/json": Schemas.repository;
}
export type Response$repos$create$for$authenticated$user$Status$400 = Responses.bad_request.Content;
export type Response$repos$create$for$authenticated$user$Status$401 = Responses.requires_authentication.Content;
export type Response$repos$create$for$authenticated$user$Status$403 = Responses.forbidden.Content;
export type Response$repos$create$for$authenticated$user$Status$404 = Responses.not_found.Content;
export type Response$repos$create$for$authenticated$user$Status$422 = Responses.validation_failed.Content;
export interface Parameter$repos$list$invitations$for$authenticated$user {
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$repos$list$invitations$for$authenticated$user$Status$200 {
  "application/json": Schemas.repository$invitation[];
}
export type Response$repos$list$invitations$for$authenticated$user$Status$401 = Responses.requires_authentication.Content;
export type Response$repos$list$invitations$for$authenticated$user$Status$403 = Responses.forbidden.Content;
export type Response$repos$list$invitations$for$authenticated$user$Status$404 = Responses.not_found.Content;
export interface Parameter$repos$decline$invitation$for$authenticated$user {
  /** invitation_id parameter */
  invitation_id: Parameters.invitation$id;
}
export type Response$repos$decline$invitation$for$authenticated$user$Status$403 = Responses.forbidden.Content;
export type Response$repos$decline$invitation$for$authenticated$user$Status$404 = Responses.not_found.Content;
export type Response$repos$decline$invitation$for$authenticated$user$Status$409 = Responses.conflict.Content;
export interface Parameter$repos$accept$invitation$for$authenticated$user {
  /** invitation_id parameter */
  invitation_id: Parameters.invitation$id;
}
export type Response$repos$accept$invitation$for$authenticated$user$Status$403 = Responses.forbidden.Content;
export type Response$repos$accept$invitation$for$authenticated$user$Status$404 = Responses.not_found.Content;
export type Response$repos$accept$invitation$for$authenticated$user$Status$409 = Responses.conflict.Content;
export interface Parameter$activity$list$repos$starred$by$authenticated$user {
  /** One of `created` (when the repository was starred) or `updated` (when it was last pushed to). */
  sort?: Parameters.sort;
  /** One of `asc` (ascending) or `desc` (descending). */
  direction?: Parameters.direction;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$activity$list$repos$starred$by$authenticated$user$Status$200 {
  "application/json": Schemas.repository[];
  "application/vnd.github.v3.star+json": Schemas.starred$repository[];
}
export type Response$activity$list$repos$starred$by$authenticated$user$Status$401 = Responses.requires_authentication.Content;
export type Response$activity$list$repos$starred$by$authenticated$user$Status$403 = Responses.forbidden.Content;
export interface Parameter$activity$check$repo$is$starred$by$authenticated$user {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export type Response$activity$check$repo$is$starred$by$authenticated$user$Status$401 = Responses.requires_authentication.Content;
export type Response$activity$check$repo$is$starred$by$authenticated$user$Status$403 = Responses.forbidden.Content;
export interface Response$activity$check$repo$is$starred$by$authenticated$user$Status$404 {
  "application/json": Schemas.basic$error;
}
export interface Parameter$activity$star$repo$for$authenticated$user {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export type Response$activity$star$repo$for$authenticated$user$Status$401 = Responses.requires_authentication.Content;
export type Response$activity$star$repo$for$authenticated$user$Status$403 = Responses.forbidden.Content;
export type Response$activity$star$repo$for$authenticated$user$Status$404 = Responses.not_found.Content;
export interface Parameter$activity$unstar$repo$for$authenticated$user {
  owner: Parameters.owner;
  repo: Parameters.repo;
}
export type Response$activity$unstar$repo$for$authenticated$user$Status$401 = Responses.requires_authentication.Content;
export type Response$activity$unstar$repo$for$authenticated$user$Status$403 = Responses.forbidden.Content;
export type Response$activity$unstar$repo$for$authenticated$user$Status$404 = Responses.not_found.Content;
export interface Parameter$activity$list$watched$repos$for$authenticated$user {
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$activity$list$watched$repos$for$authenticated$user$Status$200 {
  "application/json": Schemas.minimal$repository[];
}
export type Response$activity$list$watched$repos$for$authenticated$user$Status$401 = Responses.requires_authentication.Content;
export type Response$activity$list$watched$repos$for$authenticated$user$Status$403 = Responses.forbidden.Content;
export interface Parameter$teams$list$for$authenticated$user {
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$teams$list$for$authenticated$user$Status$200 {
  "application/json": Schemas.team$full[];
}
export type Response$teams$list$for$authenticated$user$Status$403 = Responses.forbidden.Content;
export type Response$teams$list$for$authenticated$user$Status$404 = Responses.not_found.Content;
export interface Parameter$users$list {
  /** A user ID. Only return users with an ID greater than this ID. */
  since?: Parameters.since$user;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
}
export interface Response$users$list$Status$200 {
  "application/json": Schemas.simple$user[];
}
export interface Parameter$users$get$by$username {
  username: Parameters.username;
}
export interface Response$users$get$by$username$Status$200 {
  "application/json": Schemas.private$user | Schemas.public$user;
}
export type Response$users$get$by$username$Status$404 = Responses.not_found.Content;
export interface Parameter$activity$list$events$for$authenticated$user {
  username: Parameters.username;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$activity$list$events$for$authenticated$user$Status$200 {
  "application/json": Schemas.event[];
}
export interface Parameter$activity$list$org$events$for$authenticated$user {
  username: Parameters.username;
  org: Parameters.org;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$activity$list$org$events$for$authenticated$user$Status$200 {
  "application/json": Schemas.event[];
}
export interface Parameter$activity$list$public$events$for$user {
  username: Parameters.username;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$activity$list$public$events$for$user$Status$200 {
  "application/json": Schemas.event[];
}
export interface Parameter$users$list$followers$for$user {
  username: Parameters.username;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$users$list$followers$for$user$Status$200 {
  "application/json": Schemas.simple$user[];
}
export interface Parameter$users$list$following$for$user {
  username: Parameters.username;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$users$list$following$for$user$Status$200 {
  "application/json": Schemas.simple$user[];
}
export interface Parameter$users$check$following$for$user {
  username: Parameters.username;
  target_user: string;
}
export interface Parameter$gists$list$for$user {
  username: Parameters.username;
  /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
  since?: Parameters.since;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$gists$list$for$user$Status$200 {
  "application/json": Schemas.base$gist[];
}
export type Response$gists$list$for$user$Status$422 = Responses.validation_failed.Content;
export interface Parameter$users$list$gpg$keys$for$user {
  username: Parameters.username;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$users$list$gpg$keys$for$user$Status$200 {
  "application/json": Schemas.gpg$key[];
}
export interface Parameter$users$get$context$for$user {
  username: Parameters.username;
  /** Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`. */
  subject_type?: "organization" | "repository" | "issue" | "pull_request";
  /** Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`. */
  subject_id?: string;
}
export interface Response$users$get$context$for$user$Status$200 {
  "application/json": Schemas.hovercard;
}
export type Response$users$get$context$for$user$Status$404 = Responses.not_found.Content;
export type Response$users$get$context$for$user$Status$422 = Responses.validation_failed.Content;
export interface Parameter$apps$get$user$installation {
  username: Parameters.username;
}
export interface Response$apps$get$user$installation$Status$200 {
  "application/json": Schemas.installation;
}
export interface Parameter$users$list$public$keys$for$user {
  username: Parameters.username;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$users$list$public$keys$for$user$Status$200 {
  "application/json": Schemas.key$simple[];
}
export interface Parameter$orgs$list$for$user {
  username: Parameters.username;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$orgs$list$for$user$Status$200 {
  "application/json": Schemas.organization$simple[];
}
export interface Parameter$projects$list$for$user {
  username: Parameters.username;
  /** Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`. */
  state?: "open" | "closed" | "all";
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$projects$list$for$user$Status$200 {
  "application/json": Schemas.project[];
}
export type Response$projects$list$for$user$Status$422 = Responses.validation_failed.Content;
export interface Parameter$activity$list$received$events$for$user {
  username: Parameters.username;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$activity$list$received$events$for$user$Status$200 {
  "application/json": Schemas.event[];
}
export interface Parameter$activity$list$received$public$events$for$user {
  username: Parameters.username;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$activity$list$received$public$events$for$user$Status$200 {
  "application/json": Schemas.event[];
}
export interface Parameter$repos$list$for$user {
  username: Parameters.username;
  /** Can be one of `all`, `owner`, `member`. */
  type?: "all" | "owner" | "member";
  /** Can be one of `created`, `updated`, `pushed`, `full_name`. */
  sort?: "created" | "updated" | "pushed" | "full_name";
  /** Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc` */
  direction?: "asc" | "desc";
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$repos$list$for$user$Status$200 {
  "application/json": Schemas.minimal$repository[];
}
export interface Parameter$enterprise$admin$promote$user$to$be$site$administrator {
  username: Parameters.username;
}
export interface Parameter$enterprise$admin$demote$site$administrator {
  username: Parameters.username;
}
export interface Parameter$activity$list$repos$starred$by$user {
  username: Parameters.username;
  /** One of `created` (when the repository was starred) or `updated` (when it was last pushed to). */
  sort?: Parameters.sort;
  /** One of `asc` (ascending) or `desc` (descending). */
  direction?: Parameters.direction;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$activity$list$repos$starred$by$user$Status$200 {
  "application/json": Schemas.starred$repository[] | Schemas.repository[];
}
export interface Parameter$activity$list$repos$watched$by$user {
  username: Parameters.username;
  /** Results per page (max 100) */
  per_page?: Parameters.per$page;
  /** Page number of the results to fetch. */
  page?: Parameters.page;
}
export interface Response$activity$list$repos$watched$by$user$Status$200 {
  "application/json": Schemas.minimal$repository[];
}
export interface Parameter$enterprise$admin$suspend$user {
  username: Parameters.username;
}
export interface RequestBody$enterprise$admin$suspend$user {
  "application/json": {
    /** The reason the user is being suspended. This message will be logged in the [audit log](https://docs.github.com/enterprise/admin/articles/audit-logging/). If you don't provide a `reason`, it will default to "Suspended via API by _SITE\_ADMINISTRATOR_", where _SITE\_ADMINISTRATOR_ is the person who performed the action. */
    reason?: string;
  } | null;
}
export interface Parameter$enterprise$admin$unsuspend$user {
  username: Parameters.username;
}
export interface RequestBody$enterprise$admin$unsuspend$user {
  "application/json": {
    /** The reason the user is being unsuspended. This message will be logged in the [audit log](https://docs.github.com/enterprise/admin/articles/audit-logging/). If you don't provide a `reason`, it will default to "Unsuspended via API by _SITE\_ADMINISTRATOR_", where _SITE\_ADMINISTRATOR_ is the person who performed the action. */
    reason?: string;
  } | null;
}
export interface Response$meta$get$zen$Status$200 {
  "text/plain": string;
}
export type ResponseContentType$meta$root = keyof Response$meta$root$Status$200;
export type ResponseContentType$enterprise$admin$list$global$webhooks = keyof Response$enterprise$admin$list$global$webhooks$Status$200;
export interface Params$enterprise$admin$list$global$webhooks {
  parameter: Parameter$enterprise$admin$list$global$webhooks;
}
export type RequestContentType$enterprise$admin$create$global$webhook = keyof RequestBody$enterprise$admin$create$global$webhook;
export type ResponseContentType$enterprise$admin$create$global$webhook = keyof Response$enterprise$admin$create$global$webhook$Status$201;
export interface Params$enterprise$admin$create$global$webhook {
  requestBody: RequestBody$enterprise$admin$create$global$webhook["application/json"];
}
export type ResponseContentType$enterprise$admin$get$global$webhook = keyof Response$enterprise$admin$get$global$webhook$Status$200;
export interface Params$enterprise$admin$get$global$webhook {
  parameter: Parameter$enterprise$admin$get$global$webhook;
}
export interface Params$enterprise$admin$delete$global$webhook {
  parameter: Parameter$enterprise$admin$delete$global$webhook;
}
export type RequestContentType$enterprise$admin$update$global$webhook = keyof RequestBody$enterprise$admin$update$global$webhook;
export type ResponseContentType$enterprise$admin$update$global$webhook = keyof Response$enterprise$admin$update$global$webhook$Status$200;
export interface Params$enterprise$admin$update$global$webhook {
  parameter: Parameter$enterprise$admin$update$global$webhook;
  requestBody: RequestBody$enterprise$admin$update$global$webhook["application/json"];
}
export interface Params$enterprise$admin$ping$global$webhook {
  parameter: Parameter$enterprise$admin$ping$global$webhook;
}
export type ResponseContentType$enterprise$admin$list$public$keys = keyof Response$enterprise$admin$list$public$keys$Status$200;
export interface Params$enterprise$admin$list$public$keys {
  parameter: Parameter$enterprise$admin$list$public$keys;
}
export interface Params$enterprise$admin$delete$public$key {
  parameter: Parameter$enterprise$admin$delete$public$key;
}
export type RequestContentType$enterprise$admin$update$ldap$mapping$for$team = keyof RequestBody$enterprise$admin$update$ldap$mapping$for$team;
export type ResponseContentType$enterprise$admin$update$ldap$mapping$for$team =
  keyof Response$enterprise$admin$update$ldap$mapping$for$team$Status$200;
export interface Params$enterprise$admin$update$ldap$mapping$for$team {
  parameter: Parameter$enterprise$admin$update$ldap$mapping$for$team;
  requestBody: RequestBody$enterprise$admin$update$ldap$mapping$for$team["application/json"];
}
export type ResponseContentType$enterprise$admin$sync$ldap$mapping$for$team =
  keyof Response$enterprise$admin$sync$ldap$mapping$for$team$Status$201;
export interface Params$enterprise$admin$sync$ldap$mapping$for$team {
  parameter: Parameter$enterprise$admin$sync$ldap$mapping$for$team;
}
export type RequestContentType$enterprise$admin$update$ldap$mapping$for$user = keyof RequestBody$enterprise$admin$update$ldap$mapping$for$user;
export type ResponseContentType$enterprise$admin$update$ldap$mapping$for$user =
  keyof Response$enterprise$admin$update$ldap$mapping$for$user$Status$200;
export interface Params$enterprise$admin$update$ldap$mapping$for$user {
  parameter: Parameter$enterprise$admin$update$ldap$mapping$for$user;
  requestBody: RequestBody$enterprise$admin$update$ldap$mapping$for$user["application/json"];
}
export type ResponseContentType$enterprise$admin$sync$ldap$mapping$for$user =
  keyof Response$enterprise$admin$sync$ldap$mapping$for$user$Status$201;
export interface Params$enterprise$admin$sync$ldap$mapping$for$user {
  parameter: Parameter$enterprise$admin$sync$ldap$mapping$for$user;
}
export type RequestContentType$enterprise$admin$create$org = keyof RequestBody$enterprise$admin$create$org;
export type ResponseContentType$enterprise$admin$create$org = keyof Response$enterprise$admin$create$org$Status$201;
export interface Params$enterprise$admin$create$org {
  requestBody: RequestBody$enterprise$admin$create$org["application/json"];
}
export type RequestContentType$enterprise$admin$update$org$name = keyof RequestBody$enterprise$admin$update$org$name;
export type ResponseContentType$enterprise$admin$update$org$name = keyof Response$enterprise$admin$update$org$name$Status$202;
export interface Params$enterprise$admin$update$org$name {
  parameter: Parameter$enterprise$admin$update$org$name;
  requestBody: RequestBody$enterprise$admin$update$org$name["application/json"];
}
export type ResponseContentType$enterprise$admin$list$pre$receive$environments =
  keyof Response$enterprise$admin$list$pre$receive$environments$Status$200;
export interface Params$enterprise$admin$list$pre$receive$environments {
  parameter: Parameter$enterprise$admin$list$pre$receive$environments;
}
export type RequestContentType$enterprise$admin$create$pre$receive$environment =
  keyof RequestBody$enterprise$admin$create$pre$receive$environment;
export type ResponseContentType$enterprise$admin$create$pre$receive$environment =
  keyof Response$enterprise$admin$create$pre$receive$environment$Status$201;
export interface Params$enterprise$admin$create$pre$receive$environment {
  requestBody: RequestBody$enterprise$admin$create$pre$receive$environment["application/json"];
}
export type ResponseContentType$enterprise$admin$get$pre$receive$environment =
  keyof Response$enterprise$admin$get$pre$receive$environment$Status$200;
export interface Params$enterprise$admin$get$pre$receive$environment {
  parameter: Parameter$enterprise$admin$get$pre$receive$environment;
}
export interface Params$enterprise$admin$delete$pre$receive$environment {
  parameter: Parameter$enterprise$admin$delete$pre$receive$environment;
}
export type RequestContentType$enterprise$admin$update$pre$receive$environment =
  keyof RequestBody$enterprise$admin$update$pre$receive$environment;
export type ResponseContentType$enterprise$admin$update$pre$receive$environment =
  keyof Response$enterprise$admin$update$pre$receive$environment$Status$200;
export interface Params$enterprise$admin$update$pre$receive$environment {
  parameter: Parameter$enterprise$admin$update$pre$receive$environment;
  requestBody: RequestBody$enterprise$admin$update$pre$receive$environment["application/json"];
}
export type ResponseContentType$enterprise$admin$start$pre$receive$environment$download =
  keyof Response$enterprise$admin$start$pre$receive$environment$download$Status$202;
export interface Params$enterprise$admin$start$pre$receive$environment$download {
  parameter: Parameter$enterprise$admin$start$pre$receive$environment$download;
}
export type ResponseContentType$enterprise$admin$get$download$status$for$pre$receive$environment =
  keyof Response$enterprise$admin$get$download$status$for$pre$receive$environment$Status$200;
export interface Params$enterprise$admin$get$download$status$for$pre$receive$environment {
  parameter: Parameter$enterprise$admin$get$download$status$for$pre$receive$environment;
}
export type ResponseContentType$enterprise$admin$list$pre$receive$hooks = keyof Response$enterprise$admin$list$pre$receive$hooks$Status$200;
export interface Params$enterprise$admin$list$pre$receive$hooks {
  parameter: Parameter$enterprise$admin$list$pre$receive$hooks;
}
export type RequestContentType$enterprise$admin$create$pre$receive$hook = keyof RequestBody$enterprise$admin$create$pre$receive$hook;
export type ResponseContentType$enterprise$admin$create$pre$receive$hook = keyof Response$enterprise$admin$create$pre$receive$hook$Status$201;
export interface Params$enterprise$admin$create$pre$receive$hook {
  requestBody: RequestBody$enterprise$admin$create$pre$receive$hook["application/json"];
}
export type ResponseContentType$enterprise$admin$get$pre$receive$hook = keyof Response$enterprise$admin$get$pre$receive$hook$Status$200;
export interface Params$enterprise$admin$get$pre$receive$hook {
  parameter: Parameter$enterprise$admin$get$pre$receive$hook;
}
export interface Params$enterprise$admin$delete$pre$receive$hook {
  parameter: Parameter$enterprise$admin$delete$pre$receive$hook;
}
export type RequestContentType$enterprise$admin$update$pre$receive$hook = keyof RequestBody$enterprise$admin$update$pre$receive$hook;
export type ResponseContentType$enterprise$admin$update$pre$receive$hook = keyof Response$enterprise$admin$update$pre$receive$hook$Status$200;
export interface Params$enterprise$admin$update$pre$receive$hook {
  parameter: Parameter$enterprise$admin$update$pre$receive$hook;
  requestBody: RequestBody$enterprise$admin$update$pre$receive$hook["application/json"];
}
export type ResponseContentType$enterprise$admin$list$personal$access$tokens =
  keyof Response$enterprise$admin$list$personal$access$tokens$Status$200;
export interface Params$enterprise$admin$list$personal$access$tokens {
  parameter: Parameter$enterprise$admin$list$personal$access$tokens;
}
export interface Params$enterprise$admin$delete$personal$access$token {
  parameter: Parameter$enterprise$admin$delete$personal$access$token;
}
export type RequestContentType$enterprise$admin$create$user = keyof RequestBody$enterprise$admin$create$user;
export type ResponseContentType$enterprise$admin$create$user = keyof Response$enterprise$admin$create$user$Status$201;
export interface Params$enterprise$admin$create$user {
  requestBody: RequestBody$enterprise$admin$create$user["application/json"];
}
export interface Params$enterprise$admin$delete$user {
  parameter: Parameter$enterprise$admin$delete$user;
}
export type RequestContentType$enterprise$admin$update$username$for$user = keyof RequestBody$enterprise$admin$update$username$for$user;
export type ResponseContentType$enterprise$admin$update$username$for$user = keyof Response$enterprise$admin$update$username$for$user$Status$202;
export interface Params$enterprise$admin$update$username$for$user {
  parameter: Parameter$enterprise$admin$update$username$for$user;
  requestBody: RequestBody$enterprise$admin$update$username$for$user["application/json"];
}
export type RequestContentType$enterprise$admin$create$impersonation$o$auth$token =
  keyof RequestBody$enterprise$admin$create$impersonation$o$auth$token;
export type ResponseContentType$enterprise$admin$create$impersonation$o$auth$token =
  keyof Response$enterprise$admin$create$impersonation$o$auth$token$Status$201;
export interface Params$enterprise$admin$create$impersonation$o$auth$token {
  parameter: Parameter$enterprise$admin$create$impersonation$o$auth$token;
  requestBody: RequestBody$enterprise$admin$create$impersonation$o$auth$token["application/json"];
}
export interface Params$enterprise$admin$delete$impersonation$o$auth$token {
  parameter: Parameter$enterprise$admin$delete$impersonation$o$auth$token;
}
export type ResponseContentType$apps$get$authenticated = keyof Response$apps$get$authenticated$Status$200;
export type RequestContentType$apps$create$from$manifest = keyof RequestBody$apps$create$from$manifest;
export type ResponseContentType$apps$create$from$manifest = keyof Response$apps$create$from$manifest$Status$201;
export interface Params$apps$create$from$manifest {
  parameter: Parameter$apps$create$from$manifest;
  requestBody: RequestBody$apps$create$from$manifest["application/json"];
}
export type ResponseContentType$apps$get$webhook$config$for$app = keyof Response$apps$get$webhook$config$for$app$Status$200;
export type RequestContentType$apps$update$webhook$config$for$app = keyof RequestBody$apps$update$webhook$config$for$app;
export type ResponseContentType$apps$update$webhook$config$for$app = keyof Response$apps$update$webhook$config$for$app$Status$200;
export interface Params$apps$update$webhook$config$for$app {
  requestBody: RequestBody$apps$update$webhook$config$for$app["application/json"];
}
export type ResponseContentType$apps$list$webhook$deliveries = keyof Response$apps$list$webhook$deliveries$Status$200;
export interface Params$apps$list$webhook$deliveries {
  parameter: Parameter$apps$list$webhook$deliveries;
}
export type ResponseContentType$apps$get$webhook$delivery = keyof Response$apps$get$webhook$delivery$Status$200;
export interface Params$apps$get$webhook$delivery {
  parameter: Parameter$apps$get$webhook$delivery;
}
export type ResponseContentType$apps$redeliver$webhook$delivery = keyof Response$apps$redeliver$webhook$delivery$Status$202;
export interface Params$apps$redeliver$webhook$delivery {
  parameter: Parameter$apps$redeliver$webhook$delivery;
}
export type ResponseContentType$apps$list$installations = keyof Response$apps$list$installations$Status$200;
export interface Params$apps$list$installations {
  parameter: Parameter$apps$list$installations;
}
export type ResponseContentType$apps$get$installation = keyof Response$apps$get$installation$Status$200;
export interface Params$apps$get$installation {
  parameter: Parameter$apps$get$installation;
}
export interface Params$apps$delete$installation {
  parameter: Parameter$apps$delete$installation;
}
export type RequestContentType$apps$create$installation$access$token = keyof RequestBody$apps$create$installation$access$token;
export type ResponseContentType$apps$create$installation$access$token = keyof Response$apps$create$installation$access$token$Status$201;
export interface Params$apps$create$installation$access$token {
  parameter: Parameter$apps$create$installation$access$token;
  requestBody: RequestBody$apps$create$installation$access$token["application/json"];
}
export interface Params$apps$suspend$installation {
  parameter: Parameter$apps$suspend$installation;
}
export interface Params$apps$unsuspend$installation {
  parameter: Parameter$apps$unsuspend$installation;
}
export type ResponseContentType$oauth$authorizations$list$grants = keyof Response$oauth$authorizations$list$grants$Status$200;
export interface Params$oauth$authorizations$list$grants {
  parameter: Parameter$oauth$authorizations$list$grants;
}
export type ResponseContentType$oauth$authorizations$get$grant = keyof Response$oauth$authorizations$get$grant$Status$200;
export interface Params$oauth$authorizations$get$grant {
  parameter: Parameter$oauth$authorizations$get$grant;
}
export interface Params$oauth$authorizations$delete$grant {
  parameter: Parameter$oauth$authorizations$delete$grant;
}
export type RequestContentType$apps$delete$authorization = keyof RequestBody$apps$delete$authorization;
export interface Params$apps$delete$authorization {
  parameter: Parameter$apps$delete$authorization;
  requestBody: RequestBody$apps$delete$authorization["application/json"];
}
export type RequestContentType$apps$check$token = keyof RequestBody$apps$check$token;
export type ResponseContentType$apps$check$token = keyof Response$apps$check$token$Status$200;
export interface Params$apps$check$token {
  parameter: Parameter$apps$check$token;
  requestBody: RequestBody$apps$check$token["application/json"];
}
export type RequestContentType$apps$delete$token = keyof RequestBody$apps$delete$token;
export interface Params$apps$delete$token {
  parameter: Parameter$apps$delete$token;
  requestBody: RequestBody$apps$delete$token["application/json"];
}
export type RequestContentType$apps$reset$token = keyof RequestBody$apps$reset$token;
export type ResponseContentType$apps$reset$token = keyof Response$apps$reset$token$Status$200;
export interface Params$apps$reset$token {
  parameter: Parameter$apps$reset$token;
  requestBody: RequestBody$apps$reset$token["application/json"];
}
export type RequestContentType$apps$scope$token = keyof RequestBody$apps$scope$token;
export type ResponseContentType$apps$scope$token = keyof Response$apps$scope$token$Status$200;
export interface Params$apps$scope$token {
  parameter: Parameter$apps$scope$token;
  requestBody: RequestBody$apps$scope$token["application/json"];
}
export type ResponseContentType$apps$get$by$slug = keyof Response$apps$get$by$slug$Status$200;
export interface Params$apps$get$by$slug {
  parameter: Parameter$apps$get$by$slug;
}
export type ResponseContentType$oauth$authorizations$list$authorizations = keyof Response$oauth$authorizations$list$authorizations$Status$200;
export interface Params$oauth$authorizations$list$authorizations {
  parameter: Parameter$oauth$authorizations$list$authorizations;
}
export type RequestContentType$oauth$authorizations$create$authorization = keyof RequestBody$oauth$authorizations$create$authorization;
export type ResponseContentType$oauth$authorizations$create$authorization = keyof Response$oauth$authorizations$create$authorization$Status$201;
export interface Params$oauth$authorizations$create$authorization {
  requestBody: RequestBody$oauth$authorizations$create$authorization["application/json"];
}
export type RequestContentType$oauth$authorizations$get$or$create$authorization$for$app =
  keyof RequestBody$oauth$authorizations$get$or$create$authorization$for$app;
export type ResponseContentType$oauth$authorizations$get$or$create$authorization$for$app =
  keyof Response$oauth$authorizations$get$or$create$authorization$for$app$Status$200;
export interface Params$oauth$authorizations$get$or$create$authorization$for$app {
  parameter: Parameter$oauth$authorizations$get$or$create$authorization$for$app;
  requestBody: RequestBody$oauth$authorizations$get$or$create$authorization$for$app["application/json"];
}
export type RequestContentType$oauth$authorizations$get$or$create$authorization$for$app$and$fingerprint =
  keyof RequestBody$oauth$authorizations$get$or$create$authorization$for$app$and$fingerprint;
export type ResponseContentType$oauth$authorizations$get$or$create$authorization$for$app$and$fingerprint =
  keyof Response$oauth$authorizations$get$or$create$authorization$for$app$and$fingerprint$Status$200;
export interface Params$oauth$authorizations$get$or$create$authorization$for$app$and$fingerprint {
  parameter: Parameter$oauth$authorizations$get$or$create$authorization$for$app$and$fingerprint;
  requestBody: RequestBody$oauth$authorizations$get$or$create$authorization$for$app$and$fingerprint["application/json"];
}
export type ResponseContentType$oauth$authorizations$get$authorization = keyof Response$oauth$authorizations$get$authorization$Status$200;
export interface Params$oauth$authorizations$get$authorization {
  parameter: Parameter$oauth$authorizations$get$authorization;
}
export interface Params$oauth$authorizations$delete$authorization {
  parameter: Parameter$oauth$authorizations$delete$authorization;
}
export type RequestContentType$oauth$authorizations$update$authorization = keyof RequestBody$oauth$authorizations$update$authorization;
export type ResponseContentType$oauth$authorizations$update$authorization = keyof Response$oauth$authorizations$update$authorization$Status$200;
export interface Params$oauth$authorizations$update$authorization {
  parameter: Parameter$oauth$authorizations$update$authorization;
  requestBody: RequestBody$oauth$authorizations$update$authorization["application/json"];
}
export type ResponseContentType$codes$of$conduct$get$all$codes$of$conduct = keyof Response$codes$of$conduct$get$all$codes$of$conduct$Status$200;
export type ResponseContentType$codes$of$conduct$get$conduct$code = keyof Response$codes$of$conduct$get$conduct$code$Status$200;
export interface Params$codes$of$conduct$get$conduct$code {
  parameter: Parameter$codes$of$conduct$get$conduct$code;
}
export type ResponseContentType$emojis$get = keyof Response$emojis$get$Status$200;
export type ResponseContentType$enterprise$admin$get$announcement = keyof Response$enterprise$admin$get$announcement$Status$200;
export type RequestContentType$enterprise$admin$set$announcement = keyof RequestBody$enterprise$admin$set$announcement;
export type ResponseContentType$enterprise$admin$set$announcement = keyof Response$enterprise$admin$set$announcement$Status$200;
export interface Params$enterprise$admin$set$announcement {
  requestBody: RequestBody$enterprise$admin$set$announcement["application/json"];
}
export type ResponseContentType$enterprise$admin$get$license$information = keyof Response$enterprise$admin$get$license$information$Status$200;
export type ResponseContentType$enterprise$admin$get$all$stats = keyof Response$enterprise$admin$get$all$stats$Status$200;
export type ResponseContentType$enterprise$admin$get$comment$stats = keyof Response$enterprise$admin$get$comment$stats$Status$200;
export type ResponseContentType$enterprise$admin$get$gist$stats = keyof Response$enterprise$admin$get$gist$stats$Status$200;
export type ResponseContentType$enterprise$admin$get$hooks$stats = keyof Response$enterprise$admin$get$hooks$stats$Status$200;
export type ResponseContentType$enterprise$admin$get$issue$stats = keyof Response$enterprise$admin$get$issue$stats$Status$200;
export type ResponseContentType$enterprise$admin$get$milestone$stats = keyof Response$enterprise$admin$get$milestone$stats$Status$200;
export type ResponseContentType$enterprise$admin$get$org$stats = keyof Response$enterprise$admin$get$org$stats$Status$200;
export type ResponseContentType$enterprise$admin$get$pages$stats = keyof Response$enterprise$admin$get$pages$stats$Status$200;
export type ResponseContentType$enterprise$admin$get$pull$request$stats = keyof Response$enterprise$admin$get$pull$request$stats$Status$200;
export type ResponseContentType$enterprise$admin$get$repo$stats = keyof Response$enterprise$admin$get$repo$stats$Status$200;
export type ResponseContentType$enterprise$admin$get$user$stats = keyof Response$enterprise$admin$get$user$stats$Status$200;
export type ResponseContentType$enterprise$admin$get$github$actions$permissions$enterprise =
  keyof Response$enterprise$admin$get$github$actions$permissions$enterprise$Status$200;
export interface Params$enterprise$admin$get$github$actions$permissions$enterprise {
  parameter: Parameter$enterprise$admin$get$github$actions$permissions$enterprise;
}
export type RequestContentType$enterprise$admin$set$github$actions$permissions$enterprise =
  keyof RequestBody$enterprise$admin$set$github$actions$permissions$enterprise;
export interface Params$enterprise$admin$set$github$actions$permissions$enterprise {
  parameter: Parameter$enterprise$admin$set$github$actions$permissions$enterprise;
  requestBody: RequestBody$enterprise$admin$set$github$actions$permissions$enterprise["application/json"];
}
export type ResponseContentType$enterprise$admin$list$selected$organizations$enabled$github$actions$enterprise =
  keyof Response$enterprise$admin$list$selected$organizations$enabled$github$actions$enterprise$Status$200;
export interface Params$enterprise$admin$list$selected$organizations$enabled$github$actions$enterprise {
  parameter: Parameter$enterprise$admin$list$selected$organizations$enabled$github$actions$enterprise;
}
export type RequestContentType$enterprise$admin$set$selected$organizations$enabled$github$actions$enterprise =
  keyof RequestBody$enterprise$admin$set$selected$organizations$enabled$github$actions$enterprise;
export interface Params$enterprise$admin$set$selected$organizations$enabled$github$actions$enterprise {
  parameter: Parameter$enterprise$admin$set$selected$organizations$enabled$github$actions$enterprise;
  requestBody: RequestBody$enterprise$admin$set$selected$organizations$enabled$github$actions$enterprise["application/json"];
}
export interface Params$enterprise$admin$enable$selected$organization$github$actions$enterprise {
  parameter: Parameter$enterprise$admin$enable$selected$organization$github$actions$enterprise;
}
export interface Params$enterprise$admin$disable$selected$organization$github$actions$enterprise {
  parameter: Parameter$enterprise$admin$disable$selected$organization$github$actions$enterprise;
}
export type ResponseContentType$enterprise$admin$get$allowed$actions$enterprise =
  keyof Response$enterprise$admin$get$allowed$actions$enterprise$Status$200;
export interface Params$enterprise$admin$get$allowed$actions$enterprise {
  parameter: Parameter$enterprise$admin$get$allowed$actions$enterprise;
}
export type RequestContentType$enterprise$admin$set$allowed$actions$enterprise =
  keyof RequestBody$enterprise$admin$set$allowed$actions$enterprise;
export interface Params$enterprise$admin$set$allowed$actions$enterprise {
  parameter: Parameter$enterprise$admin$set$allowed$actions$enterprise;
  requestBody: RequestBody$enterprise$admin$set$allowed$actions$enterprise["application/json"];
}
export type ResponseContentType$enterprise$admin$list$self$hosted$runner$groups$for$enterprise =
  keyof Response$enterprise$admin$list$self$hosted$runner$groups$for$enterprise$Status$200;
export interface Params$enterprise$admin$list$self$hosted$runner$groups$for$enterprise {
  parameter: Parameter$enterprise$admin$list$self$hosted$runner$groups$for$enterprise;
}
export type RequestContentType$enterprise$admin$create$self$hosted$runner$group$for$enterprise =
  keyof RequestBody$enterprise$admin$create$self$hosted$runner$group$for$enterprise;
export type ResponseContentType$enterprise$admin$create$self$hosted$runner$group$for$enterprise =
  keyof Response$enterprise$admin$create$self$hosted$runner$group$for$enterprise$Status$201;
export interface Params$enterprise$admin$create$self$hosted$runner$group$for$enterprise {
  parameter: Parameter$enterprise$admin$create$self$hosted$runner$group$for$enterprise;
  requestBody: RequestBody$enterprise$admin$create$self$hosted$runner$group$for$enterprise["application/json"];
}
export type ResponseContentType$enterprise$admin$get$self$hosted$runner$group$for$enterprise =
  keyof Response$enterprise$admin$get$self$hosted$runner$group$for$enterprise$Status$200;
export interface Params$enterprise$admin$get$self$hosted$runner$group$for$enterprise {
  parameter: Parameter$enterprise$admin$get$self$hosted$runner$group$for$enterprise;
}
export interface Params$enterprise$admin$delete$self$hosted$runner$group$from$enterprise {
  parameter: Parameter$enterprise$admin$delete$self$hosted$runner$group$from$enterprise;
}
export type RequestContentType$enterprise$admin$update$self$hosted$runner$group$for$enterprise =
  keyof RequestBody$enterprise$admin$update$self$hosted$runner$group$for$enterprise;
export type ResponseContentType$enterprise$admin$update$self$hosted$runner$group$for$enterprise =
  keyof Response$enterprise$admin$update$self$hosted$runner$group$for$enterprise$Status$200;
export interface Params$enterprise$admin$update$self$hosted$runner$group$for$enterprise {
  parameter: Parameter$enterprise$admin$update$self$hosted$runner$group$for$enterprise;
  requestBody: RequestBody$enterprise$admin$update$self$hosted$runner$group$for$enterprise["application/json"];
}
export type ResponseContentType$enterprise$admin$list$org$access$to$self$hosted$runner$group$in$enterprise =
  keyof Response$enterprise$admin$list$org$access$to$self$hosted$runner$group$in$enterprise$Status$200;
export interface Params$enterprise$admin$list$org$access$to$self$hosted$runner$group$in$enterprise {
  parameter: Parameter$enterprise$admin$list$org$access$to$self$hosted$runner$group$in$enterprise;
}
export type RequestContentType$enterprise$admin$set$org$access$to$self$hosted$runner$group$in$enterprise =
  keyof RequestBody$enterprise$admin$set$org$access$to$self$hosted$runner$group$in$enterprise;
export interface Params$enterprise$admin$set$org$access$to$self$hosted$runner$group$in$enterprise {
  parameter: Parameter$enterprise$admin$set$org$access$to$self$hosted$runner$group$in$enterprise;
  requestBody: RequestBody$enterprise$admin$set$org$access$to$self$hosted$runner$group$in$enterprise["application/json"];
}
export interface Params$enterprise$admin$add$org$access$to$self$hosted$runner$group$in$enterprise {
  parameter: Parameter$enterprise$admin$add$org$access$to$self$hosted$runner$group$in$enterprise;
}
export interface Params$enterprise$admin$remove$org$access$to$self$hosted$runner$group$in$enterprise {
  parameter: Parameter$enterprise$admin$remove$org$access$to$self$hosted$runner$group$in$enterprise;
}
export type ResponseContentType$enterprise$admin$list$self$hosted$runners$in$group$for$enterprise =
  keyof Response$enterprise$admin$list$self$hosted$runners$in$group$for$enterprise$Status$200;
export interface Params$enterprise$admin$list$self$hosted$runners$in$group$for$enterprise {
  parameter: Parameter$enterprise$admin$list$self$hosted$runners$in$group$for$enterprise;
}
export type RequestContentType$enterprise$admin$set$self$hosted$runners$in$group$for$enterprise =
  keyof RequestBody$enterprise$admin$set$self$hosted$runners$in$group$for$enterprise;
export interface Params$enterprise$admin$set$self$hosted$runners$in$group$for$enterprise {
  parameter: Parameter$enterprise$admin$set$self$hosted$runners$in$group$for$enterprise;
  requestBody: RequestBody$enterprise$admin$set$self$hosted$runners$in$group$for$enterprise["application/json"];
}
export interface Params$enterprise$admin$add$self$hosted$runner$to$group$for$enterprise {
  parameter: Parameter$enterprise$admin$add$self$hosted$runner$to$group$for$enterprise;
}
export interface Params$enterprise$admin$remove$self$hosted$runner$from$group$for$enterprise {
  parameter: Parameter$enterprise$admin$remove$self$hosted$runner$from$group$for$enterprise;
}
export type ResponseContentType$enterprise$admin$list$self$hosted$runners$for$enterprise =
  keyof Response$enterprise$admin$list$self$hosted$runners$for$enterprise$Status$200;
export interface Params$enterprise$admin$list$self$hosted$runners$for$enterprise {
  parameter: Parameter$enterprise$admin$list$self$hosted$runners$for$enterprise;
}
export type ResponseContentType$enterprise$admin$list$runner$applications$for$enterprise =
  keyof Response$enterprise$admin$list$runner$applications$for$enterprise$Status$200;
export interface Params$enterprise$admin$list$runner$applications$for$enterprise {
  parameter: Parameter$enterprise$admin$list$runner$applications$for$enterprise;
}
export type ResponseContentType$enterprise$admin$create$registration$token$for$enterprise =
  keyof Response$enterprise$admin$create$registration$token$for$enterprise$Status$201;
export interface Params$enterprise$admin$create$registration$token$for$enterprise {
  parameter: Parameter$enterprise$admin$create$registration$token$for$enterprise;
}
export type ResponseContentType$enterprise$admin$create$remove$token$for$enterprise =
  keyof Response$enterprise$admin$create$remove$token$for$enterprise$Status$201;
export interface Params$enterprise$admin$create$remove$token$for$enterprise {
  parameter: Parameter$enterprise$admin$create$remove$token$for$enterprise;
}
export type ResponseContentType$enterprise$admin$get$self$hosted$runner$for$enterprise =
  keyof Response$enterprise$admin$get$self$hosted$runner$for$enterprise$Status$200;
export interface Params$enterprise$admin$get$self$hosted$runner$for$enterprise {
  parameter: Parameter$enterprise$admin$get$self$hosted$runner$for$enterprise;
}
export interface Params$enterprise$admin$delete$self$hosted$runner$from$enterprise {
  parameter: Parameter$enterprise$admin$delete$self$hosted$runner$from$enterprise;
}
export type ResponseContentType$enterprise$admin$list$labels$for$self$hosted$runner$for$enterprise =
  keyof Response$enterprise$admin$list$labels$for$self$hosted$runner$for$enterprise$Status$200;
export interface Params$enterprise$admin$list$labels$for$self$hosted$runner$for$enterprise {
  parameter: Parameter$enterprise$admin$list$labels$for$self$hosted$runner$for$enterprise;
}
export type RequestContentType$enterprise$admin$set$custom$labels$for$self$hosted$runner$for$enterprise =
  keyof RequestBody$enterprise$admin$set$custom$labels$for$self$hosted$runner$for$enterprise;
export type ResponseContentType$enterprise$admin$set$custom$labels$for$self$hosted$runner$for$enterprise =
  keyof Response$enterprise$admin$set$custom$labels$for$self$hosted$runner$for$enterprise$Status$200;
export interface Params$enterprise$admin$set$custom$labels$for$self$hosted$runner$for$enterprise {
  parameter: Parameter$enterprise$admin$set$custom$labels$for$self$hosted$runner$for$enterprise;
  requestBody: RequestBody$enterprise$admin$set$custom$labels$for$self$hosted$runner$for$enterprise["application/json"];
}
export type RequestContentType$enterprise$admin$add$custom$labels$to$self$hosted$runner$for$enterprise =
  keyof RequestBody$enterprise$admin$add$custom$labels$to$self$hosted$runner$for$enterprise;
export type ResponseContentType$enterprise$admin$add$custom$labels$to$self$hosted$runner$for$enterprise =
  keyof Response$enterprise$admin$add$custom$labels$to$self$hosted$runner$for$enterprise$Status$200;
export interface Params$enterprise$admin$add$custom$labels$to$self$hosted$runner$for$enterprise {
  parameter: Parameter$enterprise$admin$add$custom$labels$to$self$hosted$runner$for$enterprise;
  requestBody: RequestBody$enterprise$admin$add$custom$labels$to$self$hosted$runner$for$enterprise["application/json"];
}
export type ResponseContentType$enterprise$admin$remove$all$custom$labels$from$self$hosted$runner$for$enterprise =
  keyof Response$enterprise$admin$remove$all$custom$labels$from$self$hosted$runner$for$enterprise$Status$200;
export interface Params$enterprise$admin$remove$all$custom$labels$from$self$hosted$runner$for$enterprise {
  parameter: Parameter$enterprise$admin$remove$all$custom$labels$from$self$hosted$runner$for$enterprise;
}
export type ResponseContentType$enterprise$admin$remove$custom$label$from$self$hosted$runner$for$enterprise =
  keyof Response$enterprise$admin$remove$custom$label$from$self$hosted$runner$for$enterprise$Status$200;
export interface Params$enterprise$admin$remove$custom$label$from$self$hosted$runner$for$enterprise {
  parameter: Parameter$enterprise$admin$remove$custom$label$from$self$hosted$runner$for$enterprise;
}
export type ResponseContentType$enterprise$admin$get$audit$log = keyof Response$enterprise$admin$get$audit$log$Status$200;
export interface Params$enterprise$admin$get$audit$log {
  parameter: Parameter$enterprise$admin$get$audit$log;
}
export type ResponseContentType$secret$scanning$list$alerts$for$enterprise =
  keyof Response$secret$scanning$list$alerts$for$enterprise$Status$200;
export interface Params$secret$scanning$list$alerts$for$enterprise {
  parameter: Parameter$secret$scanning$list$alerts$for$enterprise;
}
export type ResponseContentType$billing$get$github$advanced$security$billing$ghe =
  keyof Response$billing$get$github$advanced$security$billing$ghe$Status$200;
export interface Params$billing$get$github$advanced$security$billing$ghe {
  parameter: Parameter$billing$get$github$advanced$security$billing$ghe;
}
export type ResponseContentType$activity$list$public$events = keyof Response$activity$list$public$events$Status$200;
export interface Params$activity$list$public$events {
  parameter: Parameter$activity$list$public$events;
}
export type ResponseContentType$activity$get$feeds = keyof Response$activity$get$feeds$Status$200;
export type ResponseContentType$gists$list = keyof Response$gists$list$Status$200;
export interface Params$gists$list {
  parameter: Parameter$gists$list;
}
export type RequestContentType$gists$create = keyof RequestBody$gists$create;
export type ResponseContentType$gists$create = keyof Response$gists$create$Status$201;
export interface Params$gists$create {
  requestBody: RequestBody$gists$create["application/json"];
}
export type ResponseContentType$gists$list$public = keyof Response$gists$list$public$Status$200;
export interface Params$gists$list$public {
  parameter: Parameter$gists$list$public;
}
export type ResponseContentType$gists$list$starred = keyof Response$gists$list$starred$Status$200;
export interface Params$gists$list$starred {
  parameter: Parameter$gists$list$starred;
}
export type ResponseContentType$gists$get = keyof Response$gists$get$Status$200;
export interface Params$gists$get {
  parameter: Parameter$gists$get;
}
export interface Params$gists$delete {
  parameter: Parameter$gists$delete;
}
export type RequestContentType$gists$update = keyof RequestBody$gists$update;
export type ResponseContentType$gists$update = keyof Response$gists$update$Status$200;
export interface Params$gists$update {
  parameter: Parameter$gists$update;
  requestBody: RequestBody$gists$update["application/json"];
}
export type ResponseContentType$gists$list$comments = keyof Response$gists$list$comments$Status$200;
export interface Params$gists$list$comments {
  parameter: Parameter$gists$list$comments;
}
export type RequestContentType$gists$create$comment = keyof RequestBody$gists$create$comment;
export type ResponseContentType$gists$create$comment = keyof Response$gists$create$comment$Status$201;
export interface Params$gists$create$comment {
  parameter: Parameter$gists$create$comment;
  requestBody: RequestBody$gists$create$comment["application/json"];
}
export type ResponseContentType$gists$get$comment = keyof Response$gists$get$comment$Status$200;
export interface Params$gists$get$comment {
  parameter: Parameter$gists$get$comment;
}
export interface Params$gists$delete$comment {
  parameter: Parameter$gists$delete$comment;
}
export type RequestContentType$gists$update$comment = keyof RequestBody$gists$update$comment;
export type ResponseContentType$gists$update$comment = keyof Response$gists$update$comment$Status$200;
export interface Params$gists$update$comment {
  parameter: Parameter$gists$update$comment;
  requestBody: RequestBody$gists$update$comment["application/json"];
}
export type ResponseContentType$gists$list$commits = keyof Response$gists$list$commits$Status$200;
export interface Params$gists$list$commits {
  parameter: Parameter$gists$list$commits;
}
export type ResponseContentType$gists$list$forks = keyof Response$gists$list$forks$Status$200;
export interface Params$gists$list$forks {
  parameter: Parameter$gists$list$forks;
}
export type ResponseContentType$gists$fork = keyof Response$gists$fork$Status$201;
export interface Params$gists$fork {
  parameter: Parameter$gists$fork;
}
export interface Params$gists$check$is$starred {
  parameter: Parameter$gists$check$is$starred;
}
export interface Params$gists$star {
  parameter: Parameter$gists$star;
}
export interface Params$gists$unstar {
  parameter: Parameter$gists$unstar;
}
export type ResponseContentType$gists$get$revision = keyof Response$gists$get$revision$Status$200;
export interface Params$gists$get$revision {
  parameter: Parameter$gists$get$revision;
}
export type ResponseContentType$gitignore$get$all$templates = keyof Response$gitignore$get$all$templates$Status$200;
export type ResponseContentType$gitignore$get$template = keyof Response$gitignore$get$template$Status$200;
export interface Params$gitignore$get$template {
  parameter: Parameter$gitignore$get$template;
}
export type ResponseContentType$apps$list$repos$accessible$to$installation =
  keyof Response$apps$list$repos$accessible$to$installation$Status$200;
export interface Params$apps$list$repos$accessible$to$installation {
  parameter: Parameter$apps$list$repos$accessible$to$installation;
}
export type ResponseContentType$issues$list = keyof Response$issues$list$Status$200;
export interface Params$issues$list {
  parameter: Parameter$issues$list;
}
export type ResponseContentType$licenses$get$all$commonly$used = keyof Response$licenses$get$all$commonly$used$Status$200;
export interface Params$licenses$get$all$commonly$used {
  parameter: Parameter$licenses$get$all$commonly$used;
}
export type ResponseContentType$licenses$get = keyof Response$licenses$get$Status$200;
export interface Params$licenses$get {
  parameter: Parameter$licenses$get;
}
export type RequestContentType$markdown$render = keyof RequestBody$markdown$render;
export type ResponseContentType$markdown$render = keyof Response$markdown$render$Status$200;
export interface Params$markdown$render {
  requestBody: RequestBody$markdown$render["application/json"];
}
export type RequestContentType$markdown$render$raw = keyof RequestBody$markdown$render$raw;
export type ResponseContentType$markdown$render$raw = keyof Response$markdown$render$raw$Status$200;
export interface Params$markdown$render$raw<T extends RequestContentType$markdown$render$raw> {
  headers: {
    "Content-Type": T;
  };
  requestBody: RequestBody$markdown$render$raw[T];
}
export type ResponseContentType$meta$get = keyof Response$meta$get$Status$200;
export type ResponseContentType$activity$list$public$events$for$repo$network =
  keyof Response$activity$list$public$events$for$repo$network$Status$200;
export interface Params$activity$list$public$events$for$repo$network {
  parameter: Parameter$activity$list$public$events$for$repo$network;
}
export type ResponseContentType$activity$list$notifications$for$authenticated$user =
  keyof Response$activity$list$notifications$for$authenticated$user$Status$200;
export interface Params$activity$list$notifications$for$authenticated$user {
  parameter: Parameter$activity$list$notifications$for$authenticated$user;
}
export type RequestContentType$activity$mark$notifications$as$read = keyof RequestBody$activity$mark$notifications$as$read;
export type ResponseContentType$activity$mark$notifications$as$read = keyof Response$activity$mark$notifications$as$read$Status$202;
export interface Params$activity$mark$notifications$as$read {
  requestBody: RequestBody$activity$mark$notifications$as$read["application/json"];
}
export type ResponseContentType$activity$get$thread = keyof Response$activity$get$thread$Status$200;
export interface Params$activity$get$thread {
  parameter: Parameter$activity$get$thread;
}
export interface Params$activity$mark$thread$as$read {
  parameter: Parameter$activity$mark$thread$as$read;
}
export type ResponseContentType$activity$get$thread$subscription$for$authenticated$user =
  keyof Response$activity$get$thread$subscription$for$authenticated$user$Status$200;
export interface Params$activity$get$thread$subscription$for$authenticated$user {
  parameter: Parameter$activity$get$thread$subscription$for$authenticated$user;
}
export type RequestContentType$activity$set$thread$subscription = keyof RequestBody$activity$set$thread$subscription;
export type ResponseContentType$activity$set$thread$subscription = keyof Response$activity$set$thread$subscription$Status$200;
export interface Params$activity$set$thread$subscription {
  parameter: Parameter$activity$set$thread$subscription;
  requestBody: RequestBody$activity$set$thread$subscription["application/json"];
}
export interface Params$activity$delete$thread$subscription {
  parameter: Parameter$activity$delete$thread$subscription;
}
export type ResponseContentType$meta$get$octocat = keyof Response$meta$get$octocat$Status$200;
export interface Params$meta$get$octocat {
  parameter: Parameter$meta$get$octocat;
}
export type ResponseContentType$orgs$list = keyof Response$orgs$list$Status$200;
export interface Params$orgs$list {
  parameter: Parameter$orgs$list;
}
export type ResponseContentType$orgs$list$custom$roles = keyof Response$orgs$list$custom$roles$Status$200;
export interface Params$orgs$list$custom$roles {
  parameter: Parameter$orgs$list$custom$roles;
}
export type ResponseContentType$orgs$get = keyof Response$orgs$get$Status$200;
export interface Params$orgs$get {
  parameter: Parameter$orgs$get;
}
export type RequestContentType$orgs$update = keyof RequestBody$orgs$update;
export type ResponseContentType$orgs$update = keyof Response$orgs$update$Status$200;
export interface Params$orgs$update {
  parameter: Parameter$orgs$update;
  requestBody: RequestBody$orgs$update["application/json"];
}
export type ResponseContentType$actions$get$github$actions$permissions$organization =
  keyof Response$actions$get$github$actions$permissions$organization$Status$200;
export interface Params$actions$get$github$actions$permissions$organization {
  parameter: Parameter$actions$get$github$actions$permissions$organization;
}
export type RequestContentType$actions$set$github$actions$permissions$organization =
  keyof RequestBody$actions$set$github$actions$permissions$organization;
export interface Params$actions$set$github$actions$permissions$organization {
  parameter: Parameter$actions$set$github$actions$permissions$organization;
  requestBody: RequestBody$actions$set$github$actions$permissions$organization["application/json"];
}
export type ResponseContentType$actions$list$selected$repositories$enabled$github$actions$organization =
  keyof Response$actions$list$selected$repositories$enabled$github$actions$organization$Status$200;
export interface Params$actions$list$selected$repositories$enabled$github$actions$organization {
  parameter: Parameter$actions$list$selected$repositories$enabled$github$actions$organization;
}
export type RequestContentType$actions$set$selected$repositories$enabled$github$actions$organization =
  keyof RequestBody$actions$set$selected$repositories$enabled$github$actions$organization;
export interface Params$actions$set$selected$repositories$enabled$github$actions$organization {
  parameter: Parameter$actions$set$selected$repositories$enabled$github$actions$organization;
  requestBody: RequestBody$actions$set$selected$repositories$enabled$github$actions$organization["application/json"];
}
export interface Params$actions$enable$selected$repository$github$actions$organization {
  parameter: Parameter$actions$enable$selected$repository$github$actions$organization;
}
export interface Params$actions$disable$selected$repository$github$actions$organization {
  parameter: Parameter$actions$disable$selected$repository$github$actions$organization;
}
export type ResponseContentType$actions$get$allowed$actions$organization = keyof Response$actions$get$allowed$actions$organization$Status$200;
export interface Params$actions$get$allowed$actions$organization {
  parameter: Parameter$actions$get$allowed$actions$organization;
}
export type RequestContentType$actions$set$allowed$actions$organization = keyof RequestBody$actions$set$allowed$actions$organization;
export interface Params$actions$set$allowed$actions$organization {
  parameter: Parameter$actions$set$allowed$actions$organization;
  requestBody: RequestBody$actions$set$allowed$actions$organization["application/json"];
}
export type ResponseContentType$actions$list$self$hosted$runner$groups$for$org =
  keyof Response$actions$list$self$hosted$runner$groups$for$org$Status$200;
export interface Params$actions$list$self$hosted$runner$groups$for$org {
  parameter: Parameter$actions$list$self$hosted$runner$groups$for$org;
}
export type RequestContentType$actions$create$self$hosted$runner$group$for$org =
  keyof RequestBody$actions$create$self$hosted$runner$group$for$org;
export type ResponseContentType$actions$create$self$hosted$runner$group$for$org =
  keyof Response$actions$create$self$hosted$runner$group$for$org$Status$201;
export interface Params$actions$create$self$hosted$runner$group$for$org {
  parameter: Parameter$actions$create$self$hosted$runner$group$for$org;
  requestBody: RequestBody$actions$create$self$hosted$runner$group$for$org["application/json"];
}
export type ResponseContentType$actions$get$self$hosted$runner$group$for$org =
  keyof Response$actions$get$self$hosted$runner$group$for$org$Status$200;
export interface Params$actions$get$self$hosted$runner$group$for$org {
  parameter: Parameter$actions$get$self$hosted$runner$group$for$org;
}
export interface Params$actions$delete$self$hosted$runner$group$from$org {
  parameter: Parameter$actions$delete$self$hosted$runner$group$from$org;
}
export type RequestContentType$actions$update$self$hosted$runner$group$for$org =
  keyof RequestBody$actions$update$self$hosted$runner$group$for$org;
export type ResponseContentType$actions$update$self$hosted$runner$group$for$org =
  keyof Response$actions$update$self$hosted$runner$group$for$org$Status$200;
export interface Params$actions$update$self$hosted$runner$group$for$org {
  parameter: Parameter$actions$update$self$hosted$runner$group$for$org;
  requestBody: RequestBody$actions$update$self$hosted$runner$group$for$org["application/json"];
}
export type ResponseContentType$actions$list$repo$access$to$self$hosted$runner$group$in$org =
  keyof Response$actions$list$repo$access$to$self$hosted$runner$group$in$org$Status$200;
export interface Params$actions$list$repo$access$to$self$hosted$runner$group$in$org {
  parameter: Parameter$actions$list$repo$access$to$self$hosted$runner$group$in$org;
}
export type RequestContentType$actions$set$repo$access$to$self$hosted$runner$group$in$org =
  keyof RequestBody$actions$set$repo$access$to$self$hosted$runner$group$in$org;
export interface Params$actions$set$repo$access$to$self$hosted$runner$group$in$org {
  parameter: Parameter$actions$set$repo$access$to$self$hosted$runner$group$in$org;
  requestBody: RequestBody$actions$set$repo$access$to$self$hosted$runner$group$in$org["application/json"];
}
export interface Params$actions$add$repo$access$to$self$hosted$runner$group$in$org {
  parameter: Parameter$actions$add$repo$access$to$self$hosted$runner$group$in$org;
}
export interface Params$actions$remove$repo$access$to$self$hosted$runner$group$in$org {
  parameter: Parameter$actions$remove$repo$access$to$self$hosted$runner$group$in$org;
}
export type ResponseContentType$actions$list$self$hosted$runners$in$group$for$org =
  keyof Response$actions$list$self$hosted$runners$in$group$for$org$Status$200;
export interface Params$actions$list$self$hosted$runners$in$group$for$org {
  parameter: Parameter$actions$list$self$hosted$runners$in$group$for$org;
}
export type RequestContentType$actions$set$self$hosted$runners$in$group$for$org =
  keyof RequestBody$actions$set$self$hosted$runners$in$group$for$org;
export interface Params$actions$set$self$hosted$runners$in$group$for$org {
  parameter: Parameter$actions$set$self$hosted$runners$in$group$for$org;
  requestBody: RequestBody$actions$set$self$hosted$runners$in$group$for$org["application/json"];
}
export interface Params$actions$add$self$hosted$runner$to$group$for$org {
  parameter: Parameter$actions$add$self$hosted$runner$to$group$for$org;
}
export interface Params$actions$remove$self$hosted$runner$from$group$for$org {
  parameter: Parameter$actions$remove$self$hosted$runner$from$group$for$org;
}
export type ResponseContentType$actions$list$self$hosted$runners$for$org = keyof Response$actions$list$self$hosted$runners$for$org$Status$200;
export interface Params$actions$list$self$hosted$runners$for$org {
  parameter: Parameter$actions$list$self$hosted$runners$for$org;
}
export type ResponseContentType$actions$list$runner$applications$for$org = keyof Response$actions$list$runner$applications$for$org$Status$200;
export interface Params$actions$list$runner$applications$for$org {
  parameter: Parameter$actions$list$runner$applications$for$org;
}
export type ResponseContentType$actions$create$registration$token$for$org = keyof Response$actions$create$registration$token$for$org$Status$201;
export interface Params$actions$create$registration$token$for$org {
  parameter: Parameter$actions$create$registration$token$for$org;
}
export type ResponseContentType$actions$create$remove$token$for$org = keyof Response$actions$create$remove$token$for$org$Status$201;
export interface Params$actions$create$remove$token$for$org {
  parameter: Parameter$actions$create$remove$token$for$org;
}
export type ResponseContentType$actions$get$self$hosted$runner$for$org = keyof Response$actions$get$self$hosted$runner$for$org$Status$200;
export interface Params$actions$get$self$hosted$runner$for$org {
  parameter: Parameter$actions$get$self$hosted$runner$for$org;
}
export interface Params$actions$delete$self$hosted$runner$from$org {
  parameter: Parameter$actions$delete$self$hosted$runner$from$org;
}
export type ResponseContentType$actions$list$labels$for$self$hosted$runner$for$org =
  keyof Response$actions$list$labels$for$self$hosted$runner$for$org$Status$200;
export interface Params$actions$list$labels$for$self$hosted$runner$for$org {
  parameter: Parameter$actions$list$labels$for$self$hosted$runner$for$org;
}
export type RequestContentType$actions$set$custom$labels$for$self$hosted$runner$for$org =
  keyof RequestBody$actions$set$custom$labels$for$self$hosted$runner$for$org;
export type ResponseContentType$actions$set$custom$labels$for$self$hosted$runner$for$org =
  keyof Response$actions$set$custom$labels$for$self$hosted$runner$for$org$Status$200;
export interface Params$actions$set$custom$labels$for$self$hosted$runner$for$org {
  parameter: Parameter$actions$set$custom$labels$for$self$hosted$runner$for$org;
  requestBody: RequestBody$actions$set$custom$labels$for$self$hosted$runner$for$org["application/json"];
}
export type RequestContentType$actions$add$custom$labels$to$self$hosted$runner$for$org =
  keyof RequestBody$actions$add$custom$labels$to$self$hosted$runner$for$org;
export type ResponseContentType$actions$add$custom$labels$to$self$hosted$runner$for$org =
  keyof Response$actions$add$custom$labels$to$self$hosted$runner$for$org$Status$200;
export interface Params$actions$add$custom$labels$to$self$hosted$runner$for$org {
  parameter: Parameter$actions$add$custom$labels$to$self$hosted$runner$for$org;
  requestBody: RequestBody$actions$add$custom$labels$to$self$hosted$runner$for$org["application/json"];
}
export type ResponseContentType$actions$remove$all$custom$labels$from$self$hosted$runner$for$org =
  keyof Response$actions$remove$all$custom$labels$from$self$hosted$runner$for$org$Status$200;
export interface Params$actions$remove$all$custom$labels$from$self$hosted$runner$for$org {
  parameter: Parameter$actions$remove$all$custom$labels$from$self$hosted$runner$for$org;
}
export type ResponseContentType$actions$remove$custom$label$from$self$hosted$runner$for$org =
  keyof Response$actions$remove$custom$label$from$self$hosted$runner$for$org$Status$200;
export interface Params$actions$remove$custom$label$from$self$hosted$runner$for$org {
  parameter: Parameter$actions$remove$custom$label$from$self$hosted$runner$for$org;
}
export type ResponseContentType$actions$list$org$secrets = keyof Response$actions$list$org$secrets$Status$200;
export interface Params$actions$list$org$secrets {
  parameter: Parameter$actions$list$org$secrets;
}
export type ResponseContentType$actions$get$org$public$key = keyof Response$actions$get$org$public$key$Status$200;
export interface Params$actions$get$org$public$key {
  parameter: Parameter$actions$get$org$public$key;
}
export type ResponseContentType$actions$get$org$secret = keyof Response$actions$get$org$secret$Status$200;
export interface Params$actions$get$org$secret {
  parameter: Parameter$actions$get$org$secret;
}
export type RequestContentType$actions$create$or$update$org$secret = keyof RequestBody$actions$create$or$update$org$secret;
export type ResponseContentType$actions$create$or$update$org$secret = keyof Response$actions$create$or$update$org$secret$Status$201;
export interface Params$actions$create$or$update$org$secret {
  parameter: Parameter$actions$create$or$update$org$secret;
  requestBody: RequestBody$actions$create$or$update$org$secret["application/json"];
}
export interface Params$actions$delete$org$secret {
  parameter: Parameter$actions$delete$org$secret;
}
export type ResponseContentType$actions$list$selected$repos$for$org$secret =
  keyof Response$actions$list$selected$repos$for$org$secret$Status$200;
export interface Params$actions$list$selected$repos$for$org$secret {
  parameter: Parameter$actions$list$selected$repos$for$org$secret;
}
export type RequestContentType$actions$set$selected$repos$for$org$secret = keyof RequestBody$actions$set$selected$repos$for$org$secret;
export interface Params$actions$set$selected$repos$for$org$secret {
  parameter: Parameter$actions$set$selected$repos$for$org$secret;
  requestBody: RequestBody$actions$set$selected$repos$for$org$secret["application/json"];
}
export interface Params$actions$add$selected$repo$to$org$secret {
  parameter: Parameter$actions$add$selected$repo$to$org$secret;
}
export interface Params$actions$remove$selected$repo$from$org$secret {
  parameter: Parameter$actions$remove$selected$repo$from$org$secret;
}
export type ResponseContentType$orgs$get$audit$log = keyof Response$orgs$get$audit$log$Status$200;
export interface Params$orgs$get$audit$log {
  parameter: Parameter$orgs$get$audit$log;
}
export type ResponseContentType$dependabot$list$org$secrets = keyof Response$dependabot$list$org$secrets$Status$200;
export interface Params$dependabot$list$org$secrets {
  parameter: Parameter$dependabot$list$org$secrets;
}
export type ResponseContentType$dependabot$get$org$public$key = keyof Response$dependabot$get$org$public$key$Status$200;
export interface Params$dependabot$get$org$public$key {
  parameter: Parameter$dependabot$get$org$public$key;
}
export type ResponseContentType$dependabot$get$org$secret = keyof Response$dependabot$get$org$secret$Status$200;
export interface Params$dependabot$get$org$secret {
  parameter: Parameter$dependabot$get$org$secret;
}
export type RequestContentType$dependabot$create$or$update$org$secret = keyof RequestBody$dependabot$create$or$update$org$secret;
export type ResponseContentType$dependabot$create$or$update$org$secret = keyof Response$dependabot$create$or$update$org$secret$Status$201;
export interface Params$dependabot$create$or$update$org$secret {
  parameter: Parameter$dependabot$create$or$update$org$secret;
  requestBody: RequestBody$dependabot$create$or$update$org$secret["application/json"];
}
export interface Params$dependabot$delete$org$secret {
  parameter: Parameter$dependabot$delete$org$secret;
}
export type ResponseContentType$dependabot$list$selected$repos$for$org$secret =
  keyof Response$dependabot$list$selected$repos$for$org$secret$Status$200;
export interface Params$dependabot$list$selected$repos$for$org$secret {
  parameter: Parameter$dependabot$list$selected$repos$for$org$secret;
}
export type RequestContentType$dependabot$set$selected$repos$for$org$secret = keyof RequestBody$dependabot$set$selected$repos$for$org$secret;
export interface Params$dependabot$set$selected$repos$for$org$secret {
  parameter: Parameter$dependabot$set$selected$repos$for$org$secret;
  requestBody: RequestBody$dependabot$set$selected$repos$for$org$secret["application/json"];
}
export interface Params$dependabot$add$selected$repo$to$org$secret {
  parameter: Parameter$dependabot$add$selected$repo$to$org$secret;
}
export interface Params$dependabot$remove$selected$repo$from$org$secret {
  parameter: Parameter$dependabot$remove$selected$repo$from$org$secret;
}
export type ResponseContentType$activity$list$public$org$events = keyof Response$activity$list$public$org$events$Status$200;
export interface Params$activity$list$public$org$events {
  parameter: Parameter$activity$list$public$org$events;
}
export type ResponseContentType$orgs$list$webhooks = keyof Response$orgs$list$webhooks$Status$200;
export interface Params$orgs$list$webhooks {
  parameter: Parameter$orgs$list$webhooks;
}
export type RequestContentType$orgs$create$webhook = keyof RequestBody$orgs$create$webhook;
export type ResponseContentType$orgs$create$webhook = keyof Response$orgs$create$webhook$Status$201;
export interface Params$orgs$create$webhook {
  parameter: Parameter$orgs$create$webhook;
  requestBody: RequestBody$orgs$create$webhook["application/json"];
}
export type ResponseContentType$orgs$get$webhook = keyof Response$orgs$get$webhook$Status$200;
export interface Params$orgs$get$webhook {
  parameter: Parameter$orgs$get$webhook;
}
export interface Params$orgs$delete$webhook {
  parameter: Parameter$orgs$delete$webhook;
}
export type RequestContentType$orgs$update$webhook = keyof RequestBody$orgs$update$webhook;
export type ResponseContentType$orgs$update$webhook = keyof Response$orgs$update$webhook$Status$200;
export interface Params$orgs$update$webhook {
  parameter: Parameter$orgs$update$webhook;
  requestBody: RequestBody$orgs$update$webhook["application/json"];
}
export type ResponseContentType$orgs$get$webhook$config$for$org = keyof Response$orgs$get$webhook$config$for$org$Status$200;
export interface Params$orgs$get$webhook$config$for$org {
  parameter: Parameter$orgs$get$webhook$config$for$org;
}
export type RequestContentType$orgs$update$webhook$config$for$org = keyof RequestBody$orgs$update$webhook$config$for$org;
export type ResponseContentType$orgs$update$webhook$config$for$org = keyof Response$orgs$update$webhook$config$for$org$Status$200;
export interface Params$orgs$update$webhook$config$for$org {
  parameter: Parameter$orgs$update$webhook$config$for$org;
  requestBody: RequestBody$orgs$update$webhook$config$for$org["application/json"];
}
export type ResponseContentType$orgs$list$webhook$deliveries = keyof Response$orgs$list$webhook$deliveries$Status$200;
export interface Params$orgs$list$webhook$deliveries {
  parameter: Parameter$orgs$list$webhook$deliveries;
}
export type ResponseContentType$orgs$get$webhook$delivery = keyof Response$orgs$get$webhook$delivery$Status$200;
export interface Params$orgs$get$webhook$delivery {
  parameter: Parameter$orgs$get$webhook$delivery;
}
export type ResponseContentType$orgs$redeliver$webhook$delivery = keyof Response$orgs$redeliver$webhook$delivery$Status$202;
export interface Params$orgs$redeliver$webhook$delivery {
  parameter: Parameter$orgs$redeliver$webhook$delivery;
}
export interface Params$orgs$ping$webhook {
  parameter: Parameter$orgs$ping$webhook;
}
export type ResponseContentType$apps$get$org$installation = keyof Response$apps$get$org$installation$Status$200;
export interface Params$apps$get$org$installation {
  parameter: Parameter$apps$get$org$installation;
}
export type ResponseContentType$orgs$list$app$installations = keyof Response$orgs$list$app$installations$Status$200;
export interface Params$orgs$list$app$installations {
  parameter: Parameter$orgs$list$app$installations;
}
export type ResponseContentType$issues$list$for$org = keyof Response$issues$list$for$org$Status$200;
export interface Params$issues$list$for$org {
  parameter: Parameter$issues$list$for$org;
}
export type ResponseContentType$orgs$list$members = keyof Response$orgs$list$members$Status$200;
export interface Params$orgs$list$members {
  parameter: Parameter$orgs$list$members;
}
export interface Params$orgs$check$membership$for$user {
  parameter: Parameter$orgs$check$membership$for$user;
}
export interface Params$orgs$remove$member {
  parameter: Parameter$orgs$remove$member;
}
export type ResponseContentType$orgs$get$membership$for$user = keyof Response$orgs$get$membership$for$user$Status$200;
export interface Params$orgs$get$membership$for$user {
  parameter: Parameter$orgs$get$membership$for$user;
}
export type RequestContentType$orgs$set$membership$for$user = keyof RequestBody$orgs$set$membership$for$user;
export type ResponseContentType$orgs$set$membership$for$user = keyof Response$orgs$set$membership$for$user$Status$200;
export interface Params$orgs$set$membership$for$user {
  parameter: Parameter$orgs$set$membership$for$user;
  requestBody: RequestBody$orgs$set$membership$for$user["application/json"];
}
export interface Params$orgs$remove$membership$for$user {
  parameter: Parameter$orgs$remove$membership$for$user;
}
export type ResponseContentType$migrations$list$for$org = keyof Response$migrations$list$for$org$Status$200;
export interface Params$migrations$list$for$org {
  parameter: Parameter$migrations$list$for$org;
}
export type RequestContentType$migrations$start$for$org = keyof RequestBody$migrations$start$for$org;
export type ResponseContentType$migrations$start$for$org = keyof Response$migrations$start$for$org$Status$201;
export interface Params$migrations$start$for$org {
  parameter: Parameter$migrations$start$for$org;
  requestBody: RequestBody$migrations$start$for$org["application/json"];
}
export type ResponseContentType$migrations$get$status$for$org = keyof Response$migrations$get$status$for$org$Status$200;
export interface Params$migrations$get$status$for$org {
  parameter: Parameter$migrations$get$status$for$org;
}
export type ResponseContentType$orgs$list$outside$collaborators = keyof Response$orgs$list$outside$collaborators$Status$200;
export interface Params$orgs$list$outside$collaborators {
  parameter: Parameter$orgs$list$outside$collaborators;
}
export type ResponseContentType$orgs$convert$member$to$outside$collaborator =
  keyof Response$orgs$convert$member$to$outside$collaborator$Status$202;
export interface Params$orgs$convert$member$to$outside$collaborator {
  parameter: Parameter$orgs$convert$member$to$outside$collaborator;
}
export interface Params$orgs$remove$outside$collaborator {
  parameter: Parameter$orgs$remove$outside$collaborator;
}
export type ResponseContentType$enterprise$admin$list$pre$receive$hooks$for$org =
  keyof Response$enterprise$admin$list$pre$receive$hooks$for$org$Status$200;
export interface Params$enterprise$admin$list$pre$receive$hooks$for$org {
  parameter: Parameter$enterprise$admin$list$pre$receive$hooks$for$org;
}
export type ResponseContentType$enterprise$admin$get$pre$receive$hook$for$org =
  keyof Response$enterprise$admin$get$pre$receive$hook$for$org$Status$200;
export interface Params$enterprise$admin$get$pre$receive$hook$for$org {
  parameter: Parameter$enterprise$admin$get$pre$receive$hook$for$org;
}
export type ResponseContentType$enterprise$admin$remove$pre$receive$hook$enforcement$for$org =
  keyof Response$enterprise$admin$remove$pre$receive$hook$enforcement$for$org$Status$200;
export interface Params$enterprise$admin$remove$pre$receive$hook$enforcement$for$org {
  parameter: Parameter$enterprise$admin$remove$pre$receive$hook$enforcement$for$org;
}
export type RequestContentType$enterprise$admin$update$pre$receive$hook$enforcement$for$org =
  keyof RequestBody$enterprise$admin$update$pre$receive$hook$enforcement$for$org;
export type ResponseContentType$enterprise$admin$update$pre$receive$hook$enforcement$for$org =
  keyof Response$enterprise$admin$update$pre$receive$hook$enforcement$for$org$Status$200;
export interface Params$enterprise$admin$update$pre$receive$hook$enforcement$for$org {
  parameter: Parameter$enterprise$admin$update$pre$receive$hook$enforcement$for$org;
  requestBody: RequestBody$enterprise$admin$update$pre$receive$hook$enforcement$for$org["application/json"];
}
export type ResponseContentType$projects$list$for$org = keyof Response$projects$list$for$org$Status$200;
export interface Params$projects$list$for$org {
  parameter: Parameter$projects$list$for$org;
}
export type RequestContentType$projects$create$for$org = keyof RequestBody$projects$create$for$org;
export type ResponseContentType$projects$create$for$org = keyof Response$projects$create$for$org$Status$201;
export interface Params$projects$create$for$org {
  parameter: Parameter$projects$create$for$org;
  requestBody: RequestBody$projects$create$for$org["application/json"];
}
export type ResponseContentType$orgs$list$public$members = keyof Response$orgs$list$public$members$Status$200;
export interface Params$orgs$list$public$members {
  parameter: Parameter$orgs$list$public$members;
}
export interface Params$orgs$check$public$membership$for$user {
  parameter: Parameter$orgs$check$public$membership$for$user;
}
export interface Params$orgs$set$public$membership$for$authenticated$user {
  parameter: Parameter$orgs$set$public$membership$for$authenticated$user;
}
export interface Params$orgs$remove$public$membership$for$authenticated$user {
  parameter: Parameter$orgs$remove$public$membership$for$authenticated$user;
}
export type ResponseContentType$repos$list$for$org = keyof Response$repos$list$for$org$Status$200;
export interface Params$repos$list$for$org {
  parameter: Parameter$repos$list$for$org;
}
export type RequestContentType$repos$create$in$org = keyof RequestBody$repos$create$in$org;
export type ResponseContentType$repos$create$in$org = keyof Response$repos$create$in$org$Status$201;
export interface Params$repos$create$in$org {
  parameter: Parameter$repos$create$in$org;
  requestBody: RequestBody$repos$create$in$org["application/json"];
}
export type ResponseContentType$secret$scanning$list$alerts$for$org = keyof Response$secret$scanning$list$alerts$for$org$Status$200;
export interface Params$secret$scanning$list$alerts$for$org {
  parameter: Parameter$secret$scanning$list$alerts$for$org;
}
export type ResponseContentType$billing$get$github$advanced$security$billing$org =
  keyof Response$billing$get$github$advanced$security$billing$org$Status$200;
export interface Params$billing$get$github$advanced$security$billing$org {
  parameter: Parameter$billing$get$github$advanced$security$billing$org;
}
export type ResponseContentType$teams$list = keyof Response$teams$list$Status$200;
export interface Params$teams$list {
  parameter: Parameter$teams$list;
}
export type RequestContentType$teams$create = keyof RequestBody$teams$create;
export type ResponseContentType$teams$create = keyof Response$teams$create$Status$201;
export interface Params$teams$create {
  parameter: Parameter$teams$create;
  requestBody: RequestBody$teams$create["application/json"];
}
export type ResponseContentType$teams$get$by$name = keyof Response$teams$get$by$name$Status$200;
export interface Params$teams$get$by$name {
  parameter: Parameter$teams$get$by$name;
}
export interface Params$teams$delete$in$org {
  parameter: Parameter$teams$delete$in$org;
}
export type RequestContentType$teams$update$in$org = keyof RequestBody$teams$update$in$org;
export type ResponseContentType$teams$update$in$org = keyof Response$teams$update$in$org$Status$201;
export interface Params$teams$update$in$org {
  parameter: Parameter$teams$update$in$org;
  requestBody: RequestBody$teams$update$in$org["application/json"];
}
export type ResponseContentType$teams$list$discussions$in$org = keyof Response$teams$list$discussions$in$org$Status$200;
export interface Params$teams$list$discussions$in$org {
  parameter: Parameter$teams$list$discussions$in$org;
}
export type RequestContentType$teams$create$discussion$in$org = keyof RequestBody$teams$create$discussion$in$org;
export type ResponseContentType$teams$create$discussion$in$org = keyof Response$teams$create$discussion$in$org$Status$201;
export interface Params$teams$create$discussion$in$org {
  parameter: Parameter$teams$create$discussion$in$org;
  requestBody: RequestBody$teams$create$discussion$in$org["application/json"];
}
export type ResponseContentType$teams$get$discussion$in$org = keyof Response$teams$get$discussion$in$org$Status$200;
export interface Params$teams$get$discussion$in$org {
  parameter: Parameter$teams$get$discussion$in$org;
}
export interface Params$teams$delete$discussion$in$org {
  parameter: Parameter$teams$delete$discussion$in$org;
}
export type RequestContentType$teams$update$discussion$in$org = keyof RequestBody$teams$update$discussion$in$org;
export type ResponseContentType$teams$update$discussion$in$org = keyof Response$teams$update$discussion$in$org$Status$200;
export interface Params$teams$update$discussion$in$org {
  parameter: Parameter$teams$update$discussion$in$org;
  requestBody: RequestBody$teams$update$discussion$in$org["application/json"];
}
export type ResponseContentType$teams$list$discussion$comments$in$org = keyof Response$teams$list$discussion$comments$in$org$Status$200;
export interface Params$teams$list$discussion$comments$in$org {
  parameter: Parameter$teams$list$discussion$comments$in$org;
}
export type RequestContentType$teams$create$discussion$comment$in$org = keyof RequestBody$teams$create$discussion$comment$in$org;
export type ResponseContentType$teams$create$discussion$comment$in$org = keyof Response$teams$create$discussion$comment$in$org$Status$201;
export interface Params$teams$create$discussion$comment$in$org {
  parameter: Parameter$teams$create$discussion$comment$in$org;
  requestBody: RequestBody$teams$create$discussion$comment$in$org["application/json"];
}
export type ResponseContentType$teams$get$discussion$comment$in$org = keyof Response$teams$get$discussion$comment$in$org$Status$200;
export interface Params$teams$get$discussion$comment$in$org {
  parameter: Parameter$teams$get$discussion$comment$in$org;
}
export interface Params$teams$delete$discussion$comment$in$org {
  parameter: Parameter$teams$delete$discussion$comment$in$org;
}
export type RequestContentType$teams$update$discussion$comment$in$org = keyof RequestBody$teams$update$discussion$comment$in$org;
export type ResponseContentType$teams$update$discussion$comment$in$org = keyof Response$teams$update$discussion$comment$in$org$Status$200;
export interface Params$teams$update$discussion$comment$in$org {
  parameter: Parameter$teams$update$discussion$comment$in$org;
  requestBody: RequestBody$teams$update$discussion$comment$in$org["application/json"];
}
export type ResponseContentType$reactions$list$for$team$discussion$comment$in$org =
  keyof Response$reactions$list$for$team$discussion$comment$in$org$Status$200;
export interface Params$reactions$list$for$team$discussion$comment$in$org {
  parameter: Parameter$reactions$list$for$team$discussion$comment$in$org;
}
export type RequestContentType$reactions$create$for$team$discussion$comment$in$org =
  keyof RequestBody$reactions$create$for$team$discussion$comment$in$org;
export type ResponseContentType$reactions$create$for$team$discussion$comment$in$org =
  keyof Response$reactions$create$for$team$discussion$comment$in$org$Status$200;
export interface Params$reactions$create$for$team$discussion$comment$in$org {
  parameter: Parameter$reactions$create$for$team$discussion$comment$in$org;
  requestBody: RequestBody$reactions$create$for$team$discussion$comment$in$org["application/json"];
}
export interface Params$reactions$delete$for$team$discussion$comment {
  parameter: Parameter$reactions$delete$for$team$discussion$comment;
}
export type ResponseContentType$reactions$list$for$team$discussion$in$org = keyof Response$reactions$list$for$team$discussion$in$org$Status$200;
export interface Params$reactions$list$for$team$discussion$in$org {
  parameter: Parameter$reactions$list$for$team$discussion$in$org;
}
export type RequestContentType$reactions$create$for$team$discussion$in$org = keyof RequestBody$reactions$create$for$team$discussion$in$org;
export type ResponseContentType$reactions$create$for$team$discussion$in$org =
  keyof Response$reactions$create$for$team$discussion$in$org$Status$200;
export interface Params$reactions$create$for$team$discussion$in$org {
  parameter: Parameter$reactions$create$for$team$discussion$in$org;
  requestBody: RequestBody$reactions$create$for$team$discussion$in$org["application/json"];
}
export interface Params$reactions$delete$for$team$discussion {
  parameter: Parameter$reactions$delete$for$team$discussion;
}
export type ResponseContentType$teams$list$members$in$org = keyof Response$teams$list$members$in$org$Status$200;
export interface Params$teams$list$members$in$org {
  parameter: Parameter$teams$list$members$in$org;
}
export type ResponseContentType$teams$get$membership$for$user$in$org = keyof Response$teams$get$membership$for$user$in$org$Status$200;
export interface Params$teams$get$membership$for$user$in$org {
  parameter: Parameter$teams$get$membership$for$user$in$org;
}
export type RequestContentType$teams$add$or$update$membership$for$user$in$org =
  keyof RequestBody$teams$add$or$update$membership$for$user$in$org;
export type ResponseContentType$teams$add$or$update$membership$for$user$in$org =
  keyof Response$teams$add$or$update$membership$for$user$in$org$Status$200;
export interface Params$teams$add$or$update$membership$for$user$in$org {
  parameter: Parameter$teams$add$or$update$membership$for$user$in$org;
  requestBody: RequestBody$teams$add$or$update$membership$for$user$in$org["application/json"];
}
export interface Params$teams$remove$membership$for$user$in$org {
  parameter: Parameter$teams$remove$membership$for$user$in$org;
}
export type ResponseContentType$teams$list$projects$in$org = keyof Response$teams$list$projects$in$org$Status$200;
export interface Params$teams$list$projects$in$org {
  parameter: Parameter$teams$list$projects$in$org;
}
export type ResponseContentType$teams$check$permissions$for$project$in$org =
  keyof Response$teams$check$permissions$for$project$in$org$Status$200;
export interface Params$teams$check$permissions$for$project$in$org {
  parameter: Parameter$teams$check$permissions$for$project$in$org;
}
export type RequestContentType$teams$add$or$update$project$permissions$in$org =
  keyof RequestBody$teams$add$or$update$project$permissions$in$org;
export interface Params$teams$add$or$update$project$permissions$in$org {
  parameter: Parameter$teams$add$or$update$project$permissions$in$org;
  requestBody: RequestBody$teams$add$or$update$project$permissions$in$org["application/json"];
}
export interface Params$teams$remove$project$in$org {
  parameter: Parameter$teams$remove$project$in$org;
}
export type ResponseContentType$teams$list$repos$in$org = keyof Response$teams$list$repos$in$org$Status$200;
export interface Params$teams$list$repos$in$org {
  parameter: Parameter$teams$list$repos$in$org;
}
export type ResponseContentType$teams$check$permissions$for$repo$in$org = keyof Response$teams$check$permissions$for$repo$in$org$Status$200;
export interface Params$teams$check$permissions$for$repo$in$org {
  parameter: Parameter$teams$check$permissions$for$repo$in$org;
}
export type RequestContentType$teams$add$or$update$repo$permissions$in$org = keyof RequestBody$teams$add$or$update$repo$permissions$in$org;
export interface Params$teams$add$or$update$repo$permissions$in$org {
  parameter: Parameter$teams$add$or$update$repo$permissions$in$org;
  requestBody: RequestBody$teams$add$or$update$repo$permissions$in$org["application/json"];
}
export interface Params$teams$remove$repo$in$org {
  parameter: Parameter$teams$remove$repo$in$org;
}
export type ResponseContentType$teams$list$child$in$org = keyof Response$teams$list$child$in$org$Status$200;
export interface Params$teams$list$child$in$org {
  parameter: Parameter$teams$list$child$in$org;
}
export type ResponseContentType$projects$get$card = keyof Response$projects$get$card$Status$200;
export interface Params$projects$get$card {
  parameter: Parameter$projects$get$card;
}
export interface Params$projects$delete$card {
  parameter: Parameter$projects$delete$card;
}
export type RequestContentType$projects$update$card = keyof RequestBody$projects$update$card;
export type ResponseContentType$projects$update$card = keyof Response$projects$update$card$Status$200;
export interface Params$projects$update$card {
  parameter: Parameter$projects$update$card;
  requestBody: RequestBody$projects$update$card["application/json"];
}
export type RequestContentType$projects$move$card = keyof RequestBody$projects$move$card;
export type ResponseContentType$projects$move$card = keyof Response$projects$move$card$Status$201;
export interface Params$projects$move$card {
  parameter: Parameter$projects$move$card;
  requestBody: RequestBody$projects$move$card["application/json"];
}
export type ResponseContentType$projects$get$column = keyof Response$projects$get$column$Status$200;
export interface Params$projects$get$column {
  parameter: Parameter$projects$get$column;
}
export interface Params$projects$delete$column {
  parameter: Parameter$projects$delete$column;
}
export type RequestContentType$projects$update$column = keyof RequestBody$projects$update$column;
export type ResponseContentType$projects$update$column = keyof Response$projects$update$column$Status$200;
export interface Params$projects$update$column {
  parameter: Parameter$projects$update$column;
  requestBody: RequestBody$projects$update$column["application/json"];
}
export type ResponseContentType$projects$list$cards = keyof Response$projects$list$cards$Status$200;
export interface Params$projects$list$cards {
  parameter: Parameter$projects$list$cards;
}
export type RequestContentType$projects$create$card = keyof RequestBody$projects$create$card;
export type ResponseContentType$projects$create$card = keyof Response$projects$create$card$Status$201;
export interface Params$projects$create$card {
  parameter: Parameter$projects$create$card;
  requestBody: RequestBody$projects$create$card["application/json"];
}
export type RequestContentType$projects$move$column = keyof RequestBody$projects$move$column;
export type ResponseContentType$projects$move$column = keyof Response$projects$move$column$Status$201;
export interface Params$projects$move$column {
  parameter: Parameter$projects$move$column;
  requestBody: RequestBody$projects$move$column["application/json"];
}
export type ResponseContentType$projects$get = keyof Response$projects$get$Status$200;
export interface Params$projects$get {
  parameter: Parameter$projects$get;
}
export interface Params$projects$delete {
  parameter: Parameter$projects$delete;
}
export type RequestContentType$projects$update = keyof RequestBody$projects$update;
export type ResponseContentType$projects$update = keyof Response$projects$update$Status$200;
export interface Params$projects$update {
  parameter: Parameter$projects$update;
  requestBody: RequestBody$projects$update["application/json"];
}
export type ResponseContentType$projects$list$collaborators = keyof Response$projects$list$collaborators$Status$200;
export interface Params$projects$list$collaborators {
  parameter: Parameter$projects$list$collaborators;
}
export type RequestContentType$projects$add$collaborator = keyof RequestBody$projects$add$collaborator;
export interface Params$projects$add$collaborator {
  parameter: Parameter$projects$add$collaborator;
  requestBody: RequestBody$projects$add$collaborator["application/json"];
}
export interface Params$projects$remove$collaborator {
  parameter: Parameter$projects$remove$collaborator;
}
export type ResponseContentType$projects$get$permission$for$user = keyof Response$projects$get$permission$for$user$Status$200;
export interface Params$projects$get$permission$for$user {
  parameter: Parameter$projects$get$permission$for$user;
}
export type ResponseContentType$projects$list$columns = keyof Response$projects$list$columns$Status$200;
export interface Params$projects$list$columns {
  parameter: Parameter$projects$list$columns;
}
export type RequestContentType$projects$create$column = keyof RequestBody$projects$create$column;
export type ResponseContentType$projects$create$column = keyof Response$projects$create$column$Status$201;
export interface Params$projects$create$column {
  parameter: Parameter$projects$create$column;
  requestBody: RequestBody$projects$create$column["application/json"];
}
export type ResponseContentType$rate$limit$get = keyof Response$rate$limit$get$Status$200;
export interface Params$reactions$delete$legacy {
  parameter: Parameter$reactions$delete$legacy;
}
export type ResponseContentType$repos$get = keyof Response$repos$get$Status$200;
export interface Params$repos$get {
  parameter: Parameter$repos$get;
}
export interface Params$repos$delete {
  parameter: Parameter$repos$delete;
}
export type RequestContentType$repos$update = keyof RequestBody$repos$update;
export type ResponseContentType$repos$update = keyof Response$repos$update$Status$200;
export interface Params$repos$update {
  parameter: Parameter$repos$update;
  requestBody: RequestBody$repos$update["application/json"];
}
export type ResponseContentType$actions$list$artifacts$for$repo = keyof Response$actions$list$artifacts$for$repo$Status$200;
export interface Params$actions$list$artifacts$for$repo {
  parameter: Parameter$actions$list$artifacts$for$repo;
}
export type ResponseContentType$actions$get$artifact = keyof Response$actions$get$artifact$Status$200;
export interface Params$actions$get$artifact {
  parameter: Parameter$actions$get$artifact;
}
export interface Params$actions$delete$artifact {
  parameter: Parameter$actions$delete$artifact;
}
export interface Params$actions$download$artifact {
  parameter: Parameter$actions$download$artifact;
}
export type ResponseContentType$actions$get$job$for$workflow$run = keyof Response$actions$get$job$for$workflow$run$Status$200;
export interface Params$actions$get$job$for$workflow$run {
  parameter: Parameter$actions$get$job$for$workflow$run;
}
export interface Params$actions$download$job$logs$for$workflow$run {
  parameter: Parameter$actions$download$job$logs$for$workflow$run;
}
export type ResponseContentType$actions$get$github$actions$permissions$repository =
  keyof Response$actions$get$github$actions$permissions$repository$Status$200;
export interface Params$actions$get$github$actions$permissions$repository {
  parameter: Parameter$actions$get$github$actions$permissions$repository;
}
export type RequestContentType$actions$set$github$actions$permissions$repository =
  keyof RequestBody$actions$set$github$actions$permissions$repository;
export interface Params$actions$set$github$actions$permissions$repository {
  parameter: Parameter$actions$set$github$actions$permissions$repository;
  requestBody: RequestBody$actions$set$github$actions$permissions$repository["application/json"];
}
export type ResponseContentType$actions$get$allowed$actions$repository = keyof Response$actions$get$allowed$actions$repository$Status$200;
export interface Params$actions$get$allowed$actions$repository {
  parameter: Parameter$actions$get$allowed$actions$repository;
}
export type RequestContentType$actions$set$allowed$actions$repository = keyof RequestBody$actions$set$allowed$actions$repository;
export interface Params$actions$set$allowed$actions$repository {
  parameter: Parameter$actions$set$allowed$actions$repository;
  requestBody: RequestBody$actions$set$allowed$actions$repository["application/json"];
}
export type ResponseContentType$actions$list$self$hosted$runners$for$repo = keyof Response$actions$list$self$hosted$runners$for$repo$Status$200;
export interface Params$actions$list$self$hosted$runners$for$repo {
  parameter: Parameter$actions$list$self$hosted$runners$for$repo;
}
export type ResponseContentType$actions$list$runner$applications$for$repo = keyof Response$actions$list$runner$applications$for$repo$Status$200;
export interface Params$actions$list$runner$applications$for$repo {
  parameter: Parameter$actions$list$runner$applications$for$repo;
}
export type ResponseContentType$actions$create$registration$token$for$repo =
  keyof Response$actions$create$registration$token$for$repo$Status$201;
export interface Params$actions$create$registration$token$for$repo {
  parameter: Parameter$actions$create$registration$token$for$repo;
}
export type ResponseContentType$actions$create$remove$token$for$repo = keyof Response$actions$create$remove$token$for$repo$Status$201;
export interface Params$actions$create$remove$token$for$repo {
  parameter: Parameter$actions$create$remove$token$for$repo;
}
export type ResponseContentType$actions$get$self$hosted$runner$for$repo = keyof Response$actions$get$self$hosted$runner$for$repo$Status$200;
export interface Params$actions$get$self$hosted$runner$for$repo {
  parameter: Parameter$actions$get$self$hosted$runner$for$repo;
}
export interface Params$actions$delete$self$hosted$runner$from$repo {
  parameter: Parameter$actions$delete$self$hosted$runner$from$repo;
}
export type ResponseContentType$actions$list$labels$for$self$hosted$runner$for$repo =
  keyof Response$actions$list$labels$for$self$hosted$runner$for$repo$Status$200;
export interface Params$actions$list$labels$for$self$hosted$runner$for$repo {
  parameter: Parameter$actions$list$labels$for$self$hosted$runner$for$repo;
}
export type RequestContentType$actions$set$custom$labels$for$self$hosted$runner$for$repo =
  keyof RequestBody$actions$set$custom$labels$for$self$hosted$runner$for$repo;
export type ResponseContentType$actions$set$custom$labels$for$self$hosted$runner$for$repo =
  keyof Response$actions$set$custom$labels$for$self$hosted$runner$for$repo$Status$200;
export interface Params$actions$set$custom$labels$for$self$hosted$runner$for$repo {
  parameter: Parameter$actions$set$custom$labels$for$self$hosted$runner$for$repo;
  requestBody: RequestBody$actions$set$custom$labels$for$self$hosted$runner$for$repo["application/json"];
}
export type RequestContentType$actions$add$custom$labels$to$self$hosted$runner$for$repo =
  keyof RequestBody$actions$add$custom$labels$to$self$hosted$runner$for$repo;
export type ResponseContentType$actions$add$custom$labels$to$self$hosted$runner$for$repo =
  keyof Response$actions$add$custom$labels$to$self$hosted$runner$for$repo$Status$200;
export interface Params$actions$add$custom$labels$to$self$hosted$runner$for$repo {
  parameter: Parameter$actions$add$custom$labels$to$self$hosted$runner$for$repo;
  requestBody: RequestBody$actions$add$custom$labels$to$self$hosted$runner$for$repo["application/json"];
}
export type ResponseContentType$actions$remove$all$custom$labels$from$self$hosted$runner$for$repo =
  keyof Response$actions$remove$all$custom$labels$from$self$hosted$runner$for$repo$Status$200;
export interface Params$actions$remove$all$custom$labels$from$self$hosted$runner$for$repo {
  parameter: Parameter$actions$remove$all$custom$labels$from$self$hosted$runner$for$repo;
}
export type ResponseContentType$actions$remove$custom$label$from$self$hosted$runner$for$repo =
  keyof Response$actions$remove$custom$label$from$self$hosted$runner$for$repo$Status$200;
export interface Params$actions$remove$custom$label$from$self$hosted$runner$for$repo {
  parameter: Parameter$actions$remove$custom$label$from$self$hosted$runner$for$repo;
}
export type ResponseContentType$actions$list$workflow$runs$for$repo = keyof Response$actions$list$workflow$runs$for$repo$Status$200;
export interface Params$actions$list$workflow$runs$for$repo {
  parameter: Parameter$actions$list$workflow$runs$for$repo;
}
export type ResponseContentType$actions$get$workflow$run = keyof Response$actions$get$workflow$run$Status$200;
export interface Params$actions$get$workflow$run {
  parameter: Parameter$actions$get$workflow$run;
}
export interface Params$actions$delete$workflow$run {
  parameter: Parameter$actions$delete$workflow$run;
}
export type ResponseContentType$actions$get$reviews$for$run = keyof Response$actions$get$reviews$for$run$Status$200;
export interface Params$actions$get$reviews$for$run {
  parameter: Parameter$actions$get$reviews$for$run;
}
export type ResponseContentType$actions$list$workflow$run$artifacts = keyof Response$actions$list$workflow$run$artifacts$Status$200;
export interface Params$actions$list$workflow$run$artifacts {
  parameter: Parameter$actions$list$workflow$run$artifacts;
}
export type ResponseContentType$actions$cancel$workflow$run = keyof Response$actions$cancel$workflow$run$Status$202;
export interface Params$actions$cancel$workflow$run {
  parameter: Parameter$actions$cancel$workflow$run;
}
export type ResponseContentType$actions$list$jobs$for$workflow$run = keyof Response$actions$list$jobs$for$workflow$run$Status$200;
export interface Params$actions$list$jobs$for$workflow$run {
  parameter: Parameter$actions$list$jobs$for$workflow$run;
}
export interface Params$actions$download$workflow$run$logs {
  parameter: Parameter$actions$download$workflow$run$logs;
}
export interface Params$actions$delete$workflow$run$logs {
  parameter: Parameter$actions$delete$workflow$run$logs;
}
export type ResponseContentType$actions$get$pending$deployments$for$run = keyof Response$actions$get$pending$deployments$for$run$Status$200;
export interface Params$actions$get$pending$deployments$for$run {
  parameter: Parameter$actions$get$pending$deployments$for$run;
}
export type RequestContentType$actions$review$pending$deployments$for$run = keyof RequestBody$actions$review$pending$deployments$for$run;
export type ResponseContentType$actions$review$pending$deployments$for$run =
  keyof Response$actions$review$pending$deployments$for$run$Status$200;
export interface Params$actions$review$pending$deployments$for$run {
  parameter: Parameter$actions$review$pending$deployments$for$run;
  requestBody: RequestBody$actions$review$pending$deployments$for$run["application/json"];
}
export type ResponseContentType$actions$re$run$workflow = keyof Response$actions$re$run$workflow$Status$201;
export interface Params$actions$re$run$workflow {
  parameter: Parameter$actions$re$run$workflow;
}
export type ResponseContentType$actions$list$repo$secrets = keyof Response$actions$list$repo$secrets$Status$200;
export interface Params$actions$list$repo$secrets {
  parameter: Parameter$actions$list$repo$secrets;
}
export type ResponseContentType$actions$get$repo$public$key = keyof Response$actions$get$repo$public$key$Status$200;
export interface Params$actions$get$repo$public$key {
  parameter: Parameter$actions$get$repo$public$key;
}
export type ResponseContentType$actions$get$repo$secret = keyof Response$actions$get$repo$secret$Status$200;
export interface Params$actions$get$repo$secret {
  parameter: Parameter$actions$get$repo$secret;
}
export type RequestContentType$actions$create$or$update$repo$secret = keyof RequestBody$actions$create$or$update$repo$secret;
export type ResponseContentType$actions$create$or$update$repo$secret = keyof Response$actions$create$or$update$repo$secret$Status$201;
export interface Params$actions$create$or$update$repo$secret {
  parameter: Parameter$actions$create$or$update$repo$secret;
  requestBody: RequestBody$actions$create$or$update$repo$secret["application/json"];
}
export interface Params$actions$delete$repo$secret {
  parameter: Parameter$actions$delete$repo$secret;
}
export type ResponseContentType$actions$list$repo$workflows = keyof Response$actions$list$repo$workflows$Status$200;
export interface Params$actions$list$repo$workflows {
  parameter: Parameter$actions$list$repo$workflows;
}
export type ResponseContentType$actions$get$workflow = keyof Response$actions$get$workflow$Status$200;
export interface Params$actions$get$workflow {
  parameter: Parameter$actions$get$workflow;
}
export interface Params$actions$disable$workflow {
  parameter: Parameter$actions$disable$workflow;
}
export type RequestContentType$actions$create$workflow$dispatch = keyof RequestBody$actions$create$workflow$dispatch;
export interface Params$actions$create$workflow$dispatch {
  parameter: Parameter$actions$create$workflow$dispatch;
  requestBody: RequestBody$actions$create$workflow$dispatch["application/json"];
}
export interface Params$actions$enable$workflow {
  parameter: Parameter$actions$enable$workflow;
}
export type ResponseContentType$actions$list$workflow$runs = keyof Response$actions$list$workflow$runs$Status$200;
export interface Params$actions$list$workflow$runs {
  parameter: Parameter$actions$list$workflow$runs;
}
export type ResponseContentType$issues$list$assignees = keyof Response$issues$list$assignees$Status$200;
export interface Params$issues$list$assignees {
  parameter: Parameter$issues$list$assignees;
}
export interface Params$issues$check$user$can$be$assigned {
  parameter: Parameter$issues$check$user$can$be$assigned;
}
export type ResponseContentType$repos$list$autolinks = keyof Response$repos$list$autolinks$Status$200;
export interface Params$repos$list$autolinks {
  parameter: Parameter$repos$list$autolinks;
}
export type RequestContentType$repos$create$autolink = keyof RequestBody$repos$create$autolink;
export type ResponseContentType$repos$create$autolink = keyof Response$repos$create$autolink$Status$201;
export interface Params$repos$create$autolink {
  parameter: Parameter$repos$create$autolink;
  requestBody: RequestBody$repos$create$autolink["application/json"];
}
export type ResponseContentType$repos$get$autolink = keyof Response$repos$get$autolink$Status$200;
export interface Params$repos$get$autolink {
  parameter: Parameter$repos$get$autolink;
}
export interface Params$repos$delete$autolink {
  parameter: Parameter$repos$delete$autolink;
}
export type ResponseContentType$repos$list$branches = keyof Response$repos$list$branches$Status$200;
export interface Params$repos$list$branches {
  parameter: Parameter$repos$list$branches;
}
export type ResponseContentType$repos$get$branch = keyof Response$repos$get$branch$Status$200;
export interface Params$repos$get$branch {
  parameter: Parameter$repos$get$branch;
}
export type ResponseContentType$repos$get$branch$protection = keyof Response$repos$get$branch$protection$Status$200;
export interface Params$repos$get$branch$protection {
  parameter: Parameter$repos$get$branch$protection;
}
export type RequestContentType$repos$update$branch$protection = keyof RequestBody$repos$update$branch$protection;
export type ResponseContentType$repos$update$branch$protection = keyof Response$repos$update$branch$protection$Status$200;
export interface Params$repos$update$branch$protection {
  parameter: Parameter$repos$update$branch$protection;
  requestBody: RequestBody$repos$update$branch$protection["application/json"];
}
export interface Params$repos$delete$branch$protection {
  parameter: Parameter$repos$delete$branch$protection;
}
export type ResponseContentType$repos$get$admin$branch$protection = keyof Response$repos$get$admin$branch$protection$Status$200;
export interface Params$repos$get$admin$branch$protection {
  parameter: Parameter$repos$get$admin$branch$protection;
}
export type ResponseContentType$repos$set$admin$branch$protection = keyof Response$repos$set$admin$branch$protection$Status$200;
export interface Params$repos$set$admin$branch$protection {
  parameter: Parameter$repos$set$admin$branch$protection;
}
export interface Params$repos$delete$admin$branch$protection {
  parameter: Parameter$repos$delete$admin$branch$protection;
}
export type ResponseContentType$repos$get$pull$request$review$protection = keyof Response$repos$get$pull$request$review$protection$Status$200;
export interface Params$repos$get$pull$request$review$protection {
  parameter: Parameter$repos$get$pull$request$review$protection;
}
export interface Params$repos$delete$pull$request$review$protection {
  parameter: Parameter$repos$delete$pull$request$review$protection;
}
export type RequestContentType$repos$update$pull$request$review$protection = keyof RequestBody$repos$update$pull$request$review$protection;
export type ResponseContentType$repos$update$pull$request$review$protection =
  keyof Response$repos$update$pull$request$review$protection$Status$200;
export interface Params$repos$update$pull$request$review$protection {
  parameter: Parameter$repos$update$pull$request$review$protection;
  requestBody: RequestBody$repos$update$pull$request$review$protection["application/json"];
}
export type ResponseContentType$repos$get$commit$signature$protection = keyof Response$repos$get$commit$signature$protection$Status$200;
export interface Params$repos$get$commit$signature$protection {
  parameter: Parameter$repos$get$commit$signature$protection;
}
export type ResponseContentType$repos$create$commit$signature$protection = keyof Response$repos$create$commit$signature$protection$Status$200;
export interface Params$repos$create$commit$signature$protection {
  parameter: Parameter$repos$create$commit$signature$protection;
}
export interface Params$repos$delete$commit$signature$protection {
  parameter: Parameter$repos$delete$commit$signature$protection;
}
export type ResponseContentType$repos$get$status$checks$protection = keyof Response$repos$get$status$checks$protection$Status$200;
export interface Params$repos$get$status$checks$protection {
  parameter: Parameter$repos$get$status$checks$protection;
}
export interface Params$repos$remove$status$check$protection {
  parameter: Parameter$repos$remove$status$check$protection;
}
export type RequestContentType$repos$update$status$check$protection = keyof RequestBody$repos$update$status$check$protection;
export type ResponseContentType$repos$update$status$check$protection = keyof Response$repos$update$status$check$protection$Status$200;
export interface Params$repos$update$status$check$protection {
  parameter: Parameter$repos$update$status$check$protection;
  requestBody: RequestBody$repos$update$status$check$protection["application/json"];
}
export type ResponseContentType$repos$get$all$status$check$contexts = keyof Response$repos$get$all$status$check$contexts$Status$200;
export interface Params$repos$get$all$status$check$contexts {
  parameter: Parameter$repos$get$all$status$check$contexts;
}
export type RequestContentType$repos$set$status$check$contexts = keyof RequestBody$repos$set$status$check$contexts;
export type ResponseContentType$repos$set$status$check$contexts = keyof Response$repos$set$status$check$contexts$Status$200;
export interface Params$repos$set$status$check$contexts {
  parameter: Parameter$repos$set$status$check$contexts;
  requestBody: RequestBody$repos$set$status$check$contexts["application/json"];
}
export type RequestContentType$repos$add$status$check$contexts = keyof RequestBody$repos$add$status$check$contexts;
export type ResponseContentType$repos$add$status$check$contexts = keyof Response$repos$add$status$check$contexts$Status$200;
export interface Params$repos$add$status$check$contexts {
  parameter: Parameter$repos$add$status$check$contexts;
  requestBody: RequestBody$repos$add$status$check$contexts["application/json"];
}
export type RequestContentType$repos$remove$status$check$contexts = keyof RequestBody$repos$remove$status$check$contexts;
export type ResponseContentType$repos$remove$status$check$contexts = keyof Response$repos$remove$status$check$contexts$Status$200;
export interface Params$repos$remove$status$check$contexts {
  parameter: Parameter$repos$remove$status$check$contexts;
  requestBody: RequestBody$repos$remove$status$check$contexts["application/json"];
}
export type ResponseContentType$repos$get$access$restrictions = keyof Response$repos$get$access$restrictions$Status$200;
export interface Params$repos$get$access$restrictions {
  parameter: Parameter$repos$get$access$restrictions;
}
export interface Params$repos$delete$access$restrictions {
  parameter: Parameter$repos$delete$access$restrictions;
}
export type ResponseContentType$repos$get$apps$with$access$to$protected$branch =
  keyof Response$repos$get$apps$with$access$to$protected$branch$Status$200;
export interface Params$repos$get$apps$with$access$to$protected$branch {
  parameter: Parameter$repos$get$apps$with$access$to$protected$branch;
}
export type RequestContentType$repos$set$app$access$restrictions = keyof RequestBody$repos$set$app$access$restrictions;
export type ResponseContentType$repos$set$app$access$restrictions = keyof Response$repos$set$app$access$restrictions$Status$200;
export interface Params$repos$set$app$access$restrictions {
  parameter: Parameter$repos$set$app$access$restrictions;
  requestBody: RequestBody$repos$set$app$access$restrictions["application/json"];
}
export type RequestContentType$repos$add$app$access$restrictions = keyof RequestBody$repos$add$app$access$restrictions;
export type ResponseContentType$repos$add$app$access$restrictions = keyof Response$repos$add$app$access$restrictions$Status$200;
export interface Params$repos$add$app$access$restrictions {
  parameter: Parameter$repos$add$app$access$restrictions;
  requestBody: RequestBody$repos$add$app$access$restrictions["application/json"];
}
export type RequestContentType$repos$remove$app$access$restrictions = keyof RequestBody$repos$remove$app$access$restrictions;
export type ResponseContentType$repos$remove$app$access$restrictions = keyof Response$repos$remove$app$access$restrictions$Status$200;
export interface Params$repos$remove$app$access$restrictions {
  parameter: Parameter$repos$remove$app$access$restrictions;
  requestBody: RequestBody$repos$remove$app$access$restrictions["application/json"];
}
export type ResponseContentType$repos$get$teams$with$access$to$protected$branch =
  keyof Response$repos$get$teams$with$access$to$protected$branch$Status$200;
export interface Params$repos$get$teams$with$access$to$protected$branch {
  parameter: Parameter$repos$get$teams$with$access$to$protected$branch;
}
export type RequestContentType$repos$set$team$access$restrictions = keyof RequestBody$repos$set$team$access$restrictions;
export type ResponseContentType$repos$set$team$access$restrictions = keyof Response$repos$set$team$access$restrictions$Status$200;
export interface Params$repos$set$team$access$restrictions {
  parameter: Parameter$repos$set$team$access$restrictions;
  requestBody: RequestBody$repos$set$team$access$restrictions["application/json"];
}
export type RequestContentType$repos$add$team$access$restrictions = keyof RequestBody$repos$add$team$access$restrictions;
export type ResponseContentType$repos$add$team$access$restrictions = keyof Response$repos$add$team$access$restrictions$Status$200;
export interface Params$repos$add$team$access$restrictions {
  parameter: Parameter$repos$add$team$access$restrictions;
  requestBody: RequestBody$repos$add$team$access$restrictions["application/json"];
}
export type RequestContentType$repos$remove$team$access$restrictions = keyof RequestBody$repos$remove$team$access$restrictions;
export type ResponseContentType$repos$remove$team$access$restrictions = keyof Response$repos$remove$team$access$restrictions$Status$200;
export interface Params$repos$remove$team$access$restrictions {
  parameter: Parameter$repos$remove$team$access$restrictions;
  requestBody: RequestBody$repos$remove$team$access$restrictions["application/json"];
}
export type ResponseContentType$repos$get$users$with$access$to$protected$branch =
  keyof Response$repos$get$users$with$access$to$protected$branch$Status$200;
export interface Params$repos$get$users$with$access$to$protected$branch {
  parameter: Parameter$repos$get$users$with$access$to$protected$branch;
}
export type RequestContentType$repos$set$user$access$restrictions = keyof RequestBody$repos$set$user$access$restrictions;
export type ResponseContentType$repos$set$user$access$restrictions = keyof Response$repos$set$user$access$restrictions$Status$200;
export interface Params$repos$set$user$access$restrictions {
  parameter: Parameter$repos$set$user$access$restrictions;
  requestBody: RequestBody$repos$set$user$access$restrictions["application/json"];
}
export type RequestContentType$repos$add$user$access$restrictions = keyof RequestBody$repos$add$user$access$restrictions;
export type ResponseContentType$repos$add$user$access$restrictions = keyof Response$repos$add$user$access$restrictions$Status$200;
export interface Params$repos$add$user$access$restrictions {
  parameter: Parameter$repos$add$user$access$restrictions;
  requestBody: RequestBody$repos$add$user$access$restrictions["application/json"];
}
export type RequestContentType$repos$remove$user$access$restrictions = keyof RequestBody$repos$remove$user$access$restrictions;
export type ResponseContentType$repos$remove$user$access$restrictions = keyof Response$repos$remove$user$access$restrictions$Status$200;
export interface Params$repos$remove$user$access$restrictions {
  parameter: Parameter$repos$remove$user$access$restrictions;
  requestBody: RequestBody$repos$remove$user$access$restrictions["application/json"];
}
export type RequestContentType$repos$rename$branch = keyof RequestBody$repos$rename$branch;
export type ResponseContentType$repos$rename$branch = keyof Response$repos$rename$branch$Status$201;
export interface Params$repos$rename$branch {
  parameter: Parameter$repos$rename$branch;
  requestBody: RequestBody$repos$rename$branch["application/json"];
}
export type RequestContentType$checks$create = keyof RequestBody$checks$create;
export type ResponseContentType$checks$create = keyof Response$checks$create$Status$201;
export interface Params$checks$create {
  parameter: Parameter$checks$create;
  requestBody: RequestBody$checks$create["application/json"];
}
export type ResponseContentType$checks$get = keyof Response$checks$get$Status$200;
export interface Params$checks$get {
  parameter: Parameter$checks$get;
}
export type RequestContentType$checks$update = keyof RequestBody$checks$update;
export type ResponseContentType$checks$update = keyof Response$checks$update$Status$200;
export interface Params$checks$update {
  parameter: Parameter$checks$update;
  requestBody: RequestBody$checks$update["application/json"];
}
export type ResponseContentType$checks$list$annotations = keyof Response$checks$list$annotations$Status$200;
export interface Params$checks$list$annotations {
  parameter: Parameter$checks$list$annotations;
}
export type ResponseContentType$checks$rerequest$run = keyof Response$checks$rerequest$run$Status$201;
export interface Params$checks$rerequest$run {
  parameter: Parameter$checks$rerequest$run;
}
export type RequestContentType$checks$create$suite = keyof RequestBody$checks$create$suite;
export type ResponseContentType$checks$create$suite = keyof Response$checks$create$suite$Status$200;
export interface Params$checks$create$suite {
  parameter: Parameter$checks$create$suite;
  requestBody: RequestBody$checks$create$suite["application/json"];
}
export type RequestContentType$checks$set$suites$preferences = keyof RequestBody$checks$set$suites$preferences;
export type ResponseContentType$checks$set$suites$preferences = keyof Response$checks$set$suites$preferences$Status$200;
export interface Params$checks$set$suites$preferences {
  parameter: Parameter$checks$set$suites$preferences;
  requestBody: RequestBody$checks$set$suites$preferences["application/json"];
}
export type ResponseContentType$checks$get$suite = keyof Response$checks$get$suite$Status$200;
export interface Params$checks$get$suite {
  parameter: Parameter$checks$get$suite;
}
export type ResponseContentType$checks$list$for$suite = keyof Response$checks$list$for$suite$Status$200;
export interface Params$checks$list$for$suite {
  parameter: Parameter$checks$list$for$suite;
}
export type ResponseContentType$checks$rerequest$suite = keyof Response$checks$rerequest$suite$Status$201;
export interface Params$checks$rerequest$suite {
  parameter: Parameter$checks$rerequest$suite;
}
export type ResponseContentType$code$scanning$list$alerts$for$repo = keyof Response$code$scanning$list$alerts$for$repo$Status$200;
export interface Params$code$scanning$list$alerts$for$repo {
  parameter: Parameter$code$scanning$list$alerts$for$repo;
}
export type ResponseContentType$code$scanning$get$alert = keyof Response$code$scanning$get$alert$Status$200;
export interface Params$code$scanning$get$alert {
  parameter: Parameter$code$scanning$get$alert;
}
export type RequestContentType$code$scanning$update$alert = keyof RequestBody$code$scanning$update$alert;
export type ResponseContentType$code$scanning$update$alert = keyof Response$code$scanning$update$alert$Status$200;
export interface Params$code$scanning$update$alert {
  parameter: Parameter$code$scanning$update$alert;
  requestBody: RequestBody$code$scanning$update$alert["application/json"];
}
export type ResponseContentType$code$scanning$list$alert$instances = keyof Response$code$scanning$list$alert$instances$Status$200;
export interface Params$code$scanning$list$alert$instances {
  parameter: Parameter$code$scanning$list$alert$instances;
}
export type ResponseContentType$code$scanning$list$recent$analyses = keyof Response$code$scanning$list$recent$analyses$Status$200;
export interface Params$code$scanning$list$recent$analyses {
  parameter: Parameter$code$scanning$list$recent$analyses;
}
export type ResponseContentType$code$scanning$get$analysis = keyof Response$code$scanning$get$analysis$Status$200;
export interface Params$code$scanning$get$analysis<U extends ResponseContentType$code$scanning$get$analysis> {
  headers: {
    Accept: U;
  };
  parameter: Parameter$code$scanning$get$analysis;
}
export type ResponseContentType$code$scanning$delete$analysis = keyof Response$code$scanning$delete$analysis$Status$200;
export interface Params$code$scanning$delete$analysis {
  parameter: Parameter$code$scanning$delete$analysis;
}
export type RequestContentType$code$scanning$upload$sarif = keyof RequestBody$code$scanning$upload$sarif;
export type ResponseContentType$code$scanning$upload$sarif = keyof Response$code$scanning$upload$sarif$Status$202;
export interface Params$code$scanning$upload$sarif {
  parameter: Parameter$code$scanning$upload$sarif;
  requestBody: RequestBody$code$scanning$upload$sarif["application/json"];
}
export type ResponseContentType$code$scanning$get$sarif = keyof Response$code$scanning$get$sarif$Status$200;
export interface Params$code$scanning$get$sarif {
  parameter: Parameter$code$scanning$get$sarif;
}
export type ResponseContentType$repos$list$collaborators = keyof Response$repos$list$collaborators$Status$200;
export interface Params$repos$list$collaborators {
  parameter: Parameter$repos$list$collaborators;
}
export interface Params$repos$check$collaborator {
  parameter: Parameter$repos$check$collaborator;
}
export type RequestContentType$repos$add$collaborator = keyof RequestBody$repos$add$collaborator;
export type ResponseContentType$repos$add$collaborator = keyof Response$repos$add$collaborator$Status$201;
export interface Params$repos$add$collaborator {
  parameter: Parameter$repos$add$collaborator;
  requestBody: RequestBody$repos$add$collaborator["application/json"];
}
export interface Params$repos$remove$collaborator {
  parameter: Parameter$repos$remove$collaborator;
}
export type ResponseContentType$repos$get$collaborator$permission$level = keyof Response$repos$get$collaborator$permission$level$Status$200;
export interface Params$repos$get$collaborator$permission$level {
  parameter: Parameter$repos$get$collaborator$permission$level;
}
export type ResponseContentType$repos$list$commit$comments$for$repo = keyof Response$repos$list$commit$comments$for$repo$Status$200;
export interface Params$repos$list$commit$comments$for$repo {
  parameter: Parameter$repos$list$commit$comments$for$repo;
}
export type ResponseContentType$repos$get$commit$comment = keyof Response$repos$get$commit$comment$Status$200;
export interface Params$repos$get$commit$comment {
  parameter: Parameter$repos$get$commit$comment;
}
export interface Params$repos$delete$commit$comment {
  parameter: Parameter$repos$delete$commit$comment;
}
export type RequestContentType$repos$update$commit$comment = keyof RequestBody$repos$update$commit$comment;
export type ResponseContentType$repos$update$commit$comment = keyof Response$repos$update$commit$comment$Status$200;
export interface Params$repos$update$commit$comment {
  parameter: Parameter$repos$update$commit$comment;
  requestBody: RequestBody$repos$update$commit$comment["application/json"];
}
export type ResponseContentType$reactions$list$for$commit$comment = keyof Response$reactions$list$for$commit$comment$Status$200;
export interface Params$reactions$list$for$commit$comment {
  parameter: Parameter$reactions$list$for$commit$comment;
}
export type RequestContentType$reactions$create$for$commit$comment = keyof RequestBody$reactions$create$for$commit$comment;
export type ResponseContentType$reactions$create$for$commit$comment = keyof Response$reactions$create$for$commit$comment$Status$200;
export interface Params$reactions$create$for$commit$comment {
  parameter: Parameter$reactions$create$for$commit$comment;
  requestBody: RequestBody$reactions$create$for$commit$comment["application/json"];
}
export interface Params$reactions$delete$for$commit$comment {
  parameter: Parameter$reactions$delete$for$commit$comment;
}
export type ResponseContentType$repos$list$commits = keyof Response$repos$list$commits$Status$200;
export interface Params$repos$list$commits {
  parameter: Parameter$repos$list$commits;
}
export type ResponseContentType$repos$list$branches$for$head$commit = keyof Response$repos$list$branches$for$head$commit$Status$200;
export interface Params$repos$list$branches$for$head$commit {
  parameter: Parameter$repos$list$branches$for$head$commit;
}
export type ResponseContentType$repos$list$comments$for$commit = keyof Response$repos$list$comments$for$commit$Status$200;
export interface Params$repos$list$comments$for$commit {
  parameter: Parameter$repos$list$comments$for$commit;
}
export type RequestContentType$repos$create$commit$comment = keyof RequestBody$repos$create$commit$comment;
export type ResponseContentType$repos$create$commit$comment = keyof Response$repos$create$commit$comment$Status$201;
export interface Params$repos$create$commit$comment {
  parameter: Parameter$repos$create$commit$comment;
  requestBody: RequestBody$repos$create$commit$comment["application/json"];
}
export type ResponseContentType$repos$list$pull$requests$associated$with$commit =
  keyof Response$repos$list$pull$requests$associated$with$commit$Status$200;
export interface Params$repos$list$pull$requests$associated$with$commit {
  parameter: Parameter$repos$list$pull$requests$associated$with$commit;
}
export type ResponseContentType$repos$get$commit = keyof Response$repos$get$commit$Status$200;
export interface Params$repos$get$commit {
  parameter: Parameter$repos$get$commit;
}
export type ResponseContentType$checks$list$for$ref = keyof Response$checks$list$for$ref$Status$200;
export interface Params$checks$list$for$ref {
  parameter: Parameter$checks$list$for$ref;
}
export type ResponseContentType$checks$list$suites$for$ref = keyof Response$checks$list$suites$for$ref$Status$200;
export interface Params$checks$list$suites$for$ref {
  parameter: Parameter$checks$list$suites$for$ref;
}
export type ResponseContentType$repos$get$combined$status$for$ref = keyof Response$repos$get$combined$status$for$ref$Status$200;
export interface Params$repos$get$combined$status$for$ref {
  parameter: Parameter$repos$get$combined$status$for$ref;
}
export type ResponseContentType$repos$list$commit$statuses$for$ref = keyof Response$repos$list$commit$statuses$for$ref$Status$200;
export interface Params$repos$list$commit$statuses$for$ref {
  parameter: Parameter$repos$list$commit$statuses$for$ref;
}
export type ResponseContentType$repos$compare$commits = keyof Response$repos$compare$commits$Status$200;
export interface Params$repos$compare$commits {
  parameter: Parameter$repos$compare$commits;
}
export type ResponseContentType$repos$get$content = keyof Response$repos$get$content$Status$200;
export interface Params$repos$get$content<U extends ResponseContentType$repos$get$content> {
  headers: {
    Accept: U;
  };
  parameter: Parameter$repos$get$content;
}
export type RequestContentType$repos$create$or$update$file$contents = keyof RequestBody$repos$create$or$update$file$contents;
export type ResponseContentType$repos$create$or$update$file$contents = keyof Response$repos$create$or$update$file$contents$Status$200;
export interface Params$repos$create$or$update$file$contents {
  parameter: Parameter$repos$create$or$update$file$contents;
  requestBody: RequestBody$repos$create$or$update$file$contents["application/json"];
}
export type RequestContentType$repos$delete$file = keyof RequestBody$repos$delete$file;
export type ResponseContentType$repos$delete$file = keyof Response$repos$delete$file$Status$200;
export interface Params$repos$delete$file {
  parameter: Parameter$repos$delete$file;
  requestBody: RequestBody$repos$delete$file["application/json"];
}
export type ResponseContentType$repos$list$contributors = keyof Response$repos$list$contributors$Status$200;
export interface Params$repos$list$contributors {
  parameter: Parameter$repos$list$contributors;
}
export type ResponseContentType$dependabot$list$repo$secrets = keyof Response$dependabot$list$repo$secrets$Status$200;
export interface Params$dependabot$list$repo$secrets {
  parameter: Parameter$dependabot$list$repo$secrets;
}
export type ResponseContentType$dependabot$get$repo$public$key = keyof Response$dependabot$get$repo$public$key$Status$200;
export interface Params$dependabot$get$repo$public$key {
  parameter: Parameter$dependabot$get$repo$public$key;
}
export type ResponseContentType$dependabot$get$repo$secret = keyof Response$dependabot$get$repo$secret$Status$200;
export interface Params$dependabot$get$repo$secret {
  parameter: Parameter$dependabot$get$repo$secret;
}
export type RequestContentType$dependabot$create$or$update$repo$secret = keyof RequestBody$dependabot$create$or$update$repo$secret;
export type ResponseContentType$dependabot$create$or$update$repo$secret = keyof Response$dependabot$create$or$update$repo$secret$Status$201;
export interface Params$dependabot$create$or$update$repo$secret {
  parameter: Parameter$dependabot$create$or$update$repo$secret;
  requestBody: RequestBody$dependabot$create$or$update$repo$secret["application/json"];
}
export interface Params$dependabot$delete$repo$secret {
  parameter: Parameter$dependabot$delete$repo$secret;
}
export type ResponseContentType$repos$list$deployments = keyof Response$repos$list$deployments$Status$200;
export interface Params$repos$list$deployments {
  parameter: Parameter$repos$list$deployments;
}
export type RequestContentType$repos$create$deployment = keyof RequestBody$repos$create$deployment;
export type ResponseContentType$repos$create$deployment = keyof Response$repos$create$deployment$Status$201;
export interface Params$repos$create$deployment {
  parameter: Parameter$repos$create$deployment;
  requestBody: RequestBody$repos$create$deployment["application/json"];
}
export type ResponseContentType$repos$get$deployment = keyof Response$repos$get$deployment$Status$200;
export interface Params$repos$get$deployment {
  parameter: Parameter$repos$get$deployment;
}
export interface Params$repos$delete$deployment {
  parameter: Parameter$repos$delete$deployment;
}
export type ResponseContentType$repos$list$deployment$statuses = keyof Response$repos$list$deployment$statuses$Status$200;
export interface Params$repos$list$deployment$statuses {
  parameter: Parameter$repos$list$deployment$statuses;
}
export type RequestContentType$repos$create$deployment$status = keyof RequestBody$repos$create$deployment$status;
export type ResponseContentType$repos$create$deployment$status = keyof Response$repos$create$deployment$status$Status$201;
export interface Params$repos$create$deployment$status {
  parameter: Parameter$repos$create$deployment$status;
  requestBody: RequestBody$repos$create$deployment$status["application/json"];
}
export type ResponseContentType$repos$get$deployment$status = keyof Response$repos$get$deployment$status$Status$200;
export interface Params$repos$get$deployment$status {
  parameter: Parameter$repos$get$deployment$status;
}
export type RequestContentType$repos$create$dispatch$event = keyof RequestBody$repos$create$dispatch$event;
export interface Params$repos$create$dispatch$event {
  parameter: Parameter$repos$create$dispatch$event;
  requestBody: RequestBody$repos$create$dispatch$event["application/json"];
}
export type ResponseContentType$repos$get$all$environments = keyof Response$repos$get$all$environments$Status$200;
export interface Params$repos$get$all$environments {
  parameter: Parameter$repos$get$all$environments;
}
export type ResponseContentType$repos$get$environment = keyof Response$repos$get$environment$Status$200;
export interface Params$repos$get$environment {
  parameter: Parameter$repos$get$environment;
}
export type RequestContentType$repos$create$or$update$environment = keyof RequestBody$repos$create$or$update$environment;
export type ResponseContentType$repos$create$or$update$environment = keyof Response$repos$create$or$update$environment$Status$200;
export interface Params$repos$create$or$update$environment {
  parameter: Parameter$repos$create$or$update$environment;
  requestBody: RequestBody$repos$create$or$update$environment["application/json"];
}
export interface Params$repos$delete$an$environment {
  parameter: Parameter$repos$delete$an$environment;
}
export type ResponseContentType$activity$list$repo$events = keyof Response$activity$list$repo$events$Status$200;
export interface Params$activity$list$repo$events {
  parameter: Parameter$activity$list$repo$events;
}
export type ResponseContentType$repos$list$forks = keyof Response$repos$list$forks$Status$200;
export interface Params$repos$list$forks {
  parameter: Parameter$repos$list$forks;
}
export type RequestContentType$repos$create$fork = keyof RequestBody$repos$create$fork;
export type ResponseContentType$repos$create$fork = keyof Response$repos$create$fork$Status$202;
export interface Params$repos$create$fork {
  parameter: Parameter$repos$create$fork;
  requestBody: RequestBody$repos$create$fork["application/json"];
}
export type RequestContentType$git$create$blob = keyof RequestBody$git$create$blob;
export type ResponseContentType$git$create$blob = keyof Response$git$create$blob$Status$201;
export interface Params$git$create$blob {
  parameter: Parameter$git$create$blob;
  requestBody: RequestBody$git$create$blob["application/json"];
}
export type ResponseContentType$git$get$blob = keyof Response$git$get$blob$Status$200;
export interface Params$git$get$blob {
  parameter: Parameter$git$get$blob;
}
export type RequestContentType$git$create$commit = keyof RequestBody$git$create$commit;
export type ResponseContentType$git$create$commit = keyof Response$git$create$commit$Status$201;
export interface Params$git$create$commit {
  parameter: Parameter$git$create$commit;
  requestBody: RequestBody$git$create$commit["application/json"];
}
export type ResponseContentType$git$get$commit = keyof Response$git$get$commit$Status$200;
export interface Params$git$get$commit {
  parameter: Parameter$git$get$commit;
}
export type ResponseContentType$git$list$matching$refs = keyof Response$git$list$matching$refs$Status$200;
export interface Params$git$list$matching$refs {
  parameter: Parameter$git$list$matching$refs;
}
export type ResponseContentType$git$get$ref = keyof Response$git$get$ref$Status$200;
export interface Params$git$get$ref {
  parameter: Parameter$git$get$ref;
}
export type RequestContentType$git$create$ref = keyof RequestBody$git$create$ref;
export type ResponseContentType$git$create$ref = keyof Response$git$create$ref$Status$201;
export interface Params$git$create$ref {
  parameter: Parameter$git$create$ref;
  requestBody: RequestBody$git$create$ref["application/json"];
}
export interface Params$git$delete$ref {
  parameter: Parameter$git$delete$ref;
}
export type RequestContentType$git$update$ref = keyof RequestBody$git$update$ref;
export type ResponseContentType$git$update$ref = keyof Response$git$update$ref$Status$200;
export interface Params$git$update$ref {
  parameter: Parameter$git$update$ref;
  requestBody: RequestBody$git$update$ref["application/json"];
}
export type RequestContentType$git$create$tag = keyof RequestBody$git$create$tag;
export type ResponseContentType$git$create$tag = keyof Response$git$create$tag$Status$201;
export interface Params$git$create$tag {
  parameter: Parameter$git$create$tag;
  requestBody: RequestBody$git$create$tag["application/json"];
}
export type ResponseContentType$git$get$tag = keyof Response$git$get$tag$Status$200;
export interface Params$git$get$tag {
  parameter: Parameter$git$get$tag;
}
export type RequestContentType$git$create$tree = keyof RequestBody$git$create$tree;
export type ResponseContentType$git$create$tree = keyof Response$git$create$tree$Status$201;
export interface Params$git$create$tree {
  parameter: Parameter$git$create$tree;
  requestBody: RequestBody$git$create$tree["application/json"];
}
export type ResponseContentType$git$get$tree = keyof Response$git$get$tree$Status$200;
export interface Params$git$get$tree {
  parameter: Parameter$git$get$tree;
}
export type ResponseContentType$repos$list$webhooks = keyof Response$repos$list$webhooks$Status$200;
export interface Params$repos$list$webhooks {
  parameter: Parameter$repos$list$webhooks;
}
export type RequestContentType$repos$create$webhook = keyof RequestBody$repos$create$webhook;
export type ResponseContentType$repos$create$webhook = keyof Response$repos$create$webhook$Status$201;
export interface Params$repos$create$webhook {
  parameter: Parameter$repos$create$webhook;
  requestBody: RequestBody$repos$create$webhook["application/json"];
}
export type ResponseContentType$repos$get$webhook = keyof Response$repos$get$webhook$Status$200;
export interface Params$repos$get$webhook {
  parameter: Parameter$repos$get$webhook;
}
export interface Params$repos$delete$webhook {
  parameter: Parameter$repos$delete$webhook;
}
export type RequestContentType$repos$update$webhook = keyof RequestBody$repos$update$webhook;
export type ResponseContentType$repos$update$webhook = keyof Response$repos$update$webhook$Status$200;
export interface Params$repos$update$webhook {
  parameter: Parameter$repos$update$webhook;
  requestBody: RequestBody$repos$update$webhook["application/json"];
}
export type ResponseContentType$repos$get$webhook$config$for$repo = keyof Response$repos$get$webhook$config$for$repo$Status$200;
export interface Params$repos$get$webhook$config$for$repo {
  parameter: Parameter$repos$get$webhook$config$for$repo;
}
export type RequestContentType$repos$update$webhook$config$for$repo = keyof RequestBody$repos$update$webhook$config$for$repo;
export type ResponseContentType$repos$update$webhook$config$for$repo = keyof Response$repos$update$webhook$config$for$repo$Status$200;
export interface Params$repos$update$webhook$config$for$repo {
  parameter: Parameter$repos$update$webhook$config$for$repo;
  requestBody: RequestBody$repos$update$webhook$config$for$repo["application/json"];
}
export type ResponseContentType$repos$list$webhook$deliveries = keyof Response$repos$list$webhook$deliveries$Status$200;
export interface Params$repos$list$webhook$deliveries {
  parameter: Parameter$repos$list$webhook$deliveries;
}
export type ResponseContentType$repos$get$webhook$delivery = keyof Response$repos$get$webhook$delivery$Status$200;
export interface Params$repos$get$webhook$delivery {
  parameter: Parameter$repos$get$webhook$delivery;
}
export type ResponseContentType$repos$redeliver$webhook$delivery = keyof Response$repos$redeliver$webhook$delivery$Status$202;
export interface Params$repos$redeliver$webhook$delivery {
  parameter: Parameter$repos$redeliver$webhook$delivery;
}
export interface Params$repos$ping$webhook {
  parameter: Parameter$repos$ping$webhook;
}
export interface Params$repos$test$push$webhook {
  parameter: Parameter$repos$test$push$webhook;
}
export type ResponseContentType$apps$get$repo$installation = keyof Response$apps$get$repo$installation$Status$200;
export interface Params$apps$get$repo$installation {
  parameter: Parameter$apps$get$repo$installation;
}
export type ResponseContentType$repos$list$invitations = keyof Response$repos$list$invitations$Status$200;
export interface Params$repos$list$invitations {
  parameter: Parameter$repos$list$invitations;
}
export interface Params$repos$delete$invitation {
  parameter: Parameter$repos$delete$invitation;
}
export type RequestContentType$repos$update$invitation = keyof RequestBody$repos$update$invitation;
export type ResponseContentType$repos$update$invitation = keyof Response$repos$update$invitation$Status$200;
export interface Params$repos$update$invitation {
  parameter: Parameter$repos$update$invitation;
  requestBody: RequestBody$repos$update$invitation["application/json"];
}
export type ResponseContentType$issues$list$for$repo = keyof Response$issues$list$for$repo$Status$200;
export interface Params$issues$list$for$repo {
  parameter: Parameter$issues$list$for$repo;
}
export type RequestContentType$issues$create = keyof RequestBody$issues$create;
export type ResponseContentType$issues$create = keyof Response$issues$create$Status$201;
export interface Params$issues$create {
  parameter: Parameter$issues$create;
  requestBody: RequestBody$issues$create["application/json"];
}
export type ResponseContentType$issues$list$comments$for$repo = keyof Response$issues$list$comments$for$repo$Status$200;
export interface Params$issues$list$comments$for$repo {
  parameter: Parameter$issues$list$comments$for$repo;
}
export type ResponseContentType$issues$get$comment = keyof Response$issues$get$comment$Status$200;
export interface Params$issues$get$comment {
  parameter: Parameter$issues$get$comment;
}
export interface Params$issues$delete$comment {
  parameter: Parameter$issues$delete$comment;
}
export type RequestContentType$issues$update$comment = keyof RequestBody$issues$update$comment;
export type ResponseContentType$issues$update$comment = keyof Response$issues$update$comment$Status$200;
export interface Params$issues$update$comment {
  parameter: Parameter$issues$update$comment;
  requestBody: RequestBody$issues$update$comment["application/json"];
}
export type ResponseContentType$reactions$list$for$issue$comment = keyof Response$reactions$list$for$issue$comment$Status$200;
export interface Params$reactions$list$for$issue$comment {
  parameter: Parameter$reactions$list$for$issue$comment;
}
export type RequestContentType$reactions$create$for$issue$comment = keyof RequestBody$reactions$create$for$issue$comment;
export type ResponseContentType$reactions$create$for$issue$comment = keyof Response$reactions$create$for$issue$comment$Status$200;
export interface Params$reactions$create$for$issue$comment {
  parameter: Parameter$reactions$create$for$issue$comment;
  requestBody: RequestBody$reactions$create$for$issue$comment["application/json"];
}
export interface Params$reactions$delete$for$issue$comment {
  parameter: Parameter$reactions$delete$for$issue$comment;
}
export type ResponseContentType$issues$list$events$for$repo = keyof Response$issues$list$events$for$repo$Status$200;
export interface Params$issues$list$events$for$repo {
  parameter: Parameter$issues$list$events$for$repo;
}
export type ResponseContentType$issues$get$event = keyof Response$issues$get$event$Status$200;
export interface Params$issues$get$event {
  parameter: Parameter$issues$get$event;
}
export type ResponseContentType$issues$get = keyof Response$issues$get$Status$200;
export interface Params$issues$get {
  parameter: Parameter$issues$get;
}
export type RequestContentType$issues$update = keyof RequestBody$issues$update;
export type ResponseContentType$issues$update = keyof Response$issues$update$Status$200;
export interface Params$issues$update {
  parameter: Parameter$issues$update;
  requestBody: RequestBody$issues$update["application/json"];
}
export type RequestContentType$issues$add$assignees = keyof RequestBody$issues$add$assignees;
export type ResponseContentType$issues$add$assignees = keyof Response$issues$add$assignees$Status$201;
export interface Params$issues$add$assignees {
  parameter: Parameter$issues$add$assignees;
  requestBody: RequestBody$issues$add$assignees["application/json"];
}
export type RequestContentType$issues$remove$assignees = keyof RequestBody$issues$remove$assignees;
export type ResponseContentType$issues$remove$assignees = keyof Response$issues$remove$assignees$Status$200;
export interface Params$issues$remove$assignees {
  parameter: Parameter$issues$remove$assignees;
  requestBody: RequestBody$issues$remove$assignees["application/json"];
}
export type ResponseContentType$issues$list$comments = keyof Response$issues$list$comments$Status$200;
export interface Params$issues$list$comments {
  parameter: Parameter$issues$list$comments;
}
export type RequestContentType$issues$create$comment = keyof RequestBody$issues$create$comment;
export type ResponseContentType$issues$create$comment = keyof Response$issues$create$comment$Status$201;
export interface Params$issues$create$comment {
  parameter: Parameter$issues$create$comment;
  requestBody: RequestBody$issues$create$comment["application/json"];
}
export type ResponseContentType$issues$list$events = keyof Response$issues$list$events$Status$200;
export interface Params$issues$list$events {
  parameter: Parameter$issues$list$events;
}
export type ResponseContentType$issues$list$labels$on$issue = keyof Response$issues$list$labels$on$issue$Status$200;
export interface Params$issues$list$labels$on$issue {
  parameter: Parameter$issues$list$labels$on$issue;
}
export type RequestContentType$issues$set$labels = keyof RequestBody$issues$set$labels;
export type ResponseContentType$issues$set$labels = keyof Response$issues$set$labels$Status$200;
export interface Params$issues$set$labels {
  parameter: Parameter$issues$set$labels;
  requestBody: RequestBody$issues$set$labels["application/json"];
}
export type RequestContentType$issues$add$labels = keyof RequestBody$issues$add$labels;
export type ResponseContentType$issues$add$labels = keyof Response$issues$add$labels$Status$200;
export interface Params$issues$add$labels {
  parameter: Parameter$issues$add$labels;
  requestBody: RequestBody$issues$add$labels["application/json"];
}
export interface Params$issues$remove$all$labels {
  parameter: Parameter$issues$remove$all$labels;
}
export type ResponseContentType$issues$remove$label = keyof Response$issues$remove$label$Status$200;
export interface Params$issues$remove$label {
  parameter: Parameter$issues$remove$label;
}
export type RequestContentType$issues$lock = keyof RequestBody$issues$lock;
export interface Params$issues$lock {
  parameter: Parameter$issues$lock;
  requestBody: RequestBody$issues$lock["application/json"];
}
export interface Params$issues$unlock {
  parameter: Parameter$issues$unlock;
}
export type ResponseContentType$reactions$list$for$issue = keyof Response$reactions$list$for$issue$Status$200;
export interface Params$reactions$list$for$issue {
  parameter: Parameter$reactions$list$for$issue;
}
export type RequestContentType$reactions$create$for$issue = keyof RequestBody$reactions$create$for$issue;
export type ResponseContentType$reactions$create$for$issue = keyof Response$reactions$create$for$issue$Status$200;
export interface Params$reactions$create$for$issue {
  parameter: Parameter$reactions$create$for$issue;
  requestBody: RequestBody$reactions$create$for$issue["application/json"];
}
export interface Params$reactions$delete$for$issue {
  parameter: Parameter$reactions$delete$for$issue;
}
export type ResponseContentType$issues$list$events$for$timeline = keyof Response$issues$list$events$for$timeline$Status$200;
export interface Params$issues$list$events$for$timeline {
  parameter: Parameter$issues$list$events$for$timeline;
}
export type ResponseContentType$repos$list$deploy$keys = keyof Response$repos$list$deploy$keys$Status$200;
export interface Params$repos$list$deploy$keys {
  parameter: Parameter$repos$list$deploy$keys;
}
export type RequestContentType$repos$create$deploy$key = keyof RequestBody$repos$create$deploy$key;
export type ResponseContentType$repos$create$deploy$key = keyof Response$repos$create$deploy$key$Status$201;
export interface Params$repos$create$deploy$key {
  parameter: Parameter$repos$create$deploy$key;
  requestBody: RequestBody$repos$create$deploy$key["application/json"];
}
export type ResponseContentType$repos$get$deploy$key = keyof Response$repos$get$deploy$key$Status$200;
export interface Params$repos$get$deploy$key {
  parameter: Parameter$repos$get$deploy$key;
}
export interface Params$repos$delete$deploy$key {
  parameter: Parameter$repos$delete$deploy$key;
}
export type ResponseContentType$issues$list$labels$for$repo = keyof Response$issues$list$labels$for$repo$Status$200;
export interface Params$issues$list$labels$for$repo {
  parameter: Parameter$issues$list$labels$for$repo;
}
export type RequestContentType$issues$create$label = keyof RequestBody$issues$create$label;
export type ResponseContentType$issues$create$label = keyof Response$issues$create$label$Status$201;
export interface Params$issues$create$label {
  parameter: Parameter$issues$create$label;
  requestBody: RequestBody$issues$create$label["application/json"];
}
export type ResponseContentType$issues$get$label = keyof Response$issues$get$label$Status$200;
export interface Params$issues$get$label {
  parameter: Parameter$issues$get$label;
}
export interface Params$issues$delete$label {
  parameter: Parameter$issues$delete$label;
}
export type RequestContentType$issues$update$label = keyof RequestBody$issues$update$label;
export type ResponseContentType$issues$update$label = keyof Response$issues$update$label$Status$200;
export interface Params$issues$update$label {
  parameter: Parameter$issues$update$label;
  requestBody: RequestBody$issues$update$label["application/json"];
}
export type ResponseContentType$repos$list$languages = keyof Response$repos$list$languages$Status$200;
export interface Params$repos$list$languages {
  parameter: Parameter$repos$list$languages;
}
export type ResponseContentType$repos$enable$lfs$for$repo = keyof Response$repos$enable$lfs$for$repo$Status$202;
export interface Params$repos$enable$lfs$for$repo {
  parameter: Parameter$repos$enable$lfs$for$repo;
}
export interface Params$repos$disable$lfs$for$repo {
  parameter: Parameter$repos$disable$lfs$for$repo;
}
export type ResponseContentType$licenses$get$for$repo = keyof Response$licenses$get$for$repo$Status$200;
export interface Params$licenses$get$for$repo {
  parameter: Parameter$licenses$get$for$repo;
}
export type RequestContentType$repos$merge$upstream = keyof RequestBody$repos$merge$upstream;
export type ResponseContentType$repos$merge$upstream = keyof Response$repos$merge$upstream$Status$200;
export interface Params$repos$merge$upstream {
  parameter: Parameter$repos$merge$upstream;
  requestBody: RequestBody$repos$merge$upstream["application/json"];
}
export type RequestContentType$repos$merge = keyof RequestBody$repos$merge;
export type ResponseContentType$repos$merge = keyof Response$repos$merge$Status$201;
export interface Params$repos$merge {
  parameter: Parameter$repos$merge;
  requestBody: RequestBody$repos$merge["application/json"];
}
export type ResponseContentType$issues$list$milestones = keyof Response$issues$list$milestones$Status$200;
export interface Params$issues$list$milestones {
  parameter: Parameter$issues$list$milestones;
}
export type RequestContentType$issues$create$milestone = keyof RequestBody$issues$create$milestone;
export type ResponseContentType$issues$create$milestone = keyof Response$issues$create$milestone$Status$201;
export interface Params$issues$create$milestone {
  parameter: Parameter$issues$create$milestone;
  requestBody: RequestBody$issues$create$milestone["application/json"];
}
export type ResponseContentType$issues$get$milestone = keyof Response$issues$get$milestone$Status$200;
export interface Params$issues$get$milestone {
  parameter: Parameter$issues$get$milestone;
}
export interface Params$issues$delete$milestone {
  parameter: Parameter$issues$delete$milestone;
}
export type RequestContentType$issues$update$milestone = keyof RequestBody$issues$update$milestone;
export type ResponseContentType$issues$update$milestone = keyof Response$issues$update$milestone$Status$200;
export interface Params$issues$update$milestone {
  parameter: Parameter$issues$update$milestone;
  requestBody: RequestBody$issues$update$milestone["application/json"];
}
export type ResponseContentType$issues$list$labels$for$milestone = keyof Response$issues$list$labels$for$milestone$Status$200;
export interface Params$issues$list$labels$for$milestone {
  parameter: Parameter$issues$list$labels$for$milestone;
}
export type ResponseContentType$activity$list$repo$notifications$for$authenticated$user =
  keyof Response$activity$list$repo$notifications$for$authenticated$user$Status$200;
export interface Params$activity$list$repo$notifications$for$authenticated$user {
  parameter: Parameter$activity$list$repo$notifications$for$authenticated$user;
}
export type RequestContentType$activity$mark$repo$notifications$as$read = keyof RequestBody$activity$mark$repo$notifications$as$read;
export type ResponseContentType$activity$mark$repo$notifications$as$read = keyof Response$activity$mark$repo$notifications$as$read$Status$202;
export interface Params$activity$mark$repo$notifications$as$read {
  parameter: Parameter$activity$mark$repo$notifications$as$read;
  requestBody: RequestBody$activity$mark$repo$notifications$as$read["application/json"];
}
export type ResponseContentType$repos$get$pages = keyof Response$repos$get$pages$Status$200;
export interface Params$repos$get$pages {
  parameter: Parameter$repos$get$pages;
}
export type RequestContentType$repos$update$information$about$pages$site = keyof RequestBody$repos$update$information$about$pages$site;
export interface Params$repos$update$information$about$pages$site {
  parameter: Parameter$repos$update$information$about$pages$site;
  requestBody: RequestBody$repos$update$information$about$pages$site["application/json"];
}
export type RequestContentType$repos$create$pages$site = keyof RequestBody$repos$create$pages$site;
export type ResponseContentType$repos$create$pages$site = keyof Response$repos$create$pages$site$Status$201;
export interface Params$repos$create$pages$site {
  parameter: Parameter$repos$create$pages$site;
  requestBody: RequestBody$repos$create$pages$site["application/json"];
}
export interface Params$repos$delete$pages$site {
  parameter: Parameter$repos$delete$pages$site;
}
export type ResponseContentType$repos$list$pages$builds = keyof Response$repos$list$pages$builds$Status$200;
export interface Params$repos$list$pages$builds {
  parameter: Parameter$repos$list$pages$builds;
}
export type ResponseContentType$repos$request$pages$build = keyof Response$repos$request$pages$build$Status$201;
export interface Params$repos$request$pages$build {
  parameter: Parameter$repos$request$pages$build;
}
export type ResponseContentType$repos$get$latest$pages$build = keyof Response$repos$get$latest$pages$build$Status$200;
export interface Params$repos$get$latest$pages$build {
  parameter: Parameter$repos$get$latest$pages$build;
}
export type ResponseContentType$repos$get$pages$build = keyof Response$repos$get$pages$build$Status$200;
export interface Params$repos$get$pages$build {
  parameter: Parameter$repos$get$pages$build;
}
export type ResponseContentType$enterprise$admin$list$pre$receive$hooks$for$repo =
  keyof Response$enterprise$admin$list$pre$receive$hooks$for$repo$Status$200;
export interface Params$enterprise$admin$list$pre$receive$hooks$for$repo {
  parameter: Parameter$enterprise$admin$list$pre$receive$hooks$for$repo;
}
export type ResponseContentType$enterprise$admin$get$pre$receive$hook$for$repo =
  keyof Response$enterprise$admin$get$pre$receive$hook$for$repo$Status$200;
export interface Params$enterprise$admin$get$pre$receive$hook$for$repo {
  parameter: Parameter$enterprise$admin$get$pre$receive$hook$for$repo;
}
export type ResponseContentType$enterprise$admin$remove$pre$receive$hook$enforcement$for$repo =
  keyof Response$enterprise$admin$remove$pre$receive$hook$enforcement$for$repo$Status$200;
export interface Params$enterprise$admin$remove$pre$receive$hook$enforcement$for$repo {
  parameter: Parameter$enterprise$admin$remove$pre$receive$hook$enforcement$for$repo;
}
export type RequestContentType$enterprise$admin$update$pre$receive$hook$enforcement$for$repo =
  keyof RequestBody$enterprise$admin$update$pre$receive$hook$enforcement$for$repo;
export type ResponseContentType$enterprise$admin$update$pre$receive$hook$enforcement$for$repo =
  keyof Response$enterprise$admin$update$pre$receive$hook$enforcement$for$repo$Status$200;
export interface Params$enterprise$admin$update$pre$receive$hook$enforcement$for$repo {
  parameter: Parameter$enterprise$admin$update$pre$receive$hook$enforcement$for$repo;
  requestBody: RequestBody$enterprise$admin$update$pre$receive$hook$enforcement$for$repo["application/json"];
}
export type ResponseContentType$projects$list$for$repo = keyof Response$projects$list$for$repo$Status$200;
export interface Params$projects$list$for$repo {
  parameter: Parameter$projects$list$for$repo;
}
export type RequestContentType$projects$create$for$repo = keyof RequestBody$projects$create$for$repo;
export type ResponseContentType$projects$create$for$repo = keyof Response$projects$create$for$repo$Status$201;
export interface Params$projects$create$for$repo {
  parameter: Parameter$projects$create$for$repo;
  requestBody: RequestBody$projects$create$for$repo["application/json"];
}
export type ResponseContentType$pulls$list = keyof Response$pulls$list$Status$200;
export interface Params$pulls$list {
  parameter: Parameter$pulls$list;
}
export type RequestContentType$pulls$create = keyof RequestBody$pulls$create;
export type ResponseContentType$pulls$create = keyof Response$pulls$create$Status$201;
export interface Params$pulls$create {
  parameter: Parameter$pulls$create;
  requestBody: RequestBody$pulls$create["application/json"];
}
export type ResponseContentType$pulls$list$review$comments$for$repo = keyof Response$pulls$list$review$comments$for$repo$Status$200;
export interface Params$pulls$list$review$comments$for$repo {
  parameter: Parameter$pulls$list$review$comments$for$repo;
}
export type ResponseContentType$pulls$get$review$comment = keyof Response$pulls$get$review$comment$Status$200;
export interface Params$pulls$get$review$comment {
  parameter: Parameter$pulls$get$review$comment;
}
export interface Params$pulls$delete$review$comment {
  parameter: Parameter$pulls$delete$review$comment;
}
export type RequestContentType$pulls$update$review$comment = keyof RequestBody$pulls$update$review$comment;
export type ResponseContentType$pulls$update$review$comment = keyof Response$pulls$update$review$comment$Status$200;
export interface Params$pulls$update$review$comment {
  parameter: Parameter$pulls$update$review$comment;
  requestBody: RequestBody$pulls$update$review$comment["application/json"];
}
export type ResponseContentType$reactions$list$for$pull$request$review$comment =
  keyof Response$reactions$list$for$pull$request$review$comment$Status$200;
export interface Params$reactions$list$for$pull$request$review$comment {
  parameter: Parameter$reactions$list$for$pull$request$review$comment;
}
export type RequestContentType$reactions$create$for$pull$request$review$comment =
  keyof RequestBody$reactions$create$for$pull$request$review$comment;
export type ResponseContentType$reactions$create$for$pull$request$review$comment =
  keyof Response$reactions$create$for$pull$request$review$comment$Status$200;
export interface Params$reactions$create$for$pull$request$review$comment {
  parameter: Parameter$reactions$create$for$pull$request$review$comment;
  requestBody: RequestBody$reactions$create$for$pull$request$review$comment["application/json"];
}
export interface Params$reactions$delete$for$pull$request$comment {
  parameter: Parameter$reactions$delete$for$pull$request$comment;
}
export type ResponseContentType$pulls$get = keyof Response$pulls$get$Status$200;
export interface Params$pulls$get {
  parameter: Parameter$pulls$get;
}
export type RequestContentType$pulls$update = keyof RequestBody$pulls$update;
export type ResponseContentType$pulls$update = keyof Response$pulls$update$Status$200;
export interface Params$pulls$update {
  parameter: Parameter$pulls$update;
  requestBody: RequestBody$pulls$update["application/json"];
}
export type ResponseContentType$pulls$list$review$comments = keyof Response$pulls$list$review$comments$Status$200;
export interface Params$pulls$list$review$comments {
  parameter: Parameter$pulls$list$review$comments;
}
export type RequestContentType$pulls$create$review$comment = keyof RequestBody$pulls$create$review$comment;
export type ResponseContentType$pulls$create$review$comment = keyof Response$pulls$create$review$comment$Status$201;
export interface Params$pulls$create$review$comment {
  parameter: Parameter$pulls$create$review$comment;
  requestBody: RequestBody$pulls$create$review$comment["application/json"];
}
export type RequestContentType$pulls$create$reply$for$review$comment = keyof RequestBody$pulls$create$reply$for$review$comment;
export type ResponseContentType$pulls$create$reply$for$review$comment = keyof Response$pulls$create$reply$for$review$comment$Status$201;
export interface Params$pulls$create$reply$for$review$comment {
  parameter: Parameter$pulls$create$reply$for$review$comment;
  requestBody: RequestBody$pulls$create$reply$for$review$comment["application/json"];
}
export type ResponseContentType$pulls$list$commits = keyof Response$pulls$list$commits$Status$200;
export interface Params$pulls$list$commits {
  parameter: Parameter$pulls$list$commits;
}
export type ResponseContentType$pulls$list$files = keyof Response$pulls$list$files$Status$200;
export interface Params$pulls$list$files {
  parameter: Parameter$pulls$list$files;
}
export interface Params$pulls$check$if$merged {
  parameter: Parameter$pulls$check$if$merged;
}
export type RequestContentType$pulls$merge = keyof RequestBody$pulls$merge;
export type ResponseContentType$pulls$merge = keyof Response$pulls$merge$Status$200;
export interface Params$pulls$merge {
  parameter: Parameter$pulls$merge;
  requestBody: RequestBody$pulls$merge["application/json"];
}
export type ResponseContentType$pulls$list$requested$reviewers = keyof Response$pulls$list$requested$reviewers$Status$200;
export interface Params$pulls$list$requested$reviewers {
  parameter: Parameter$pulls$list$requested$reviewers;
}
export type RequestContentType$pulls$request$reviewers = keyof RequestBody$pulls$request$reviewers;
export type ResponseContentType$pulls$request$reviewers = keyof Response$pulls$request$reviewers$Status$201;
export interface Params$pulls$request$reviewers {
  parameter: Parameter$pulls$request$reviewers;
  requestBody: RequestBody$pulls$request$reviewers["application/json"];
}
export type RequestContentType$pulls$remove$requested$reviewers = keyof RequestBody$pulls$remove$requested$reviewers;
export type ResponseContentType$pulls$remove$requested$reviewers = keyof Response$pulls$remove$requested$reviewers$Status$200;
export interface Params$pulls$remove$requested$reviewers {
  parameter: Parameter$pulls$remove$requested$reviewers;
  requestBody: RequestBody$pulls$remove$requested$reviewers["application/json"];
}
export type ResponseContentType$pulls$list$reviews = keyof Response$pulls$list$reviews$Status$200;
export interface Params$pulls$list$reviews {
  parameter: Parameter$pulls$list$reviews;
}
export type RequestContentType$pulls$create$review = keyof RequestBody$pulls$create$review;
export type ResponseContentType$pulls$create$review = keyof Response$pulls$create$review$Status$200;
export interface Params$pulls$create$review {
  parameter: Parameter$pulls$create$review;
  requestBody: RequestBody$pulls$create$review["application/json"];
}
export type ResponseContentType$pulls$get$review = keyof Response$pulls$get$review$Status$200;
export interface Params$pulls$get$review {
  parameter: Parameter$pulls$get$review;
}
export type RequestContentType$pulls$update$review = keyof RequestBody$pulls$update$review;
export type ResponseContentType$pulls$update$review = keyof Response$pulls$update$review$Status$200;
export interface Params$pulls$update$review {
  parameter: Parameter$pulls$update$review;
  requestBody: RequestBody$pulls$update$review["application/json"];
}
export type ResponseContentType$pulls$delete$pending$review = keyof Response$pulls$delete$pending$review$Status$200;
export interface Params$pulls$delete$pending$review {
  parameter: Parameter$pulls$delete$pending$review;
}
export type ResponseContentType$pulls$list$comments$for$review = keyof Response$pulls$list$comments$for$review$Status$200;
export interface Params$pulls$list$comments$for$review {
  parameter: Parameter$pulls$list$comments$for$review;
}
export type RequestContentType$pulls$dismiss$review = keyof RequestBody$pulls$dismiss$review;
export type ResponseContentType$pulls$dismiss$review = keyof Response$pulls$dismiss$review$Status$200;
export interface Params$pulls$dismiss$review {
  parameter: Parameter$pulls$dismiss$review;
  requestBody: RequestBody$pulls$dismiss$review["application/json"];
}
export type RequestContentType$pulls$submit$review = keyof RequestBody$pulls$submit$review;
export type ResponseContentType$pulls$submit$review = keyof Response$pulls$submit$review$Status$200;
export interface Params$pulls$submit$review {
  parameter: Parameter$pulls$submit$review;
  requestBody: RequestBody$pulls$submit$review["application/json"];
}
export type RequestContentType$pulls$update$branch = keyof RequestBody$pulls$update$branch;
export type ResponseContentType$pulls$update$branch = keyof Response$pulls$update$branch$Status$202;
export interface Params$pulls$update$branch {
  parameter: Parameter$pulls$update$branch;
  requestBody: RequestBody$pulls$update$branch["application/json"];
}
export type ResponseContentType$repos$get$readme = keyof Response$repos$get$readme$Status$200;
export interface Params$repos$get$readme {
  parameter: Parameter$repos$get$readme;
}
export type ResponseContentType$repos$get$readme$in$directory = keyof Response$repos$get$readme$in$directory$Status$200;
export interface Params$repos$get$readme$in$directory {
  parameter: Parameter$repos$get$readme$in$directory;
}
export type ResponseContentType$repos$list$releases = keyof Response$repos$list$releases$Status$200;
export interface Params$repos$list$releases {
  parameter: Parameter$repos$list$releases;
}
export type RequestContentType$repos$create$release = keyof RequestBody$repos$create$release;
export type ResponseContentType$repos$create$release = keyof Response$repos$create$release$Status$201;
export interface Params$repos$create$release {
  parameter: Parameter$repos$create$release;
  requestBody: RequestBody$repos$create$release["application/json"];
}
export type ResponseContentType$repos$get$release$asset = keyof Response$repos$get$release$asset$Status$200;
export interface Params$repos$get$release$asset {
  parameter: Parameter$repos$get$release$asset;
}
export interface Params$repos$delete$release$asset {
  parameter: Parameter$repos$delete$release$asset;
}
export type RequestContentType$repos$update$release$asset = keyof RequestBody$repos$update$release$asset;
export type ResponseContentType$repos$update$release$asset = keyof Response$repos$update$release$asset$Status$200;
export interface Params$repos$update$release$asset {
  parameter: Parameter$repos$update$release$asset;
  requestBody: RequestBody$repos$update$release$asset["application/json"];
}
export type RequestContentType$repos$generate$release$notes = keyof RequestBody$repos$generate$release$notes;
export type ResponseContentType$repos$generate$release$notes = keyof Response$repos$generate$release$notes$Status$200;
export interface Params$repos$generate$release$notes {
  parameter: Parameter$repos$generate$release$notes;
  requestBody: RequestBody$repos$generate$release$notes["application/json"];
}
export type ResponseContentType$repos$get$latest$release = keyof Response$repos$get$latest$release$Status$200;
export interface Params$repos$get$latest$release {
  parameter: Parameter$repos$get$latest$release;
}
export type ResponseContentType$repos$get$release$by$tag = keyof Response$repos$get$release$by$tag$Status$200;
export interface Params$repos$get$release$by$tag {
  parameter: Parameter$repos$get$release$by$tag;
}
export type ResponseContentType$repos$get$release = keyof Response$repos$get$release$Status$200;
export interface Params$repos$get$release {
  parameter: Parameter$repos$get$release;
}
export interface Params$repos$delete$release {
  parameter: Parameter$repos$delete$release;
}
export type RequestContentType$repos$update$release = keyof RequestBody$repos$update$release;
export type ResponseContentType$repos$update$release = keyof Response$repos$update$release$Status$200;
export interface Params$repos$update$release {
  parameter: Parameter$repos$update$release;
  requestBody: RequestBody$repos$update$release["application/json"];
}
export type ResponseContentType$repos$list$release$assets = keyof Response$repos$list$release$assets$Status$200;
export interface Params$repos$list$release$assets {
  parameter: Parameter$repos$list$release$assets;
}
export type RequestContentType$repos$upload$release$asset = keyof RequestBody$repos$upload$release$asset;
export type ResponseContentType$repos$upload$release$asset = keyof Response$repos$upload$release$asset$Status$201;
export interface Params$repos$upload$release$asset {
  parameter: Parameter$repos$upload$release$asset;
  requestBody: RequestBody$repos$upload$release$asset["*/*"];
}
export type RequestContentType$reactions$create$for$release = keyof RequestBody$reactions$create$for$release;
export type ResponseContentType$reactions$create$for$release = keyof Response$reactions$create$for$release$Status$200;
export interface Params$reactions$create$for$release {
  parameter: Parameter$reactions$create$for$release;
  requestBody: RequestBody$reactions$create$for$release["application/json"];
}
export type ResponseContentType$repos$list$cache$info = keyof Response$repos$list$cache$info$Status$200;
export interface Params$repos$list$cache$info {
  parameter: Parameter$repos$list$cache$info;
}
export type ResponseContentType$secret$scanning$list$alerts$for$repo = keyof Response$secret$scanning$list$alerts$for$repo$Status$200;
export interface Params$secret$scanning$list$alerts$for$repo {
  parameter: Parameter$secret$scanning$list$alerts$for$repo;
}
export type ResponseContentType$secret$scanning$get$alert = keyof Response$secret$scanning$get$alert$Status$200;
export interface Params$secret$scanning$get$alert {
  parameter: Parameter$secret$scanning$get$alert;
}
export type RequestContentType$secret$scanning$update$alert = keyof RequestBody$secret$scanning$update$alert;
export type ResponseContentType$secret$scanning$update$alert = keyof Response$secret$scanning$update$alert$Status$200;
export interface Params$secret$scanning$update$alert {
  parameter: Parameter$secret$scanning$update$alert;
  requestBody: RequestBody$secret$scanning$update$alert["application/json"];
}
export type ResponseContentType$secret$scanning$list$locations$for$alert = keyof Response$secret$scanning$list$locations$for$alert$Status$200;
export interface Params$secret$scanning$list$locations$for$alert {
  parameter: Parameter$secret$scanning$list$locations$for$alert;
}
export type ResponseContentType$activity$list$stargazers$for$repo = keyof Response$activity$list$stargazers$for$repo$Status$200;
export interface Params$activity$list$stargazers$for$repo {
  parameter: Parameter$activity$list$stargazers$for$repo;
}
export type ResponseContentType$repos$get$code$frequency$stats = keyof Response$repos$get$code$frequency$stats$Status$200;
export interface Params$repos$get$code$frequency$stats {
  parameter: Parameter$repos$get$code$frequency$stats;
}
export type ResponseContentType$repos$get$commit$activity$stats = keyof Response$repos$get$commit$activity$stats$Status$200;
export interface Params$repos$get$commit$activity$stats {
  parameter: Parameter$repos$get$commit$activity$stats;
}
export type ResponseContentType$repos$get$contributors$stats = keyof Response$repos$get$contributors$stats$Status$200;
export interface Params$repos$get$contributors$stats {
  parameter: Parameter$repos$get$contributors$stats;
}
export type ResponseContentType$repos$get$participation$stats = keyof Response$repos$get$participation$stats$Status$200;
export interface Params$repos$get$participation$stats {
  parameter: Parameter$repos$get$participation$stats;
}
export type ResponseContentType$repos$get$punch$card$stats = keyof Response$repos$get$punch$card$stats$Status$200;
export interface Params$repos$get$punch$card$stats {
  parameter: Parameter$repos$get$punch$card$stats;
}
export type RequestContentType$repos$create$commit$status = keyof RequestBody$repos$create$commit$status;
export type ResponseContentType$repos$create$commit$status = keyof Response$repos$create$commit$status$Status$201;
export interface Params$repos$create$commit$status {
  parameter: Parameter$repos$create$commit$status;
  requestBody: RequestBody$repos$create$commit$status["application/json"];
}
export type ResponseContentType$activity$list$watchers$for$repo = keyof Response$activity$list$watchers$for$repo$Status$200;
export interface Params$activity$list$watchers$for$repo {
  parameter: Parameter$activity$list$watchers$for$repo;
}
export type ResponseContentType$activity$get$repo$subscription = keyof Response$activity$get$repo$subscription$Status$200;
export interface Params$activity$get$repo$subscription {
  parameter: Parameter$activity$get$repo$subscription;
}
export type RequestContentType$activity$set$repo$subscription = keyof RequestBody$activity$set$repo$subscription;
export type ResponseContentType$activity$set$repo$subscription = keyof Response$activity$set$repo$subscription$Status$200;
export interface Params$activity$set$repo$subscription {
  parameter: Parameter$activity$set$repo$subscription;
  requestBody: RequestBody$activity$set$repo$subscription["application/json"];
}
export interface Params$activity$delete$repo$subscription {
  parameter: Parameter$activity$delete$repo$subscription;
}
export type ResponseContentType$repos$list$tags = keyof Response$repos$list$tags$Status$200;
export interface Params$repos$list$tags {
  parameter: Parameter$repos$list$tags;
}
export interface Params$repos$download$tarball$archive {
  parameter: Parameter$repos$download$tarball$archive;
}
export type ResponseContentType$repos$list$teams = keyof Response$repos$list$teams$Status$200;
export interface Params$repos$list$teams {
  parameter: Parameter$repos$list$teams;
}
export type ResponseContentType$repos$get$all$topics = keyof Response$repos$get$all$topics$Status$200;
export interface Params$repos$get$all$topics {
  parameter: Parameter$repos$get$all$topics;
}
export type RequestContentType$repos$replace$all$topics = keyof RequestBody$repos$replace$all$topics;
export type ResponseContentType$repos$replace$all$topics = keyof Response$repos$replace$all$topics$Status$200;
export interface Params$repos$replace$all$topics {
  parameter: Parameter$repos$replace$all$topics;
  requestBody: RequestBody$repos$replace$all$topics["application/json"];
}
export type RequestContentType$repos$transfer = keyof RequestBody$repos$transfer;
export type ResponseContentType$repos$transfer = keyof Response$repos$transfer$Status$202;
export interface Params$repos$transfer {
  parameter: Parameter$repos$transfer;
  requestBody: RequestBody$repos$transfer["application/json"];
}
export interface Params$repos$download$zipball$archive {
  parameter: Parameter$repos$download$zipball$archive;
}
export type RequestContentType$repos$create$using$template = keyof RequestBody$repos$create$using$template;
export type ResponseContentType$repos$create$using$template = keyof Response$repos$create$using$template$Status$201;
export interface Params$repos$create$using$template {
  parameter: Parameter$repos$create$using$template;
  requestBody: RequestBody$repos$create$using$template["application/json"];
}
export type ResponseContentType$repos$list$public = keyof Response$repos$list$public$Status$200;
export interface Params$repos$list$public {
  parameter: Parameter$repos$list$public;
}
export type ResponseContentType$actions$list$environment$secrets = keyof Response$actions$list$environment$secrets$Status$200;
export interface Params$actions$list$environment$secrets {
  parameter: Parameter$actions$list$environment$secrets;
}
export type ResponseContentType$actions$get$environment$public$key = keyof Response$actions$get$environment$public$key$Status$200;
export interface Params$actions$get$environment$public$key {
  parameter: Parameter$actions$get$environment$public$key;
}
export type ResponseContentType$actions$get$environment$secret = keyof Response$actions$get$environment$secret$Status$200;
export interface Params$actions$get$environment$secret {
  parameter: Parameter$actions$get$environment$secret;
}
export type RequestContentType$actions$create$or$update$environment$secret = keyof RequestBody$actions$create$or$update$environment$secret;
export type ResponseContentType$actions$create$or$update$environment$secret =
  keyof Response$actions$create$or$update$environment$secret$Status$201;
export interface Params$actions$create$or$update$environment$secret {
  parameter: Parameter$actions$create$or$update$environment$secret;
  requestBody: RequestBody$actions$create$or$update$environment$secret["application/json"];
}
export interface Params$actions$delete$environment$secret {
  parameter: Parameter$actions$delete$environment$secret;
}
export type ResponseContentType$search$code = keyof Response$search$code$Status$200;
export interface Params$search$code {
  parameter: Parameter$search$code;
}
export type ResponseContentType$search$commits = keyof Response$search$commits$Status$200;
export interface Params$search$commits {
  parameter: Parameter$search$commits;
}
export type ResponseContentType$search$issues$and$pull$requests = keyof Response$search$issues$and$pull$requests$Status$200;
export interface Params$search$issues$and$pull$requests {
  parameter: Parameter$search$issues$and$pull$requests;
}
export type ResponseContentType$search$labels = keyof Response$search$labels$Status$200;
export interface Params$search$labels {
  parameter: Parameter$search$labels;
}
export type ResponseContentType$search$repos = keyof Response$search$repos$Status$200;
export interface Params$search$repos {
  parameter: Parameter$search$repos;
}
export type ResponseContentType$search$topics = keyof Response$search$topics$Status$200;
export interface Params$search$topics {
  parameter: Parameter$search$topics;
}
export type ResponseContentType$search$users = keyof Response$search$users$Status$200;
export interface Params$search$users {
  parameter: Parameter$search$users;
}
export type ResponseContentType$enterprise$admin$get$configuration$status = keyof Response$enterprise$admin$get$configuration$status$Status$200;
export type ResponseContentType$enterprise$admin$get$maintenance$status = keyof Response$enterprise$admin$get$maintenance$status$Status$200;
export type RequestContentType$enterprise$admin$enable$or$disable$maintenance$mode =
  keyof RequestBody$enterprise$admin$enable$or$disable$maintenance$mode;
export type ResponseContentType$enterprise$admin$enable$or$disable$maintenance$mode =
  keyof Response$enterprise$admin$enable$or$disable$maintenance$mode$Status$200;
export interface Params$enterprise$admin$enable$or$disable$maintenance$mode {
  requestBody: RequestBody$enterprise$admin$enable$or$disable$maintenance$mode["application/x-www-form-urlencoded"];
}
export type ResponseContentType$enterprise$admin$get$settings = keyof Response$enterprise$admin$get$settings$Status$200;
export type RequestContentType$enterprise$admin$set$settings = keyof RequestBody$enterprise$admin$set$settings;
export interface Params$enterprise$admin$set$settings {
  requestBody: RequestBody$enterprise$admin$set$settings["application/x-www-form-urlencoded"];
}
export type ResponseContentType$enterprise$admin$get$all$authorized$ssh$keys =
  keyof Response$enterprise$admin$get$all$authorized$ssh$keys$Status$200;
export type RequestContentType$enterprise$admin$add$authorized$ssh$key = keyof RequestBody$enterprise$admin$add$authorized$ssh$key;
export type ResponseContentType$enterprise$admin$add$authorized$ssh$key = keyof Response$enterprise$admin$add$authorized$ssh$key$Status$201;
export interface Params$enterprise$admin$add$authorized$ssh$key {
  requestBody: RequestBody$enterprise$admin$add$authorized$ssh$key["application/x-www-form-urlencoded"];
}
export type RequestContentType$enterprise$admin$remove$authorized$ssh$key = keyof RequestBody$enterprise$admin$remove$authorized$ssh$key;
export type ResponseContentType$enterprise$admin$remove$authorized$ssh$key =
  keyof Response$enterprise$admin$remove$authorized$ssh$key$Status$200;
export interface Params$enterprise$admin$remove$authorized$ssh$key {
  requestBody: RequestBody$enterprise$admin$remove$authorized$ssh$key["application/x-www-form-urlencoded"];
}
export type RequestContentType$enterprise$admin$create$enterprise$server$license =
  keyof RequestBody$enterprise$admin$create$enterprise$server$license;
export interface Params$enterprise$admin$create$enterprise$server$license {
  requestBody: RequestBody$enterprise$admin$create$enterprise$server$license["application/x-www-form-urlencoded"];
}
export type RequestContentType$enterprise$admin$upgrade$license = keyof RequestBody$enterprise$admin$upgrade$license;
export interface Params$enterprise$admin$upgrade$license {
  requestBody: RequestBody$enterprise$admin$upgrade$license["application/x-www-form-urlencoded"];
}
export type ResponseContentType$teams$get$legacy = keyof Response$teams$get$legacy$Status$200;
export interface Params$teams$get$legacy {
  parameter: Parameter$teams$get$legacy;
}
export interface Params$teams$delete$legacy {
  parameter: Parameter$teams$delete$legacy;
}
export type RequestContentType$teams$update$legacy = keyof RequestBody$teams$update$legacy;
export type ResponseContentType$teams$update$legacy = keyof Response$teams$update$legacy$Status$200;
export interface Params$teams$update$legacy {
  parameter: Parameter$teams$update$legacy;
  requestBody: RequestBody$teams$update$legacy["application/json"];
}
export type ResponseContentType$teams$list$discussions$legacy = keyof Response$teams$list$discussions$legacy$Status$200;
export interface Params$teams$list$discussions$legacy {
  parameter: Parameter$teams$list$discussions$legacy;
}
export type RequestContentType$teams$create$discussion$legacy = keyof RequestBody$teams$create$discussion$legacy;
export type ResponseContentType$teams$create$discussion$legacy = keyof Response$teams$create$discussion$legacy$Status$201;
export interface Params$teams$create$discussion$legacy {
  parameter: Parameter$teams$create$discussion$legacy;
  requestBody: RequestBody$teams$create$discussion$legacy["application/json"];
}
export type ResponseContentType$teams$get$discussion$legacy = keyof Response$teams$get$discussion$legacy$Status$200;
export interface Params$teams$get$discussion$legacy {
  parameter: Parameter$teams$get$discussion$legacy;
}
export interface Params$teams$delete$discussion$legacy {
  parameter: Parameter$teams$delete$discussion$legacy;
}
export type RequestContentType$teams$update$discussion$legacy = keyof RequestBody$teams$update$discussion$legacy;
export type ResponseContentType$teams$update$discussion$legacy = keyof Response$teams$update$discussion$legacy$Status$200;
export interface Params$teams$update$discussion$legacy {
  parameter: Parameter$teams$update$discussion$legacy;
  requestBody: RequestBody$teams$update$discussion$legacy["application/json"];
}
export type ResponseContentType$teams$list$discussion$comments$legacy = keyof Response$teams$list$discussion$comments$legacy$Status$200;
export interface Params$teams$list$discussion$comments$legacy {
  parameter: Parameter$teams$list$discussion$comments$legacy;
}
export type RequestContentType$teams$create$discussion$comment$legacy = keyof RequestBody$teams$create$discussion$comment$legacy;
export type ResponseContentType$teams$create$discussion$comment$legacy = keyof Response$teams$create$discussion$comment$legacy$Status$201;
export interface Params$teams$create$discussion$comment$legacy {
  parameter: Parameter$teams$create$discussion$comment$legacy;
  requestBody: RequestBody$teams$create$discussion$comment$legacy["application/json"];
}
export type ResponseContentType$teams$get$discussion$comment$legacy = keyof Response$teams$get$discussion$comment$legacy$Status$200;
export interface Params$teams$get$discussion$comment$legacy {
  parameter: Parameter$teams$get$discussion$comment$legacy;
}
export interface Params$teams$delete$discussion$comment$legacy {
  parameter: Parameter$teams$delete$discussion$comment$legacy;
}
export type RequestContentType$teams$update$discussion$comment$legacy = keyof RequestBody$teams$update$discussion$comment$legacy;
export type ResponseContentType$teams$update$discussion$comment$legacy = keyof Response$teams$update$discussion$comment$legacy$Status$200;
export interface Params$teams$update$discussion$comment$legacy {
  parameter: Parameter$teams$update$discussion$comment$legacy;
  requestBody: RequestBody$teams$update$discussion$comment$legacy["application/json"];
}
export type ResponseContentType$reactions$list$for$team$discussion$comment$legacy =
  keyof Response$reactions$list$for$team$discussion$comment$legacy$Status$200;
export interface Params$reactions$list$for$team$discussion$comment$legacy {
  parameter: Parameter$reactions$list$for$team$discussion$comment$legacy;
}
export type RequestContentType$reactions$create$for$team$discussion$comment$legacy =
  keyof RequestBody$reactions$create$for$team$discussion$comment$legacy;
export type ResponseContentType$reactions$create$for$team$discussion$comment$legacy =
  keyof Response$reactions$create$for$team$discussion$comment$legacy$Status$201;
export interface Params$reactions$create$for$team$discussion$comment$legacy {
  parameter: Parameter$reactions$create$for$team$discussion$comment$legacy;
  requestBody: RequestBody$reactions$create$for$team$discussion$comment$legacy["application/json"];
}
export type ResponseContentType$reactions$list$for$team$discussion$legacy = keyof Response$reactions$list$for$team$discussion$legacy$Status$200;
export interface Params$reactions$list$for$team$discussion$legacy {
  parameter: Parameter$reactions$list$for$team$discussion$legacy;
}
export type RequestContentType$reactions$create$for$team$discussion$legacy = keyof RequestBody$reactions$create$for$team$discussion$legacy;
export type ResponseContentType$reactions$create$for$team$discussion$legacy =
  keyof Response$reactions$create$for$team$discussion$legacy$Status$201;
export interface Params$reactions$create$for$team$discussion$legacy {
  parameter: Parameter$reactions$create$for$team$discussion$legacy;
  requestBody: RequestBody$reactions$create$for$team$discussion$legacy["application/json"];
}
export type ResponseContentType$teams$list$members$legacy = keyof Response$teams$list$members$legacy$Status$200;
export interface Params$teams$list$members$legacy {
  parameter: Parameter$teams$list$members$legacy;
}
export interface Params$teams$get$member$legacy {
  parameter: Parameter$teams$get$member$legacy;
}
export interface Params$teams$add$member$legacy {
  parameter: Parameter$teams$add$member$legacy;
}
export interface Params$teams$remove$member$legacy {
  parameter: Parameter$teams$remove$member$legacy;
}
export type ResponseContentType$teams$get$membership$for$user$legacy = keyof Response$teams$get$membership$for$user$legacy$Status$200;
export interface Params$teams$get$membership$for$user$legacy {
  parameter: Parameter$teams$get$membership$for$user$legacy;
}
export type RequestContentType$teams$add$or$update$membership$for$user$legacy =
  keyof RequestBody$teams$add$or$update$membership$for$user$legacy;
export type ResponseContentType$teams$add$or$update$membership$for$user$legacy =
  keyof Response$teams$add$or$update$membership$for$user$legacy$Status$200;
export interface Params$teams$add$or$update$membership$for$user$legacy {
  parameter: Parameter$teams$add$or$update$membership$for$user$legacy;
  requestBody: RequestBody$teams$add$or$update$membership$for$user$legacy["application/json"];
}
export interface Params$teams$remove$membership$for$user$legacy {
  parameter: Parameter$teams$remove$membership$for$user$legacy;
}
export type ResponseContentType$teams$list$projects$legacy = keyof Response$teams$list$projects$legacy$Status$200;
export interface Params$teams$list$projects$legacy {
  parameter: Parameter$teams$list$projects$legacy;
}
export type ResponseContentType$teams$check$permissions$for$project$legacy =
  keyof Response$teams$check$permissions$for$project$legacy$Status$200;
export interface Params$teams$check$permissions$for$project$legacy {
  parameter: Parameter$teams$check$permissions$for$project$legacy;
}
export type RequestContentType$teams$add$or$update$project$permissions$legacy =
  keyof RequestBody$teams$add$or$update$project$permissions$legacy;
export interface Params$teams$add$or$update$project$permissions$legacy {
  parameter: Parameter$teams$add$or$update$project$permissions$legacy;
  requestBody: RequestBody$teams$add$or$update$project$permissions$legacy["application/json"];
}
export interface Params$teams$remove$project$legacy {
  parameter: Parameter$teams$remove$project$legacy;
}
export type ResponseContentType$teams$list$repos$legacy = keyof Response$teams$list$repos$legacy$Status$200;
export interface Params$teams$list$repos$legacy {
  parameter: Parameter$teams$list$repos$legacy;
}
export type ResponseContentType$teams$check$permissions$for$repo$legacy = keyof Response$teams$check$permissions$for$repo$legacy$Status$200;
export interface Params$teams$check$permissions$for$repo$legacy {
  parameter: Parameter$teams$check$permissions$for$repo$legacy;
}
export type RequestContentType$teams$add$or$update$repo$permissions$legacy = keyof RequestBody$teams$add$or$update$repo$permissions$legacy;
export interface Params$teams$add$or$update$repo$permissions$legacy {
  parameter: Parameter$teams$add$or$update$repo$permissions$legacy;
  requestBody: RequestBody$teams$add$or$update$repo$permissions$legacy["application/json"];
}
export interface Params$teams$remove$repo$legacy {
  parameter: Parameter$teams$remove$repo$legacy;
}
export type ResponseContentType$teams$list$child$legacy = keyof Response$teams$list$child$legacy$Status$200;
export interface Params$teams$list$child$legacy {
  parameter: Parameter$teams$list$child$legacy;
}
export type ResponseContentType$users$get$authenticated = keyof Response$users$get$authenticated$Status$200;
export type RequestContentType$users$update$authenticated = keyof RequestBody$users$update$authenticated;
export type ResponseContentType$users$update$authenticated = keyof Response$users$update$authenticated$Status$200;
export interface Params$users$update$authenticated {
  requestBody: RequestBody$users$update$authenticated["application/json"];
}
export type ResponseContentType$users$list$emails$for$authenticated$user = keyof Response$users$list$emails$for$authenticated$user$Status$200;
export interface Params$users$list$emails$for$authenticated$user {
  parameter: Parameter$users$list$emails$for$authenticated$user;
}
export type RequestContentType$users$add$email$for$authenticated$user = keyof RequestBody$users$add$email$for$authenticated$user;
export type ResponseContentType$users$add$email$for$authenticated$user = keyof Response$users$add$email$for$authenticated$user$Status$201;
export interface Params$users$add$email$for$authenticated$user {
  requestBody: RequestBody$users$add$email$for$authenticated$user["application/json"];
}
export type RequestContentType$users$delete$email$for$authenticated$user = keyof RequestBody$users$delete$email$for$authenticated$user;
export interface Params$users$delete$email$for$authenticated$user {
  requestBody: RequestBody$users$delete$email$for$authenticated$user["application/json"];
}
export type ResponseContentType$users$list$followers$for$authenticated$user =
  keyof Response$users$list$followers$for$authenticated$user$Status$200;
export interface Params$users$list$followers$for$authenticated$user {
  parameter: Parameter$users$list$followers$for$authenticated$user;
}
export type ResponseContentType$users$list$followed$by$authenticated$user = keyof Response$users$list$followed$by$authenticated$user$Status$200;
export interface Params$users$list$followed$by$authenticated$user {
  parameter: Parameter$users$list$followed$by$authenticated$user;
}
export interface Params$users$check$person$is$followed$by$authenticated {
  parameter: Parameter$users$check$person$is$followed$by$authenticated;
}
export interface Params$users$follow {
  parameter: Parameter$users$follow;
}
export interface Params$users$unfollow {
  parameter: Parameter$users$unfollow;
}
export type ResponseContentType$users$list$gpg$keys$for$authenticated$user =
  keyof Response$users$list$gpg$keys$for$authenticated$user$Status$200;
export interface Params$users$list$gpg$keys$for$authenticated$user {
  parameter: Parameter$users$list$gpg$keys$for$authenticated$user;
}
export type RequestContentType$users$create$gpg$key$for$authenticated$user = keyof RequestBody$users$create$gpg$key$for$authenticated$user;
export type ResponseContentType$users$create$gpg$key$for$authenticated$user =
  keyof Response$users$create$gpg$key$for$authenticated$user$Status$201;
export interface Params$users$create$gpg$key$for$authenticated$user {
  requestBody: RequestBody$users$create$gpg$key$for$authenticated$user["application/json"];
}
export type ResponseContentType$users$get$gpg$key$for$authenticated$user = keyof Response$users$get$gpg$key$for$authenticated$user$Status$200;
export interface Params$users$get$gpg$key$for$authenticated$user {
  parameter: Parameter$users$get$gpg$key$for$authenticated$user;
}
export interface Params$users$delete$gpg$key$for$authenticated$user {
  parameter: Parameter$users$delete$gpg$key$for$authenticated$user;
}
export type ResponseContentType$apps$list$installations$for$authenticated$user =
  keyof Response$apps$list$installations$for$authenticated$user$Status$200;
export interface Params$apps$list$installations$for$authenticated$user {
  parameter: Parameter$apps$list$installations$for$authenticated$user;
}
export type ResponseContentType$apps$list$installation$repos$for$authenticated$user =
  keyof Response$apps$list$installation$repos$for$authenticated$user$Status$200;
export interface Params$apps$list$installation$repos$for$authenticated$user {
  parameter: Parameter$apps$list$installation$repos$for$authenticated$user;
}
export interface Params$apps$add$repo$to$installation$for$authenticated$user {
  parameter: Parameter$apps$add$repo$to$installation$for$authenticated$user;
}
export interface Params$apps$remove$repo$from$installation$for$authenticated$user {
  parameter: Parameter$apps$remove$repo$from$installation$for$authenticated$user;
}
export type ResponseContentType$issues$list$for$authenticated$user = keyof Response$issues$list$for$authenticated$user$Status$200;
export interface Params$issues$list$for$authenticated$user {
  parameter: Parameter$issues$list$for$authenticated$user;
}
export type ResponseContentType$users$list$public$ssh$keys$for$authenticated$user =
  keyof Response$users$list$public$ssh$keys$for$authenticated$user$Status$200;
export interface Params$users$list$public$ssh$keys$for$authenticated$user {
  parameter: Parameter$users$list$public$ssh$keys$for$authenticated$user;
}
export type RequestContentType$users$create$public$ssh$key$for$authenticated$user =
  keyof RequestBody$users$create$public$ssh$key$for$authenticated$user;
export type ResponseContentType$users$create$public$ssh$key$for$authenticated$user =
  keyof Response$users$create$public$ssh$key$for$authenticated$user$Status$201;
export interface Params$users$create$public$ssh$key$for$authenticated$user {
  requestBody: RequestBody$users$create$public$ssh$key$for$authenticated$user["application/json"];
}
export type ResponseContentType$users$get$public$ssh$key$for$authenticated$user =
  keyof Response$users$get$public$ssh$key$for$authenticated$user$Status$200;
export interface Params$users$get$public$ssh$key$for$authenticated$user {
  parameter: Parameter$users$get$public$ssh$key$for$authenticated$user;
}
export interface Params$users$delete$public$ssh$key$for$authenticated$user {
  parameter: Parameter$users$delete$public$ssh$key$for$authenticated$user;
}
export type ResponseContentType$orgs$list$memberships$for$authenticated$user =
  keyof Response$orgs$list$memberships$for$authenticated$user$Status$200;
export interface Params$orgs$list$memberships$for$authenticated$user {
  parameter: Parameter$orgs$list$memberships$for$authenticated$user;
}
export type ResponseContentType$orgs$get$membership$for$authenticated$user =
  keyof Response$orgs$get$membership$for$authenticated$user$Status$200;
export interface Params$orgs$get$membership$for$authenticated$user {
  parameter: Parameter$orgs$get$membership$for$authenticated$user;
}
export type RequestContentType$orgs$update$membership$for$authenticated$user = keyof RequestBody$orgs$update$membership$for$authenticated$user;
export type ResponseContentType$orgs$update$membership$for$authenticated$user =
  keyof Response$orgs$update$membership$for$authenticated$user$Status$200;
export interface Params$orgs$update$membership$for$authenticated$user {
  parameter: Parameter$orgs$update$membership$for$authenticated$user;
  requestBody: RequestBody$orgs$update$membership$for$authenticated$user["application/json"];
}
export type ResponseContentType$migrations$list$for$authenticated$user = keyof Response$migrations$list$for$authenticated$user$Status$200;
export interface Params$migrations$list$for$authenticated$user {
  parameter: Parameter$migrations$list$for$authenticated$user;
}
export type RequestContentType$migrations$start$for$authenticated$user = keyof RequestBody$migrations$start$for$authenticated$user;
export type ResponseContentType$migrations$start$for$authenticated$user = keyof Response$migrations$start$for$authenticated$user$Status$201;
export interface Params$migrations$start$for$authenticated$user {
  requestBody: RequestBody$migrations$start$for$authenticated$user["application/json"];
}
export interface Params$migrations$get$archive$for$authenticated$user {
  parameter: Parameter$migrations$get$archive$for$authenticated$user;
}
export type ResponseContentType$migrations$list$repos$for$authenticated$user =
  keyof Response$migrations$list$repos$for$authenticated$user$Status$200;
export interface Params$migrations$list$repos$for$authenticated$user {
  parameter: Parameter$migrations$list$repos$for$authenticated$user;
}
export type ResponseContentType$orgs$list$for$authenticated$user = keyof Response$orgs$list$for$authenticated$user$Status$200;
export interface Params$orgs$list$for$authenticated$user {
  parameter: Parameter$orgs$list$for$authenticated$user;
}
export type RequestContentType$projects$create$for$authenticated$user = keyof RequestBody$projects$create$for$authenticated$user;
export type ResponseContentType$projects$create$for$authenticated$user = keyof Response$projects$create$for$authenticated$user$Status$201;
export interface Params$projects$create$for$authenticated$user {
  requestBody: RequestBody$projects$create$for$authenticated$user["application/json"];
}
export type ResponseContentType$users$list$public$emails$for$authenticated$user =
  keyof Response$users$list$public$emails$for$authenticated$user$Status$200;
export interface Params$users$list$public$emails$for$authenticated$user {
  parameter: Parameter$users$list$public$emails$for$authenticated$user;
}
export type ResponseContentType$repos$list$for$authenticated$user = keyof Response$repos$list$for$authenticated$user$Status$200;
export interface Params$repos$list$for$authenticated$user {
  parameter: Parameter$repos$list$for$authenticated$user;
}
export type RequestContentType$repos$create$for$authenticated$user = keyof RequestBody$repos$create$for$authenticated$user;
export type ResponseContentType$repos$create$for$authenticated$user = keyof Response$repos$create$for$authenticated$user$Status$201;
export interface Params$repos$create$for$authenticated$user {
  requestBody: RequestBody$repos$create$for$authenticated$user["application/json"];
}
export type ResponseContentType$repos$list$invitations$for$authenticated$user =
  keyof Response$repos$list$invitations$for$authenticated$user$Status$200;
export interface Params$repos$list$invitations$for$authenticated$user {
  parameter: Parameter$repos$list$invitations$for$authenticated$user;
}
export interface Params$repos$decline$invitation$for$authenticated$user {
  parameter: Parameter$repos$decline$invitation$for$authenticated$user;
}
export interface Params$repos$accept$invitation$for$authenticated$user {
  parameter: Parameter$repos$accept$invitation$for$authenticated$user;
}
export type ResponseContentType$activity$list$repos$starred$by$authenticated$user =
  keyof Response$activity$list$repos$starred$by$authenticated$user$Status$200;
export interface Params$activity$list$repos$starred$by$authenticated$user<
  U extends ResponseContentType$activity$list$repos$starred$by$authenticated$user,
> {
  headers: {
    Accept: U;
  };
  parameter: Parameter$activity$list$repos$starred$by$authenticated$user;
}
export interface Params$activity$check$repo$is$starred$by$authenticated$user {
  parameter: Parameter$activity$check$repo$is$starred$by$authenticated$user;
}
export interface Params$activity$star$repo$for$authenticated$user {
  parameter: Parameter$activity$star$repo$for$authenticated$user;
}
export interface Params$activity$unstar$repo$for$authenticated$user {
  parameter: Parameter$activity$unstar$repo$for$authenticated$user;
}
export type ResponseContentType$activity$list$watched$repos$for$authenticated$user =
  keyof Response$activity$list$watched$repos$for$authenticated$user$Status$200;
export interface Params$activity$list$watched$repos$for$authenticated$user {
  parameter: Parameter$activity$list$watched$repos$for$authenticated$user;
}
export type ResponseContentType$teams$list$for$authenticated$user = keyof Response$teams$list$for$authenticated$user$Status$200;
export interface Params$teams$list$for$authenticated$user {
  parameter: Parameter$teams$list$for$authenticated$user;
}
export type ResponseContentType$users$list = keyof Response$users$list$Status$200;
export interface Params$users$list {
  parameter: Parameter$users$list;
}
export type ResponseContentType$users$get$by$username = keyof Response$users$get$by$username$Status$200;
export interface Params$users$get$by$username {
  parameter: Parameter$users$get$by$username;
}
export type ResponseContentType$activity$list$events$for$authenticated$user =
  keyof Response$activity$list$events$for$authenticated$user$Status$200;
export interface Params$activity$list$events$for$authenticated$user {
  parameter: Parameter$activity$list$events$for$authenticated$user;
}
export type ResponseContentType$activity$list$org$events$for$authenticated$user =
  keyof Response$activity$list$org$events$for$authenticated$user$Status$200;
export interface Params$activity$list$org$events$for$authenticated$user {
  parameter: Parameter$activity$list$org$events$for$authenticated$user;
}
export type ResponseContentType$activity$list$public$events$for$user = keyof Response$activity$list$public$events$for$user$Status$200;
export interface Params$activity$list$public$events$for$user {
  parameter: Parameter$activity$list$public$events$for$user;
}
export type ResponseContentType$users$list$followers$for$user = keyof Response$users$list$followers$for$user$Status$200;
export interface Params$users$list$followers$for$user {
  parameter: Parameter$users$list$followers$for$user;
}
export type ResponseContentType$users$list$following$for$user = keyof Response$users$list$following$for$user$Status$200;
export interface Params$users$list$following$for$user {
  parameter: Parameter$users$list$following$for$user;
}
export interface Params$users$check$following$for$user {
  parameter: Parameter$users$check$following$for$user;
}
export type ResponseContentType$gists$list$for$user = keyof Response$gists$list$for$user$Status$200;
export interface Params$gists$list$for$user {
  parameter: Parameter$gists$list$for$user;
}
export type ResponseContentType$users$list$gpg$keys$for$user = keyof Response$users$list$gpg$keys$for$user$Status$200;
export interface Params$users$list$gpg$keys$for$user {
  parameter: Parameter$users$list$gpg$keys$for$user;
}
export type ResponseContentType$users$get$context$for$user = keyof Response$users$get$context$for$user$Status$200;
export interface Params$users$get$context$for$user {
  parameter: Parameter$users$get$context$for$user;
}
export type ResponseContentType$apps$get$user$installation = keyof Response$apps$get$user$installation$Status$200;
export interface Params$apps$get$user$installation {
  parameter: Parameter$apps$get$user$installation;
}
export type ResponseContentType$users$list$public$keys$for$user = keyof Response$users$list$public$keys$for$user$Status$200;
export interface Params$users$list$public$keys$for$user {
  parameter: Parameter$users$list$public$keys$for$user;
}
export type ResponseContentType$orgs$list$for$user = keyof Response$orgs$list$for$user$Status$200;
export interface Params$orgs$list$for$user {
  parameter: Parameter$orgs$list$for$user;
}
export type ResponseContentType$projects$list$for$user = keyof Response$projects$list$for$user$Status$200;
export interface Params$projects$list$for$user {
  parameter: Parameter$projects$list$for$user;
}
export type ResponseContentType$activity$list$received$events$for$user = keyof Response$activity$list$received$events$for$user$Status$200;
export interface Params$activity$list$received$events$for$user {
  parameter: Parameter$activity$list$received$events$for$user;
}
export type ResponseContentType$activity$list$received$public$events$for$user =
  keyof Response$activity$list$received$public$events$for$user$Status$200;
export interface Params$activity$list$received$public$events$for$user {
  parameter: Parameter$activity$list$received$public$events$for$user;
}
export type ResponseContentType$repos$list$for$user = keyof Response$repos$list$for$user$Status$200;
export interface Params$repos$list$for$user {
  parameter: Parameter$repos$list$for$user;
}
export interface Params$enterprise$admin$promote$user$to$be$site$administrator {
  parameter: Parameter$enterprise$admin$promote$user$to$be$site$administrator;
}
export interface Params$enterprise$admin$demote$site$administrator {
  parameter: Parameter$enterprise$admin$demote$site$administrator;
}
export type ResponseContentType$activity$list$repos$starred$by$user = keyof Response$activity$list$repos$starred$by$user$Status$200;
export interface Params$activity$list$repos$starred$by$user {
  parameter: Parameter$activity$list$repos$starred$by$user;
}
export type ResponseContentType$activity$list$repos$watched$by$user = keyof Response$activity$list$repos$watched$by$user$Status$200;
export interface Params$activity$list$repos$watched$by$user {
  parameter: Parameter$activity$list$repos$watched$by$user;
}
export type RequestContentType$enterprise$admin$suspend$user = keyof RequestBody$enterprise$admin$suspend$user;
export interface Params$enterprise$admin$suspend$user {
  parameter: Parameter$enterprise$admin$suspend$user;
  requestBody: RequestBody$enterprise$admin$suspend$user["application/json"];
}
export type RequestContentType$enterprise$admin$unsuspend$user = keyof RequestBody$enterprise$admin$unsuspend$user;
export interface Params$enterprise$admin$unsuspend$user {
  parameter: Parameter$enterprise$admin$unsuspend$user;
  requestBody: RequestBody$enterprise$admin$unsuspend$user["application/json"];
}
export type ResponseContentType$meta$get$zen = keyof Response$meta$get$zen$Status$200;
export type HttpMethod = "GET" | "PUT" | "POST" | "DELETE" | "OPTIONS" | "HEAD" | "PATCH" | "TRACE";
export interface ObjectLike {
  [key: string]: any;
}
export interface QueryParameter {
  value: any;
  style?: "form" | "spaceDelimited" | "pipeDelimited" | "deepObject";
  explode: boolean;
}
export interface QueryParameters {
  [key: string]: QueryParameter;
}
export type SuccessResponses =
  | Response$meta$root$Status$200
  | Response$enterprise$admin$list$global$webhooks$Status$200
  | Response$enterprise$admin$create$global$webhook$Status$201
  | Response$enterprise$admin$get$global$webhook$Status$200
  | Response$enterprise$admin$update$global$webhook$Status$200
  | Response$enterprise$admin$list$public$keys$Status$200
  | Response$enterprise$admin$update$ldap$mapping$for$team$Status$200
  | Response$enterprise$admin$sync$ldap$mapping$for$team$Status$201
  | Response$enterprise$admin$update$ldap$mapping$for$user$Status$200
  | Response$enterprise$admin$sync$ldap$mapping$for$user$Status$201
  | Response$enterprise$admin$create$org$Status$201
  | Response$enterprise$admin$update$org$name$Status$202
  | Response$enterprise$admin$list$pre$receive$environments$Status$200
  | Response$enterprise$admin$create$pre$receive$environment$Status$201
  | Response$enterprise$admin$get$pre$receive$environment$Status$200
  | Response$enterprise$admin$update$pre$receive$environment$Status$200
  | Response$enterprise$admin$start$pre$receive$environment$download$Status$202
  | Response$enterprise$admin$get$download$status$for$pre$receive$environment$Status$200
  | Response$enterprise$admin$list$pre$receive$hooks$Status$200
  | Response$enterprise$admin$create$pre$receive$hook$Status$201
  | Response$enterprise$admin$get$pre$receive$hook$Status$200
  | Response$enterprise$admin$update$pre$receive$hook$Status$200
  | Response$enterprise$admin$list$personal$access$tokens$Status$200
  | Response$enterprise$admin$create$user$Status$201
  | Response$enterprise$admin$update$username$for$user$Status$202
  | Response$enterprise$admin$create$impersonation$o$auth$token$Status$201
  | Response$apps$get$authenticated$Status$200
  | Response$apps$create$from$manifest$Status$201
  | Response$apps$get$webhook$config$for$app$Status$200
  | Response$apps$update$webhook$config$for$app$Status$200
  | Response$apps$list$webhook$deliveries$Status$200
  | Response$apps$get$webhook$delivery$Status$200
  | Response$apps$redeliver$webhook$delivery$Status$202
  | Response$apps$list$installations$Status$200
  | Response$apps$get$installation$Status$200
  | Response$apps$create$installation$access$token$Status$201
  | Response$oauth$authorizations$list$grants$Status$200
  | Response$oauth$authorizations$get$grant$Status$200
  | Response$apps$check$token$Status$200
  | Response$apps$reset$token$Status$200
  | Response$apps$scope$token$Status$200
  | Response$apps$get$by$slug$Status$200
  | Response$oauth$authorizations$list$authorizations$Status$200
  | Response$oauth$authorizations$create$authorization$Status$201
  | Response$oauth$authorizations$get$or$create$authorization$for$app$Status$200
  | Response$oauth$authorizations$get$or$create$authorization$for$app$Status$201
  | Response$oauth$authorizations$get$or$create$authorization$for$app$and$fingerprint$Status$200
  | Response$oauth$authorizations$get$or$create$authorization$for$app$and$fingerprint$Status$201
  | Response$oauth$authorizations$get$authorization$Status$200
  | Response$oauth$authorizations$update$authorization$Status$200
  | Response$codes$of$conduct$get$all$codes$of$conduct$Status$200
  | Response$codes$of$conduct$get$conduct$code$Status$200
  | Response$emojis$get$Status$200
  | Response$enterprise$admin$get$announcement$Status$200
  | Response$enterprise$admin$set$announcement$Status$200
  | Response$enterprise$admin$get$license$information$Status$200
  | Response$enterprise$admin$get$all$stats$Status$200
  | Response$enterprise$admin$get$comment$stats$Status$200
  | Response$enterprise$admin$get$gist$stats$Status$200
  | Response$enterprise$admin$get$hooks$stats$Status$200
  | Response$enterprise$admin$get$issue$stats$Status$200
  | Response$enterprise$admin$get$milestone$stats$Status$200
  | Response$enterprise$admin$get$org$stats$Status$200
  | Response$enterprise$admin$get$pages$stats$Status$200
  | Response$enterprise$admin$get$pull$request$stats$Status$200
  | Response$enterprise$admin$get$repo$stats$Status$200
  | Response$enterprise$admin$get$user$stats$Status$200
  | Response$enterprise$admin$get$github$actions$permissions$enterprise$Status$200
  | Response$enterprise$admin$list$selected$organizations$enabled$github$actions$enterprise$Status$200
  | Response$enterprise$admin$get$allowed$actions$enterprise$Status$200
  | Response$enterprise$admin$list$self$hosted$runner$groups$for$enterprise$Status$200
  | Response$enterprise$admin$create$self$hosted$runner$group$for$enterprise$Status$201
  | Response$enterprise$admin$get$self$hosted$runner$group$for$enterprise$Status$200
  | Response$enterprise$admin$update$self$hosted$runner$group$for$enterprise$Status$200
  | Response$enterprise$admin$list$org$access$to$self$hosted$runner$group$in$enterprise$Status$200
  | Response$enterprise$admin$list$self$hosted$runners$in$group$for$enterprise$Status$200
  | Response$enterprise$admin$list$self$hosted$runners$for$enterprise$Status$200
  | Response$enterprise$admin$list$runner$applications$for$enterprise$Status$200
  | Response$enterprise$admin$create$registration$token$for$enterprise$Status$201
  | Response$enterprise$admin$create$remove$token$for$enterprise$Status$201
  | Response$enterprise$admin$get$self$hosted$runner$for$enterprise$Status$200
  | Response$enterprise$admin$list$labels$for$self$hosted$runner$for$enterprise$Status$200
  | Response$enterprise$admin$set$custom$labels$for$self$hosted$runner$for$enterprise$Status$200
  | Response$enterprise$admin$add$custom$labels$to$self$hosted$runner$for$enterprise$Status$200
  | Response$enterprise$admin$remove$all$custom$labels$from$self$hosted$runner$for$enterprise$Status$200
  | Response$enterprise$admin$remove$custom$label$from$self$hosted$runner$for$enterprise$Status$200
  | Response$enterprise$admin$get$audit$log$Status$200
  | Response$secret$scanning$list$alerts$for$enterprise$Status$200
  | Response$billing$get$github$advanced$security$billing$ghe$Status$200
  | Response$activity$list$public$events$Status$200
  | Response$activity$get$feeds$Status$200
  | Response$gists$list$Status$200
  | Response$gists$create$Status$201
  | Response$gists$list$public$Status$200
  | Response$gists$list$starred$Status$200
  | Response$gists$get$Status$200
  | Response$gists$update$Status$200
  | Response$gists$list$comments$Status$200
  | Response$gists$create$comment$Status$201
  | Response$gists$get$comment$Status$200
  | Response$gists$update$comment$Status$200
  | Response$gists$list$commits$Status$200
  | Response$gists$list$forks$Status$200
  | Response$gists$fork$Status$201
  | Response$gists$get$revision$Status$200
  | Response$gitignore$get$all$templates$Status$200
  | Response$gitignore$get$template$Status$200
  | Response$apps$list$repos$accessible$to$installation$Status$200
  | Response$issues$list$Status$200
  | Response$licenses$get$all$commonly$used$Status$200
  | Response$licenses$get$Status$200
  | Response$markdown$render$Status$200
  | Response$markdown$render$raw$Status$200
  | Response$meta$get$Status$200
  | Response$activity$list$public$events$for$repo$network$Status$200
  | Response$activity$list$notifications$for$authenticated$user$Status$200
  | Response$activity$mark$notifications$as$read$Status$202
  | Response$activity$get$thread$Status$200
  | Response$activity$get$thread$subscription$for$authenticated$user$Status$200
  | Response$activity$set$thread$subscription$Status$200
  | Response$meta$get$octocat$Status$200
  | Response$orgs$list$Status$200
  | Response$orgs$list$custom$roles$Status$200
  | Response$orgs$get$Status$200
  | Response$orgs$update$Status$200
  | Response$actions$get$github$actions$permissions$organization$Status$200
  | Response$actions$list$selected$repositories$enabled$github$actions$organization$Status$200
  | Response$actions$get$allowed$actions$organization$Status$200
  | Response$actions$list$self$hosted$runner$groups$for$org$Status$200
  | Response$actions$create$self$hosted$runner$group$for$org$Status$201
  | Response$actions$get$self$hosted$runner$group$for$org$Status$200
  | Response$actions$update$self$hosted$runner$group$for$org$Status$200
  | Response$actions$list$repo$access$to$self$hosted$runner$group$in$org$Status$200
  | Response$actions$list$self$hosted$runners$in$group$for$org$Status$200
  | Response$actions$list$self$hosted$runners$for$org$Status$200
  | Response$actions$list$runner$applications$for$org$Status$200
  | Response$actions$create$registration$token$for$org$Status$201
  | Response$actions$create$remove$token$for$org$Status$201
  | Response$actions$get$self$hosted$runner$for$org$Status$200
  | Response$actions$list$labels$for$self$hosted$runner$for$org$Status$200
  | Response$actions$set$custom$labels$for$self$hosted$runner$for$org$Status$200
  | Response$actions$add$custom$labels$to$self$hosted$runner$for$org$Status$200
  | Response$actions$remove$all$custom$labels$from$self$hosted$runner$for$org$Status$200
  | Response$actions$remove$custom$label$from$self$hosted$runner$for$org$Status$200
  | Response$actions$list$org$secrets$Status$200
  | Response$actions$get$org$public$key$Status$200
  | Response$actions$get$org$secret$Status$200
  | Response$actions$create$or$update$org$secret$Status$201
  | Response$actions$list$selected$repos$for$org$secret$Status$200
  | Response$orgs$get$audit$log$Status$200
  | Response$dependabot$list$org$secrets$Status$200
  | Response$dependabot$get$org$public$key$Status$200
  | Response$dependabot$get$org$secret$Status$200
  | Response$dependabot$create$or$update$org$secret$Status$201
  | Response$dependabot$list$selected$repos$for$org$secret$Status$200
  | Response$activity$list$public$org$events$Status$200
  | Response$orgs$list$webhooks$Status$200
  | Response$orgs$create$webhook$Status$201
  | Response$orgs$get$webhook$Status$200
  | Response$orgs$update$webhook$Status$200
  | Response$orgs$get$webhook$config$for$org$Status$200
  | Response$orgs$update$webhook$config$for$org$Status$200
  | Response$orgs$list$webhook$deliveries$Status$200
  | Response$orgs$get$webhook$delivery$Status$200
  | Response$orgs$redeliver$webhook$delivery$Status$202
  | Response$apps$get$org$installation$Status$200
  | Response$orgs$list$app$installations$Status$200
  | Response$issues$list$for$org$Status$200
  | Response$orgs$list$members$Status$200
  | Response$orgs$get$membership$for$user$Status$200
  | Response$orgs$set$membership$for$user$Status$200
  | Response$migrations$list$for$org$Status$200
  | Response$migrations$start$for$org$Status$201
  | Response$migrations$get$status$for$org$Status$200
  | Response$orgs$list$outside$collaborators$Status$200
  | Response$orgs$convert$member$to$outside$collaborator$Status$202
  | Response$enterprise$admin$list$pre$receive$hooks$for$org$Status$200
  | Response$enterprise$admin$get$pre$receive$hook$for$org$Status$200
  | Response$enterprise$admin$remove$pre$receive$hook$enforcement$for$org$Status$200
  | Response$enterprise$admin$update$pre$receive$hook$enforcement$for$org$Status$200
  | Response$projects$list$for$org$Status$200
  | Response$projects$create$for$org$Status$201
  | Response$orgs$list$public$members$Status$200
  | Response$repos$list$for$org$Status$200
  | Response$repos$create$in$org$Status$201
  | Response$secret$scanning$list$alerts$for$org$Status$200
  | Response$billing$get$github$advanced$security$billing$org$Status$200
  | Response$teams$list$Status$200
  | Response$teams$create$Status$201
  | Response$teams$get$by$name$Status$200
  | Response$teams$update$in$org$Status$201
  | Response$teams$list$discussions$in$org$Status$200
  | Response$teams$create$discussion$in$org$Status$201
  | Response$teams$get$discussion$in$org$Status$200
  | Response$teams$update$discussion$in$org$Status$200
  | Response$teams$list$discussion$comments$in$org$Status$200
  | Response$teams$create$discussion$comment$in$org$Status$201
  | Response$teams$get$discussion$comment$in$org$Status$200
  | Response$teams$update$discussion$comment$in$org$Status$200
  | Response$reactions$list$for$team$discussion$comment$in$org$Status$200
  | Response$reactions$create$for$team$discussion$comment$in$org$Status$200
  | Response$reactions$create$for$team$discussion$comment$in$org$Status$201
  | Response$reactions$list$for$team$discussion$in$org$Status$200
  | Response$reactions$create$for$team$discussion$in$org$Status$200
  | Response$reactions$create$for$team$discussion$in$org$Status$201
  | Response$teams$list$members$in$org$Status$200
  | Response$teams$get$membership$for$user$in$org$Status$200
  | Response$teams$add$or$update$membership$for$user$in$org$Status$200
  | Response$teams$list$projects$in$org$Status$200
  | Response$teams$check$permissions$for$project$in$org$Status$200
  | Response$teams$list$repos$in$org$Status$200
  | Response$teams$check$permissions$for$repo$in$org$Status$200
  | Response$teams$list$child$in$org$Status$200
  | Response$projects$get$card$Status$200
  | Response$projects$update$card$Status$200
  | Response$projects$move$card$Status$201
  | Response$projects$get$column$Status$200
  | Response$projects$update$column$Status$200
  | Response$projects$list$cards$Status$200
  | Response$projects$create$card$Status$201
  | Response$projects$move$column$Status$201
  | Response$projects$get$Status$200
  | Response$projects$update$Status$200
  | Response$projects$list$collaborators$Status$200
  | Response$projects$get$permission$for$user$Status$200
  | Response$projects$list$columns$Status$200
  | Response$projects$create$column$Status$201
  | Response$rate$limit$get$Status$200
  | Response$repos$get$Status$200
  | Response$repos$update$Status$200
  | Response$actions$list$artifacts$for$repo$Status$200
  | Response$actions$get$artifact$Status$200
  | Response$actions$get$job$for$workflow$run$Status$200
  | Response$actions$get$github$actions$permissions$repository$Status$200
  | Response$actions$get$allowed$actions$repository$Status$200
  | Response$actions$list$self$hosted$runners$for$repo$Status$200
  | Response$actions$list$runner$applications$for$repo$Status$200
  | Response$actions$create$registration$token$for$repo$Status$201
  | Response$actions$create$remove$token$for$repo$Status$201
  | Response$actions$get$self$hosted$runner$for$repo$Status$200
  | Response$actions$list$labels$for$self$hosted$runner$for$repo$Status$200
  | Response$actions$set$custom$labels$for$self$hosted$runner$for$repo$Status$200
  | Response$actions$add$custom$labels$to$self$hosted$runner$for$repo$Status$200
  | Response$actions$remove$all$custom$labels$from$self$hosted$runner$for$repo$Status$200
  | Response$actions$remove$custom$label$from$self$hosted$runner$for$repo$Status$200
  | Response$actions$list$workflow$runs$for$repo$Status$200
  | Response$actions$get$workflow$run$Status$200
  | Response$actions$get$reviews$for$run$Status$200
  | Response$actions$list$workflow$run$artifacts$Status$200
  | Response$actions$cancel$workflow$run$Status$202
  | Response$actions$list$jobs$for$workflow$run$Status$200
  | Response$actions$get$pending$deployments$for$run$Status$200
  | Response$actions$review$pending$deployments$for$run$Status$200
  | Response$actions$re$run$workflow$Status$201
  | Response$actions$list$repo$secrets$Status$200
  | Response$actions$get$repo$public$key$Status$200
  | Response$actions$get$repo$secret$Status$200
  | Response$actions$create$or$update$repo$secret$Status$201
  | Response$actions$list$repo$workflows$Status$200
  | Response$actions$get$workflow$Status$200
  | Response$actions$list$workflow$runs$Status$200
  | Response$issues$list$assignees$Status$200
  | Response$repos$list$autolinks$Status$200
  | Response$repos$create$autolink$Status$201
  | Response$repos$get$autolink$Status$200
  | Response$repos$list$branches$Status$200
  | Response$repos$get$branch$Status$200
  | Response$repos$get$branch$protection$Status$200
  | Response$repos$update$branch$protection$Status$200
  | Response$repos$get$admin$branch$protection$Status$200
  | Response$repos$set$admin$branch$protection$Status$200
  | Response$repos$get$pull$request$review$protection$Status$200
  | Response$repos$update$pull$request$review$protection$Status$200
  | Response$repos$get$commit$signature$protection$Status$200
  | Response$repos$create$commit$signature$protection$Status$200
  | Response$repos$get$status$checks$protection$Status$200
  | Response$repos$update$status$check$protection$Status$200
  | Response$repos$get$all$status$check$contexts$Status$200
  | Response$repos$set$status$check$contexts$Status$200
  | Response$repos$add$status$check$contexts$Status$200
  | Response$repos$remove$status$check$contexts$Status$200
  | Response$repos$get$access$restrictions$Status$200
  | Response$repos$get$apps$with$access$to$protected$branch$Status$200
  | Response$repos$set$app$access$restrictions$Status$200
  | Response$repos$add$app$access$restrictions$Status$200
  | Response$repos$remove$app$access$restrictions$Status$200
  | Response$repos$get$teams$with$access$to$protected$branch$Status$200
  | Response$repos$set$team$access$restrictions$Status$200
  | Response$repos$add$team$access$restrictions$Status$200
  | Response$repos$remove$team$access$restrictions$Status$200
  | Response$repos$get$users$with$access$to$protected$branch$Status$200
  | Response$repos$set$user$access$restrictions$Status$200
  | Response$repos$add$user$access$restrictions$Status$200
  | Response$repos$remove$user$access$restrictions$Status$200
  | Response$repos$rename$branch$Status$201
  | Response$checks$create$Status$201
  | Response$checks$get$Status$200
  | Response$checks$update$Status$200
  | Response$checks$list$annotations$Status$200
  | Response$checks$rerequest$run$Status$201
  | Response$checks$create$suite$Status$200
  | Response$checks$create$suite$Status$201
  | Response$checks$set$suites$preferences$Status$200
  | Response$checks$get$suite$Status$200
  | Response$checks$list$for$suite$Status$200
  | Response$checks$rerequest$suite$Status$201
  | Response$code$scanning$list$alerts$for$repo$Status$200
  | Response$code$scanning$get$alert$Status$200
  | Response$code$scanning$update$alert$Status$200
  | Response$code$scanning$list$alert$instances$Status$200
  | Response$code$scanning$list$recent$analyses$Status$200
  | Response$code$scanning$get$analysis$Status$200
  | Response$code$scanning$delete$analysis$Status$200
  | Response$code$scanning$upload$sarif$Status$202
  | Response$code$scanning$get$sarif$Status$200
  | Response$repos$list$collaborators$Status$200
  | Response$repos$add$collaborator$Status$201
  | Response$repos$get$collaborator$permission$level$Status$200
  | Response$repos$list$commit$comments$for$repo$Status$200
  | Response$repos$get$commit$comment$Status$200
  | Response$repos$update$commit$comment$Status$200
  | Response$reactions$list$for$commit$comment$Status$200
  | Response$reactions$create$for$commit$comment$Status$200
  | Response$reactions$create$for$commit$comment$Status$201
  | Response$repos$list$commits$Status$200
  | Response$repos$list$branches$for$head$commit$Status$200
  | Response$repos$list$comments$for$commit$Status$200
  | Response$repos$create$commit$comment$Status$201
  | Response$repos$list$pull$requests$associated$with$commit$Status$200
  | Response$repos$get$commit$Status$200
  | Response$checks$list$for$ref$Status$200
  | Response$checks$list$suites$for$ref$Status$200
  | Response$repos$get$combined$status$for$ref$Status$200
  | Response$repos$list$commit$statuses$for$ref$Status$200
  | Response$repos$compare$commits$Status$200
  | Response$repos$get$content$Status$200
  | Response$repos$create$or$update$file$contents$Status$200
  | Response$repos$create$or$update$file$contents$Status$201
  | Response$repos$delete$file$Status$200
  | Response$repos$list$contributors$Status$200
  | Response$dependabot$list$repo$secrets$Status$200
  | Response$dependabot$get$repo$public$key$Status$200
  | Response$dependabot$get$repo$secret$Status$200
  | Response$dependabot$create$or$update$repo$secret$Status$201
  | Response$repos$list$deployments$Status$200
  | Response$repos$create$deployment$Status$201
  | Response$repos$create$deployment$Status$202
  | Response$repos$get$deployment$Status$200
  | Response$repos$list$deployment$statuses$Status$200
  | Response$repos$create$deployment$status$Status$201
  | Response$repos$get$deployment$status$Status$200
  | Response$repos$get$all$environments$Status$200
  | Response$repos$get$environment$Status$200
  | Response$repos$create$or$update$environment$Status$200
  | Response$activity$list$repo$events$Status$200
  | Response$repos$list$forks$Status$200
  | Response$repos$create$fork$Status$202
  | Response$git$create$blob$Status$201
  | Response$git$get$blob$Status$200
  | Response$git$create$commit$Status$201
  | Response$git$get$commit$Status$200
  | Response$git$list$matching$refs$Status$200
  | Response$git$get$ref$Status$200
  | Response$git$create$ref$Status$201
  | Response$git$update$ref$Status$200
  | Response$git$create$tag$Status$201
  | Response$git$get$tag$Status$200
  | Response$git$create$tree$Status$201
  | Response$git$get$tree$Status$200
  | Response$repos$list$webhooks$Status$200
  | Response$repos$create$webhook$Status$201
  | Response$repos$get$webhook$Status$200
  | Response$repos$update$webhook$Status$200
  | Response$repos$get$webhook$config$for$repo$Status$200
  | Response$repos$update$webhook$config$for$repo$Status$200
  | Response$repos$list$webhook$deliveries$Status$200
  | Response$repos$get$webhook$delivery$Status$200
  | Response$repos$redeliver$webhook$delivery$Status$202
  | Response$apps$get$repo$installation$Status$200
  | Response$repos$list$invitations$Status$200
  | Response$repos$update$invitation$Status$200
  | Response$issues$list$for$repo$Status$200
  | Response$issues$create$Status$201
  | Response$issues$list$comments$for$repo$Status$200
  | Response$issues$get$comment$Status$200
  | Response$issues$update$comment$Status$200
  | Response$reactions$list$for$issue$comment$Status$200
  | Response$reactions$create$for$issue$comment$Status$200
  | Response$reactions$create$for$issue$comment$Status$201
  | Response$issues$list$events$for$repo$Status$200
  | Response$issues$get$event$Status$200
  | Response$issues$get$Status$200
  | Response$issues$update$Status$200
  | Response$issues$add$assignees$Status$201
  | Response$issues$remove$assignees$Status$200
  | Response$issues$list$comments$Status$200
  | Response$issues$create$comment$Status$201
  | Response$issues$list$events$Status$200
  | Response$issues$list$labels$on$issue$Status$200
  | Response$issues$set$labels$Status$200
  | Response$issues$add$labels$Status$200
  | Response$issues$remove$label$Status$200
  | Response$reactions$list$for$issue$Status$200
  | Response$reactions$create$for$issue$Status$200
  | Response$reactions$create$for$issue$Status$201
  | Response$issues$list$events$for$timeline$Status$200
  | Response$repos$list$deploy$keys$Status$200
  | Response$repos$create$deploy$key$Status$201
  | Response$repos$get$deploy$key$Status$200
  | Response$issues$list$labels$for$repo$Status$200
  | Response$issues$create$label$Status$201
  | Response$issues$get$label$Status$200
  | Response$issues$update$label$Status$200
  | Response$repos$list$languages$Status$200
  | Response$repos$enable$lfs$for$repo$Status$202
  | Response$licenses$get$for$repo$Status$200
  | Response$repos$merge$upstream$Status$200
  | Response$repos$merge$Status$201
  | Response$issues$list$milestones$Status$200
  | Response$issues$create$milestone$Status$201
  | Response$issues$get$milestone$Status$200
  | Response$issues$update$milestone$Status$200
  | Response$issues$list$labels$for$milestone$Status$200
  | Response$activity$list$repo$notifications$for$authenticated$user$Status$200
  | Response$activity$mark$repo$notifications$as$read$Status$202
  | Response$repos$get$pages$Status$200
  | Response$repos$create$pages$site$Status$201
  | Response$repos$list$pages$builds$Status$200
  | Response$repos$request$pages$build$Status$201
  | Response$repos$get$latest$pages$build$Status$200
  | Response$repos$get$pages$build$Status$200
  | Response$enterprise$admin$list$pre$receive$hooks$for$repo$Status$200
  | Response$enterprise$admin$get$pre$receive$hook$for$repo$Status$200
  | Response$enterprise$admin$remove$pre$receive$hook$enforcement$for$repo$Status$200
  | Response$enterprise$admin$update$pre$receive$hook$enforcement$for$repo$Status$200
  | Response$projects$list$for$repo$Status$200
  | Response$projects$create$for$repo$Status$201
  | Response$pulls$list$Status$200
  | Response$pulls$create$Status$201
  | Response$pulls$list$review$comments$for$repo$Status$200
  | Response$pulls$get$review$comment$Status$200
  | Response$pulls$update$review$comment$Status$200
  | Response$reactions$list$for$pull$request$review$comment$Status$200
  | Response$reactions$create$for$pull$request$review$comment$Status$200
  | Response$reactions$create$for$pull$request$review$comment$Status$201
  | Response$pulls$get$Status$200
  | Response$pulls$update$Status$200
  | Response$pulls$list$review$comments$Status$200
  | Response$pulls$create$review$comment$Status$201
  | Response$pulls$create$reply$for$review$comment$Status$201
  | Response$pulls$list$commits$Status$200
  | Response$pulls$list$files$Status$200
  | Response$pulls$merge$Status$200
  | Response$pulls$list$requested$reviewers$Status$200
  | Response$pulls$request$reviewers$Status$201
  | Response$pulls$remove$requested$reviewers$Status$200
  | Response$pulls$list$reviews$Status$200
  | Response$pulls$create$review$Status$200
  | Response$pulls$get$review$Status$200
  | Response$pulls$update$review$Status$200
  | Response$pulls$delete$pending$review$Status$200
  | Response$pulls$list$comments$for$review$Status$200
  | Response$pulls$dismiss$review$Status$200
  | Response$pulls$submit$review$Status$200
  | Response$pulls$update$branch$Status$202
  | Response$repos$get$readme$Status$200
  | Response$repos$get$readme$in$directory$Status$200
  | Response$repos$list$releases$Status$200
  | Response$repos$create$release$Status$201
  | Response$repos$get$release$asset$Status$200
  | Response$repos$update$release$asset$Status$200
  | Response$repos$generate$release$notes$Status$200
  | Response$repos$get$latest$release$Status$200
  | Response$repos$get$release$by$tag$Status$200
  | Response$repos$get$release$Status$200
  | Response$repos$update$release$Status$200
  | Response$repos$list$release$assets$Status$200
  | Response$repos$upload$release$asset$Status$201
  | Response$reactions$create$for$release$Status$200
  | Response$reactions$create$for$release$Status$201
  | Response$repos$list$cache$info$Status$200
  | Response$secret$scanning$list$alerts$for$repo$Status$200
  | Response$secret$scanning$get$alert$Status$200
  | Response$secret$scanning$update$alert$Status$200
  | Response$secret$scanning$list$locations$for$alert$Status$200
  | Response$activity$list$stargazers$for$repo$Status$200
  | Response$repos$get$code$frequency$stats$Status$200
  | Response$repos$get$code$frequency$stats$Status$202
  | Response$repos$get$commit$activity$stats$Status$200
  | Response$repos$get$commit$activity$stats$Status$202
  | Response$repos$get$contributors$stats$Status$200
  | Response$repos$get$contributors$stats$Status$202
  | Response$repos$get$participation$stats$Status$200
  | Response$repos$get$punch$card$stats$Status$200
  | Response$repos$create$commit$status$Status$201
  | Response$activity$list$watchers$for$repo$Status$200
  | Response$activity$get$repo$subscription$Status$200
  | Response$activity$set$repo$subscription$Status$200
  | Response$repos$list$tags$Status$200
  | Response$repos$list$teams$Status$200
  | Response$repos$get$all$topics$Status$200
  | Response$repos$replace$all$topics$Status$200
  | Response$repos$transfer$Status$202
  | Response$repos$create$using$template$Status$201
  | Response$repos$list$public$Status$200
  | Response$actions$list$environment$secrets$Status$200
  | Response$actions$get$environment$public$key$Status$200
  | Response$actions$get$environment$secret$Status$200
  | Response$actions$create$or$update$environment$secret$Status$201
  | Response$search$code$Status$200
  | Response$search$commits$Status$200
  | Response$search$issues$and$pull$requests$Status$200
  | Response$search$labels$Status$200
  | Response$search$repos$Status$200
  | Response$search$topics$Status$200
  | Response$search$users$Status$200
  | Response$enterprise$admin$get$configuration$status$Status$200
  | Response$enterprise$admin$get$maintenance$status$Status$200
  | Response$enterprise$admin$enable$or$disable$maintenance$mode$Status$200
  | Response$enterprise$admin$get$settings$Status$200
  | Response$enterprise$admin$get$all$authorized$ssh$keys$Status$200
  | Response$enterprise$admin$add$authorized$ssh$key$Status$201
  | Response$enterprise$admin$remove$authorized$ssh$key$Status$200
  | Response$teams$get$legacy$Status$200
  | Response$teams$update$legacy$Status$200
  | Response$teams$update$legacy$Status$201
  | Response$teams$list$discussions$legacy$Status$200
  | Response$teams$create$discussion$legacy$Status$201
  | Response$teams$get$discussion$legacy$Status$200
  | Response$teams$update$discussion$legacy$Status$200
  | Response$teams$list$discussion$comments$legacy$Status$200
  | Response$teams$create$discussion$comment$legacy$Status$201
  | Response$teams$get$discussion$comment$legacy$Status$200
  | Response$teams$update$discussion$comment$legacy$Status$200
  | Response$reactions$list$for$team$discussion$comment$legacy$Status$200
  | Response$reactions$create$for$team$discussion$comment$legacy$Status$201
  | Response$reactions$list$for$team$discussion$legacy$Status$200
  | Response$reactions$create$for$team$discussion$legacy$Status$201
  | Response$teams$list$members$legacy$Status$200
  | Response$teams$get$membership$for$user$legacy$Status$200
  | Response$teams$add$or$update$membership$for$user$legacy$Status$200
  | Response$teams$list$projects$legacy$Status$200
  | Response$teams$check$permissions$for$project$legacy$Status$200
  | Response$teams$list$repos$legacy$Status$200
  | Response$teams$check$permissions$for$repo$legacy$Status$200
  | Response$teams$list$child$legacy$Status$200
  | Response$users$get$authenticated$Status$200
  | Response$users$update$authenticated$Status$200
  | Response$users$list$emails$for$authenticated$user$Status$200
  | Response$users$add$email$for$authenticated$user$Status$201
  | Response$users$list$followers$for$authenticated$user$Status$200
  | Response$users$list$followed$by$authenticated$user$Status$200
  | Response$users$list$gpg$keys$for$authenticated$user$Status$200
  | Response$users$create$gpg$key$for$authenticated$user$Status$201
  | Response$users$get$gpg$key$for$authenticated$user$Status$200
  | Response$apps$list$installations$for$authenticated$user$Status$200
  | Response$apps$list$installation$repos$for$authenticated$user$Status$200
  | Response$issues$list$for$authenticated$user$Status$200
  | Response$users$list$public$ssh$keys$for$authenticated$user$Status$200
  | Response$users$create$public$ssh$key$for$authenticated$user$Status$201
  | Response$users$get$public$ssh$key$for$authenticated$user$Status$200
  | Response$orgs$list$memberships$for$authenticated$user$Status$200
  | Response$orgs$get$membership$for$authenticated$user$Status$200
  | Response$orgs$update$membership$for$authenticated$user$Status$200
  | Response$migrations$list$for$authenticated$user$Status$200
  | Response$migrations$start$for$authenticated$user$Status$201
  | Response$migrations$list$repos$for$authenticated$user$Status$200
  | Response$orgs$list$for$authenticated$user$Status$200
  | Response$projects$create$for$authenticated$user$Status$201
  | Response$users$list$public$emails$for$authenticated$user$Status$200
  | Response$repos$list$for$authenticated$user$Status$200
  | Response$repos$create$for$authenticated$user$Status$201
  | Response$repos$list$invitations$for$authenticated$user$Status$200
  | Response$activity$list$repos$starred$by$authenticated$user$Status$200
  | Response$activity$list$watched$repos$for$authenticated$user$Status$200
  | Response$teams$list$for$authenticated$user$Status$200
  | Response$users$list$Status$200
  | Response$users$get$by$username$Status$200
  | Response$activity$list$events$for$authenticated$user$Status$200
  | Response$activity$list$org$events$for$authenticated$user$Status$200
  | Response$activity$list$public$events$for$user$Status$200
  | Response$users$list$followers$for$user$Status$200
  | Response$users$list$following$for$user$Status$200
  | Response$gists$list$for$user$Status$200
  | Response$users$list$gpg$keys$for$user$Status$200
  | Response$users$get$context$for$user$Status$200
  | Response$apps$get$user$installation$Status$200
  | Response$users$list$public$keys$for$user$Status$200
  | Response$orgs$list$for$user$Status$200
  | Response$projects$list$for$user$Status$200
  | Response$activity$list$received$events$for$user$Status$200
  | Response$activity$list$received$public$events$for$user$Status$200
  | Response$repos$list$for$user$Status$200
  | Response$activity$list$repos$starred$by$user$Status$200
  | Response$activity$list$repos$watched$by$user$Status$200
  | Response$meta$get$zen$Status$200;
export namespace ErrorResponse {
  export type meta$root = void;
  export type enterprise$admin$list$global$webhooks = void;
  export type enterprise$admin$create$global$webhook = void;
  export type enterprise$admin$get$global$webhook = void;
  export type enterprise$admin$delete$global$webhook = void;
  export type enterprise$admin$update$global$webhook = void;
  export type enterprise$admin$ping$global$webhook = void;
  export type enterprise$admin$list$public$keys = void;
  export type enterprise$admin$delete$public$key = void;
  export type enterprise$admin$update$ldap$mapping$for$team = void;
  export type enterprise$admin$sync$ldap$mapping$for$team = void;
  export type enterprise$admin$update$ldap$mapping$for$user = void;
  export type enterprise$admin$sync$ldap$mapping$for$user = void;
  export type enterprise$admin$create$org = void;
  export type enterprise$admin$update$org$name = void;
  export type enterprise$admin$list$pre$receive$environments = void;
  export type enterprise$admin$create$pre$receive$environment = void;
  export type enterprise$admin$get$pre$receive$environment = void;
  export type enterprise$admin$delete$pre$receive$environment = Response$enterprise$admin$delete$pre$receive$environment$Status$422;
  export type enterprise$admin$update$pre$receive$environment = Response$enterprise$admin$update$pre$receive$environment$Status$422;
  export type enterprise$admin$start$pre$receive$environment$download =
    Response$enterprise$admin$start$pre$receive$environment$download$Status$422;
  export type enterprise$admin$get$download$status$for$pre$receive$environment = void;
  export type enterprise$admin$list$pre$receive$hooks = void;
  export type enterprise$admin$create$pre$receive$hook = void;
  export type enterprise$admin$get$pre$receive$hook = void;
  export type enterprise$admin$delete$pre$receive$hook = void;
  export type enterprise$admin$update$pre$receive$hook = void;
  export type enterprise$admin$list$personal$access$tokens = void;
  export type enterprise$admin$delete$personal$access$token = void;
  export type enterprise$admin$create$user = void;
  export type enterprise$admin$delete$user = void;
  export type enterprise$admin$update$username$for$user = void;
  export type enterprise$admin$create$impersonation$o$auth$token = void;
  export type enterprise$admin$delete$impersonation$o$auth$token = void;
  export type apps$get$authenticated = void;
  export type apps$create$from$manifest = Response$apps$create$from$manifest$Status$404 | Response$apps$create$from$manifest$Status$422;
  export type apps$get$webhook$config$for$app = void;
  export type apps$update$webhook$config$for$app = void;
  export type apps$list$webhook$deliveries =
    | Response$apps$list$webhook$deliveries$Status$400
    | Response$apps$list$webhook$deliveries$Status$422;
  export type apps$get$webhook$delivery = Response$apps$get$webhook$delivery$Status$400 | Response$apps$get$webhook$delivery$Status$422;
  export type apps$redeliver$webhook$delivery =
    | Response$apps$redeliver$webhook$delivery$Status$400
    | Response$apps$redeliver$webhook$delivery$Status$422;
  export type apps$list$installations = void;
  export type apps$get$installation = Response$apps$get$installation$Status$404 | Response$apps$get$installation$Status$415;
  export type apps$delete$installation = Response$apps$delete$installation$Status$404;
  export type apps$create$installation$access$token =
    | Response$apps$create$installation$access$token$Status$401
    | Response$apps$create$installation$access$token$Status$403
    | Response$apps$create$installation$access$token$Status$404
    | Response$apps$create$installation$access$token$Status$415
    | Response$apps$create$installation$access$token$Status$422;
  export type apps$suspend$installation = Response$apps$suspend$installation$Status$404;
  export type apps$unsuspend$installation = Response$apps$unsuspend$installation$Status$404;
  export type oauth$authorizations$list$grants =
    | Response$oauth$authorizations$list$grants$Status$401
    | Response$oauth$authorizations$list$grants$Status$403
    | Response$oauth$authorizations$list$grants$Status$404;
  export type oauth$authorizations$get$grant =
    | Response$oauth$authorizations$get$grant$Status$401
    | Response$oauth$authorizations$get$grant$Status$403;
  export type oauth$authorizations$delete$grant =
    | Response$oauth$authorizations$delete$grant$Status$401
    | Response$oauth$authorizations$delete$grant$Status$403;
  export type apps$delete$authorization = Response$apps$delete$authorization$Status$422;
  export type apps$check$token = Response$apps$check$token$Status$404 | Response$apps$check$token$Status$422;
  export type apps$delete$token = Response$apps$delete$token$Status$422;
  export type apps$reset$token = Response$apps$reset$token$Status$422;
  export type apps$scope$token =
    | Response$apps$scope$token$Status$401
    | Response$apps$scope$token$Status$403
    | Response$apps$scope$token$Status$404
    | Response$apps$scope$token$Status$422;
  export type apps$get$by$slug =
    | Response$apps$get$by$slug$Status$403
    | Response$apps$get$by$slug$Status$404
    | Response$apps$get$by$slug$Status$415;
  export type oauth$authorizations$list$authorizations =
    | Response$oauth$authorizations$list$authorizations$Status$401
    | Response$oauth$authorizations$list$authorizations$Status$403
    | Response$oauth$authorizations$list$authorizations$Status$404;
  export type oauth$authorizations$create$authorization =
    | Response$oauth$authorizations$create$authorization$Status$401
    | Response$oauth$authorizations$create$authorization$Status$403
    | Response$oauth$authorizations$create$authorization$Status$410
    | Response$oauth$authorizations$create$authorization$Status$422;
  export type oauth$authorizations$get$or$create$authorization$for$app =
    | Response$oauth$authorizations$get$or$create$authorization$for$app$Status$401
    | Response$oauth$authorizations$get$or$create$authorization$for$app$Status$403
    | Response$oauth$authorizations$get$or$create$authorization$for$app$Status$422;
  export type oauth$authorizations$get$or$create$authorization$for$app$and$fingerprint =
    Response$oauth$authorizations$get$or$create$authorization$for$app$and$fingerprint$Status$422;
  export type oauth$authorizations$get$authorization =
    | Response$oauth$authorizations$get$authorization$Status$401
    | Response$oauth$authorizations$get$authorization$Status$403;
  export type oauth$authorizations$delete$authorization =
    | Response$oauth$authorizations$delete$authorization$Status$401
    | Response$oauth$authorizations$delete$authorization$Status$403;
  export type oauth$authorizations$update$authorization = Response$oauth$authorizations$update$authorization$Status$422;
  export type codes$of$conduct$get$all$codes$of$conduct = void;
  export type codes$of$conduct$get$conduct$code = Response$codes$of$conduct$get$conduct$code$Status$404;
  export type emojis$get = void;
  export type enterprise$admin$get$announcement = void;
  export type enterprise$admin$remove$announcement = void;
  export type enterprise$admin$set$announcement = void;
  export type enterprise$admin$get$license$information = void;
  export type enterprise$admin$get$all$stats = void;
  export type enterprise$admin$get$comment$stats = void;
  export type enterprise$admin$get$gist$stats = void;
  export type enterprise$admin$get$hooks$stats = void;
  export type enterprise$admin$get$issue$stats = void;
  export type enterprise$admin$get$milestone$stats = void;
  export type enterprise$admin$get$org$stats = void;
  export type enterprise$admin$get$pages$stats = void;
  export type enterprise$admin$get$pull$request$stats = void;
  export type enterprise$admin$get$repo$stats = void;
  export type enterprise$admin$get$user$stats = void;
  export type enterprise$admin$get$github$actions$permissions$enterprise = void;
  export type enterprise$admin$set$github$actions$permissions$enterprise = void;
  export type enterprise$admin$list$selected$organizations$enabled$github$actions$enterprise = void;
  export type enterprise$admin$set$selected$organizations$enabled$github$actions$enterprise = void;
  export type enterprise$admin$enable$selected$organization$github$actions$enterprise = void;
  export type enterprise$admin$disable$selected$organization$github$actions$enterprise = void;
  export type enterprise$admin$get$allowed$actions$enterprise = void;
  export type enterprise$admin$set$allowed$actions$enterprise = void;
  export type enterprise$admin$list$self$hosted$runner$groups$for$enterprise = void;
  export type enterprise$admin$create$self$hosted$runner$group$for$enterprise = void;
  export type enterprise$admin$get$self$hosted$runner$group$for$enterprise = void;
  export type enterprise$admin$delete$self$hosted$runner$group$from$enterprise = void;
  export type enterprise$admin$update$self$hosted$runner$group$for$enterprise = void;
  export type enterprise$admin$list$org$access$to$self$hosted$runner$group$in$enterprise = void;
  export type enterprise$admin$set$org$access$to$self$hosted$runner$group$in$enterprise = void;
  export type enterprise$admin$add$org$access$to$self$hosted$runner$group$in$enterprise = void;
  export type enterprise$admin$remove$org$access$to$self$hosted$runner$group$in$enterprise = void;
  export type enterprise$admin$list$self$hosted$runners$in$group$for$enterprise = void;
  export type enterprise$admin$set$self$hosted$runners$in$group$for$enterprise = void;
  export type enterprise$admin$add$self$hosted$runner$to$group$for$enterprise = void;
  export type enterprise$admin$remove$self$hosted$runner$from$group$for$enterprise = void;
  export type enterprise$admin$list$self$hosted$runners$for$enterprise = void;
  export type enterprise$admin$list$runner$applications$for$enterprise = void;
  export type enterprise$admin$create$registration$token$for$enterprise = void;
  export type enterprise$admin$create$remove$token$for$enterprise = void;
  export type enterprise$admin$get$self$hosted$runner$for$enterprise = void;
  export type enterprise$admin$delete$self$hosted$runner$from$enterprise = void;
  export type enterprise$admin$list$labels$for$self$hosted$runner$for$enterprise =
    Response$enterprise$admin$list$labels$for$self$hosted$runner$for$enterprise$Status$404;
  export type enterprise$admin$set$custom$labels$for$self$hosted$runner$for$enterprise =
    | Response$enterprise$admin$set$custom$labels$for$self$hosted$runner$for$enterprise$Status$404
    | Response$enterprise$admin$set$custom$labels$for$self$hosted$runner$for$enterprise$Status$422;
  export type enterprise$admin$add$custom$labels$to$self$hosted$runner$for$enterprise =
    | Response$enterprise$admin$add$custom$labels$to$self$hosted$runner$for$enterprise$Status$404
    | Response$enterprise$admin$add$custom$labels$to$self$hosted$runner$for$enterprise$Status$422;
  export type enterprise$admin$remove$all$custom$labels$from$self$hosted$runner$for$enterprise =
    | Response$enterprise$admin$remove$all$custom$labels$from$self$hosted$runner$for$enterprise$Status$404
    | Response$enterprise$admin$remove$all$custom$labels$from$self$hosted$runner$for$enterprise$Status$422;
  export type enterprise$admin$remove$custom$label$from$self$hosted$runner$for$enterprise =
    | Response$enterprise$admin$remove$custom$label$from$self$hosted$runner$for$enterprise$Status$404
    | Response$enterprise$admin$remove$custom$label$from$self$hosted$runner$for$enterprise$Status$422;
  export type enterprise$admin$get$audit$log = void;
  export type secret$scanning$list$alerts$for$enterprise =
    | Response$secret$scanning$list$alerts$for$enterprise$Status$404
    | Response$secret$scanning$list$alerts$for$enterprise$Status$503;
  export type billing$get$github$advanced$security$billing$ghe = Response$billing$get$github$advanced$security$billing$ghe$Status$403;
  export type activity$list$public$events = Response$activity$list$public$events$Status$403 | Response$activity$list$public$events$Status$503;
  export type activity$get$feeds = void;
  export type gists$list = Response$gists$list$Status$403;
  export type gists$create = Response$gists$create$Status$403 | Response$gists$create$Status$404 | Response$gists$create$Status$422;
  export type gists$list$public = Response$gists$list$public$Status$403 | Response$gists$list$public$Status$422;
  export type gists$list$starred = Response$gists$list$starred$Status$401 | Response$gists$list$starred$Status$403;
  export type gists$get = Response$gists$get$Status$403 | Response$gists$get$Status$404;
  export type gists$delete = Response$gists$delete$Status$403 | Response$gists$delete$Status$404;
  export type gists$update = Response$gists$update$Status$404 | Response$gists$update$Status$422;
  export type gists$list$comments = Response$gists$list$comments$Status$403 | Response$gists$list$comments$Status$404;
  export type gists$create$comment = Response$gists$create$comment$Status$403 | Response$gists$create$comment$Status$404;
  export type gists$get$comment = Response$gists$get$comment$Status$403 | Response$gists$get$comment$Status$404;
  export type gists$delete$comment = Response$gists$delete$comment$Status$403 | Response$gists$delete$comment$Status$404;
  export type gists$update$comment = Response$gists$update$comment$Status$404;
  export type gists$list$commits = Response$gists$list$commits$Status$403 | Response$gists$list$commits$Status$404;
  export type gists$list$forks = Response$gists$list$forks$Status$403 | Response$gists$list$forks$Status$404;
  export type gists$fork = Response$gists$fork$Status$403 | Response$gists$fork$Status$404 | Response$gists$fork$Status$422;
  export type gists$check$is$starred = Response$gists$check$is$starred$Status$403 | Response$gists$check$is$starred$Status$404;
  export type gists$star = Response$gists$star$Status$403 | Response$gists$star$Status$404;
  export type gists$unstar = Response$gists$unstar$Status$403 | Response$gists$unstar$Status$404;
  export type gists$get$revision =
    | Response$gists$get$revision$Status$403
    | Response$gists$get$revision$Status$404
    | Response$gists$get$revision$Status$422;
  export type gitignore$get$all$templates = void;
  export type gitignore$get$template = void;
  export type apps$list$repos$accessible$to$installation =
    | Response$apps$list$repos$accessible$to$installation$Status$401
    | Response$apps$list$repos$accessible$to$installation$Status$403;
  export type apps$revoke$installation$access$token = void;
  export type issues$list = Response$issues$list$Status$404 | Response$issues$list$Status$422;
  export type licenses$get$all$commonly$used = void;
  export type licenses$get = Response$licenses$get$Status$403 | Response$licenses$get$Status$404;
  export type markdown$render = void;
  export type markdown$render$raw = void;
  export type meta$get = void;
  export type activity$list$public$events$for$repo$network =
    | Response$activity$list$public$events$for$repo$network$Status$403
    | Response$activity$list$public$events$for$repo$network$Status$404;
  export type activity$list$notifications$for$authenticated$user =
    | Response$activity$list$notifications$for$authenticated$user$Status$401
    | Response$activity$list$notifications$for$authenticated$user$Status$403
    | Response$activity$list$notifications$for$authenticated$user$Status$422;
  export type activity$mark$notifications$as$read =
    | Response$activity$mark$notifications$as$read$Status$401
    | Response$activity$mark$notifications$as$read$Status$403;
  export type activity$get$thread = Response$activity$get$thread$Status$401 | Response$activity$get$thread$Status$403;
  export type activity$mark$thread$as$read = Response$activity$mark$thread$as$read$Status$403;
  export type activity$get$thread$subscription$for$authenticated$user =
    | Response$activity$get$thread$subscription$for$authenticated$user$Status$401
    | Response$activity$get$thread$subscription$for$authenticated$user$Status$403;
  export type activity$set$thread$subscription =
    | Response$activity$set$thread$subscription$Status$401
    | Response$activity$set$thread$subscription$Status$403;
  export type activity$delete$thread$subscription =
    | Response$activity$delete$thread$subscription$Status$401
    | Response$activity$delete$thread$subscription$Status$403;
  export type meta$get$octocat = void;
  export type orgs$list = void;
  export type orgs$list$custom$roles = void;
  export type orgs$get = Response$orgs$get$Status$404;
  export type orgs$update = Response$orgs$update$Status$409 | Response$orgs$update$Status$422;
  export type actions$get$github$actions$permissions$organization = void;
  export type actions$set$github$actions$permissions$organization = void;
  export type actions$list$selected$repositories$enabled$github$actions$organization = void;
  export type actions$set$selected$repositories$enabled$github$actions$organization = void;
  export type actions$enable$selected$repository$github$actions$organization = void;
  export type actions$disable$selected$repository$github$actions$organization = void;
  export type actions$get$allowed$actions$organization = void;
  export type actions$set$allowed$actions$organization = void;
  export type actions$list$self$hosted$runner$groups$for$org = void;
  export type actions$create$self$hosted$runner$group$for$org = void;
  export type actions$get$self$hosted$runner$group$for$org = void;
  export type actions$delete$self$hosted$runner$group$from$org = void;
  export type actions$update$self$hosted$runner$group$for$org = void;
  export type actions$list$repo$access$to$self$hosted$runner$group$in$org = void;
  export type actions$set$repo$access$to$self$hosted$runner$group$in$org = void;
  export type actions$add$repo$access$to$self$hosted$runner$group$in$org = void;
  export type actions$remove$repo$access$to$self$hosted$runner$group$in$org = void;
  export type actions$list$self$hosted$runners$in$group$for$org = void;
  export type actions$set$self$hosted$runners$in$group$for$org = void;
  export type actions$add$self$hosted$runner$to$group$for$org = void;
  export type actions$remove$self$hosted$runner$from$group$for$org = void;
  export type actions$list$self$hosted$runners$for$org = void;
  export type actions$list$runner$applications$for$org = void;
  export type actions$create$registration$token$for$org = void;
  export type actions$create$remove$token$for$org = void;
  export type actions$get$self$hosted$runner$for$org = void;
  export type actions$delete$self$hosted$runner$from$org = void;
  export type actions$list$labels$for$self$hosted$runner$for$org = Response$actions$list$labels$for$self$hosted$runner$for$org$Status$404;
  export type actions$set$custom$labels$for$self$hosted$runner$for$org =
    | Response$actions$set$custom$labels$for$self$hosted$runner$for$org$Status$404
    | Response$actions$set$custom$labels$for$self$hosted$runner$for$org$Status$422;
  export type actions$add$custom$labels$to$self$hosted$runner$for$org =
    | Response$actions$add$custom$labels$to$self$hosted$runner$for$org$Status$404
    | Response$actions$add$custom$labels$to$self$hosted$runner$for$org$Status$422;
  export type actions$remove$all$custom$labels$from$self$hosted$runner$for$org =
    Response$actions$remove$all$custom$labels$from$self$hosted$runner$for$org$Status$404;
  export type actions$remove$custom$label$from$self$hosted$runner$for$org =
    | Response$actions$remove$custom$label$from$self$hosted$runner$for$org$Status$404
    | Response$actions$remove$custom$label$from$self$hosted$runner$for$org$Status$422;
  export type actions$list$org$secrets = void;
  export type actions$get$org$public$key = void;
  export type actions$get$org$secret = void;
  export type actions$create$or$update$org$secret = void;
  export type actions$delete$org$secret = void;
  export type actions$list$selected$repos$for$org$secret = void;
  export type actions$set$selected$repos$for$org$secret = void;
  export type actions$add$selected$repo$to$org$secret = void;
  export type actions$remove$selected$repo$from$org$secret = void;
  export type orgs$get$audit$log = void;
  export type dependabot$list$org$secrets = void;
  export type dependabot$get$org$public$key = void;
  export type dependabot$get$org$secret = void;
  export type dependabot$create$or$update$org$secret = void;
  export type dependabot$delete$org$secret = void;
  export type dependabot$list$selected$repos$for$org$secret = void;
  export type dependabot$set$selected$repos$for$org$secret = void;
  export type dependabot$add$selected$repo$to$org$secret = void;
  export type dependabot$remove$selected$repo$from$org$secret = void;
  export type activity$list$public$org$events = void;
  export type orgs$list$webhooks = Response$orgs$list$webhooks$Status$404;
  export type orgs$create$webhook = Response$orgs$create$webhook$Status$404 | Response$orgs$create$webhook$Status$422;
  export type orgs$get$webhook = Response$orgs$get$webhook$Status$404;
  export type orgs$delete$webhook = Response$orgs$delete$webhook$Status$404;
  export type orgs$update$webhook = Response$orgs$update$webhook$Status$404 | Response$orgs$update$webhook$Status$422;
  export type orgs$get$webhook$config$for$org = void;
  export type orgs$update$webhook$config$for$org = void;
  export type orgs$list$webhook$deliveries =
    | Response$orgs$list$webhook$deliveries$Status$400
    | Response$orgs$list$webhook$deliveries$Status$422;
  export type orgs$get$webhook$delivery = Response$orgs$get$webhook$delivery$Status$400 | Response$orgs$get$webhook$delivery$Status$422;
  export type orgs$redeliver$webhook$delivery =
    | Response$orgs$redeliver$webhook$delivery$Status$400
    | Response$orgs$redeliver$webhook$delivery$Status$422;
  export type orgs$ping$webhook = Response$orgs$ping$webhook$Status$404;
  export type apps$get$org$installation = void;
  export type orgs$list$app$installations = void;
  export type issues$list$for$org = Response$issues$list$for$org$Status$404;
  export type orgs$list$members = Response$orgs$list$members$Status$422;
  export type orgs$check$membership$for$user = void;
  export type orgs$remove$member = Response$orgs$remove$member$Status$403;
  export type orgs$get$membership$for$user =
    | Response$orgs$get$membership$for$user$Status$403
    | Response$orgs$get$membership$for$user$Status$404;
  export type orgs$set$membership$for$user =
    | Response$orgs$set$membership$for$user$Status$403
    | Response$orgs$set$membership$for$user$Status$422;
  export type orgs$remove$membership$for$user =
    | Response$orgs$remove$membership$for$user$Status$403
    | Response$orgs$remove$membership$for$user$Status$404;
  export type migrations$list$for$org = void;
  export type migrations$start$for$org = Response$migrations$start$for$org$Status$404 | Response$migrations$start$for$org$Status$422;
  export type migrations$get$status$for$org = Response$migrations$get$status$for$org$Status$404;
  export type orgs$list$outside$collaborators = void;
  export type orgs$convert$member$to$outside$collaborator = Response$orgs$convert$member$to$outside$collaborator$Status$404;
  export type orgs$remove$outside$collaborator = Response$orgs$remove$outside$collaborator$Status$422;
  export type enterprise$admin$list$pre$receive$hooks$for$org = void;
  export type enterprise$admin$get$pre$receive$hook$for$org = void;
  export type enterprise$admin$remove$pre$receive$hook$enforcement$for$org = void;
  export type enterprise$admin$update$pre$receive$hook$enforcement$for$org = void;
  export type projects$list$for$org = Response$projects$list$for$org$Status$422;
  export type projects$create$for$org =
    | Response$projects$create$for$org$Status$401
    | Response$projects$create$for$org$Status$403
    | Response$projects$create$for$org$Status$404
    | Response$projects$create$for$org$Status$410
    | Response$projects$create$for$org$Status$422;
  export type orgs$list$public$members = void;
  export type orgs$check$public$membership$for$user = void;
  export type orgs$set$public$membership$for$authenticated$user = Response$orgs$set$public$membership$for$authenticated$user$Status$403;
  export type orgs$remove$public$membership$for$authenticated$user = void;
  export type repos$list$for$org = void;
  export type repos$create$in$org = Response$repos$create$in$org$Status$403 | Response$repos$create$in$org$Status$422;
  export type secret$scanning$list$alerts$for$org =
    | Response$secret$scanning$list$alerts$for$org$Status$404
    | Response$secret$scanning$list$alerts$for$org$Status$503;
  export type billing$get$github$advanced$security$billing$org = Response$billing$get$github$advanced$security$billing$org$Status$403;
  export type teams$list = Response$teams$list$Status$403;
  export type teams$create = Response$teams$create$Status$403 | Response$teams$create$Status$422;
  export type teams$get$by$name = Response$teams$get$by$name$Status$404;
  export type teams$delete$in$org = void;
  export type teams$update$in$org = void;
  export type teams$list$discussions$in$org = void;
  export type teams$create$discussion$in$org = void;
  export type teams$get$discussion$in$org = void;
  export type teams$delete$discussion$in$org = void;
  export type teams$update$discussion$in$org = void;
  export type teams$list$discussion$comments$in$org = void;
  export type teams$create$discussion$comment$in$org = void;
  export type teams$get$discussion$comment$in$org = void;
  export type teams$delete$discussion$comment$in$org = void;
  export type teams$update$discussion$comment$in$org = void;
  export type reactions$list$for$team$discussion$comment$in$org = void;
  export type reactions$create$for$team$discussion$comment$in$org = void;
  export type reactions$delete$for$team$discussion$comment = void;
  export type reactions$list$for$team$discussion$in$org = void;
  export type reactions$create$for$team$discussion$in$org = void;
  export type reactions$delete$for$team$discussion = void;
  export type teams$list$members$in$org = void;
  export type teams$get$membership$for$user$in$org = void;
  export type teams$add$or$update$membership$for$user$in$org = void;
  export type teams$remove$membership$for$user$in$org = void;
  export type teams$list$projects$in$org = void;
  export type teams$check$permissions$for$project$in$org = void;
  export type teams$add$or$update$project$permissions$in$org = Response$teams$add$or$update$project$permissions$in$org$Status$403;
  export type teams$remove$project$in$org = void;
  export type teams$list$repos$in$org = void;
  export type teams$check$permissions$for$repo$in$org = void;
  export type teams$add$or$update$repo$permissions$in$org = void;
  export type teams$remove$repo$in$org = void;
  export type teams$list$child$in$org = void;
  export type projects$get$card =
    | Response$projects$get$card$Status$401
    | Response$projects$get$card$Status$403
    | Response$projects$get$card$Status$404;
  export type projects$delete$card =
    | Response$projects$delete$card$Status$401
    | Response$projects$delete$card$Status$403
    | Response$projects$delete$card$Status$404;
  export type projects$update$card =
    | Response$projects$update$card$Status$401
    | Response$projects$update$card$Status$403
    | Response$projects$update$card$Status$404
    | Response$projects$update$card$Status$422;
  export type projects$move$card =
    | Response$projects$move$card$Status$401
    | Response$projects$move$card$Status$403
    | Response$projects$move$card$Status$422
    | Response$projects$move$card$Status$503;
  export type projects$get$column =
    | Response$projects$get$column$Status$401
    | Response$projects$get$column$Status$403
    | Response$projects$get$column$Status$404;
  export type projects$delete$column = Response$projects$delete$column$Status$401 | Response$projects$delete$column$Status$403;
  export type projects$update$column = Response$projects$update$column$Status$401 | Response$projects$update$column$Status$403;
  export type projects$list$cards = Response$projects$list$cards$Status$401 | Response$projects$list$cards$Status$403;
  export type projects$create$card =
    | Response$projects$create$card$Status$401
    | Response$projects$create$card$Status$403
    | Response$projects$create$card$Status$422
    | Response$projects$create$card$Status$503;
  export type projects$move$column =
    | Response$projects$move$column$Status$401
    | Response$projects$move$column$Status$403
    | Response$projects$move$column$Status$422;
  export type projects$get = Response$projects$get$Status$401 | Response$projects$get$Status$403;
  export type projects$delete =
    | Response$projects$delete$Status$401
    | Response$projects$delete$Status$403
    | Response$projects$delete$Status$404
    | Response$projects$delete$Status$410;
  export type projects$update =
    | Response$projects$update$Status$401
    | Response$projects$update$Status$403
    | Response$projects$update$Status$410
    | Response$projects$update$Status$422;
  export type projects$list$collaborators =
    | Response$projects$list$collaborators$Status$401
    | Response$projects$list$collaborators$Status$403
    | Response$projects$list$collaborators$Status$404
    | Response$projects$list$collaborators$Status$422;
  export type projects$add$collaborator =
    | Response$projects$add$collaborator$Status$401
    | Response$projects$add$collaborator$Status$403
    | Response$projects$add$collaborator$Status$404
    | Response$projects$add$collaborator$Status$422;
  export type projects$remove$collaborator =
    | Response$projects$remove$collaborator$Status$401
    | Response$projects$remove$collaborator$Status$403
    | Response$projects$remove$collaborator$Status$404
    | Response$projects$remove$collaborator$Status$422;
  export type projects$get$permission$for$user =
    | Response$projects$get$permission$for$user$Status$401
    | Response$projects$get$permission$for$user$Status$403
    | Response$projects$get$permission$for$user$Status$404
    | Response$projects$get$permission$for$user$Status$422;
  export type projects$list$columns = Response$projects$list$columns$Status$401 | Response$projects$list$columns$Status$403;
  export type projects$create$column =
    | Response$projects$create$column$Status$401
    | Response$projects$create$column$Status$403
    | Response$projects$create$column$Status$422;
  export type rate$limit$get = Response$rate$limit$get$Status$404;
  export type reactions$delete$legacy =
    | Response$reactions$delete$legacy$Status$401
    | Response$reactions$delete$legacy$Status$403
    | Response$reactions$delete$legacy$Status$410;
  export type repos$get = Response$repos$get$Status$403 | Response$repos$get$Status$404;
  export type repos$delete = Response$repos$delete$Status$403 | Response$repos$delete$Status$404;
  export type repos$update = Response$repos$update$Status$403 | Response$repos$update$Status$404 | Response$repos$update$Status$422;
  export type actions$list$artifacts$for$repo = void;
  export type actions$get$artifact = void;
  export type actions$delete$artifact = void;
  export type actions$download$artifact = void;
  export type actions$get$job$for$workflow$run = void;
  export type actions$download$job$logs$for$workflow$run = void;
  export type actions$get$github$actions$permissions$repository = void;
  export type actions$set$github$actions$permissions$repository = void;
  export type actions$get$allowed$actions$repository = void;
  export type actions$set$allowed$actions$repository = void;
  export type actions$list$self$hosted$runners$for$repo = void;
  export type actions$list$runner$applications$for$repo = void;
  export type actions$create$registration$token$for$repo = void;
  export type actions$create$remove$token$for$repo = void;
  export type actions$get$self$hosted$runner$for$repo = void;
  export type actions$delete$self$hosted$runner$from$repo = void;
  export type actions$list$labels$for$self$hosted$runner$for$repo = Response$actions$list$labels$for$self$hosted$runner$for$repo$Status$404;
  export type actions$set$custom$labels$for$self$hosted$runner$for$repo =
    | Response$actions$set$custom$labels$for$self$hosted$runner$for$repo$Status$404
    | Response$actions$set$custom$labels$for$self$hosted$runner$for$repo$Status$422;
  export type actions$add$custom$labels$to$self$hosted$runner$for$repo =
    | Response$actions$add$custom$labels$to$self$hosted$runner$for$repo$Status$404
    | Response$actions$add$custom$labels$to$self$hosted$runner$for$repo$Status$422;
  export type actions$remove$all$custom$labels$from$self$hosted$runner$for$repo =
    Response$actions$remove$all$custom$labels$from$self$hosted$runner$for$repo$Status$404;
  export type actions$remove$custom$label$from$self$hosted$runner$for$repo =
    | Response$actions$remove$custom$label$from$self$hosted$runner$for$repo$Status$404
    | Response$actions$remove$custom$label$from$self$hosted$runner$for$repo$Status$422;
  export type actions$list$workflow$runs$for$repo = void;
  export type actions$get$workflow$run = void;
  export type actions$delete$workflow$run = void;
  export type actions$get$reviews$for$run = void;
  export type actions$list$workflow$run$artifacts = void;
  export type actions$cancel$workflow$run = Response$actions$cancel$workflow$run$Status$409;
  export type actions$list$jobs$for$workflow$run = void;
  export type actions$download$workflow$run$logs = void;
  export type actions$delete$workflow$run$logs =
    | Response$actions$delete$workflow$run$logs$Status$403
    | Response$actions$delete$workflow$run$logs$Status$500;
  export type actions$get$pending$deployments$for$run = void;
  export type actions$review$pending$deployments$for$run = void;
  export type actions$re$run$workflow = void;
  export type actions$list$repo$secrets = void;
  export type actions$get$repo$public$key = void;
  export type actions$get$repo$secret = void;
  export type actions$create$or$update$repo$secret = void;
  export type actions$delete$repo$secret = void;
  export type actions$list$repo$workflows = void;
  export type actions$get$workflow = void;
  export type actions$disable$workflow = void;
  export type actions$create$workflow$dispatch = void;
  export type actions$enable$workflow = void;
  export type actions$list$workflow$runs = void;
  export type issues$list$assignees = Response$issues$list$assignees$Status$404;
  export type issues$check$user$can$be$assigned = Response$issues$check$user$can$be$assigned$Status$404;
  export type repos$list$autolinks = void;
  export type repos$create$autolink = Response$repos$create$autolink$Status$422;
  export type repos$get$autolink = Response$repos$get$autolink$Status$404;
  export type repos$delete$autolink = Response$repos$delete$autolink$Status$404;
  export type repos$list$branches = Response$repos$list$branches$Status$404;
  export type repos$get$branch = Response$repos$get$branch$Status$404 | Response$repos$get$branch$Status$415;
  export type repos$get$branch$protection = Response$repos$get$branch$protection$Status$404;
  export type repos$update$branch$protection =
    | Response$repos$update$branch$protection$Status$403
    | Response$repos$update$branch$protection$Status$404
    | Response$repos$update$branch$protection$Status$422;
  export type repos$delete$branch$protection = Response$repos$delete$branch$protection$Status$403;
  export type repos$get$admin$branch$protection = void;
  export type repos$set$admin$branch$protection = void;
  export type repos$delete$admin$branch$protection = Response$repos$delete$admin$branch$protection$Status$404;
  export type repos$get$pull$request$review$protection = void;
  export type repos$delete$pull$request$review$protection = Response$repos$delete$pull$request$review$protection$Status$404;
  export type repos$update$pull$request$review$protection = Response$repos$update$pull$request$review$protection$Status$422;
  export type repos$get$commit$signature$protection = Response$repos$get$commit$signature$protection$Status$404;
  export type repos$create$commit$signature$protection = Response$repos$create$commit$signature$protection$Status$404;
  export type repos$delete$commit$signature$protection = Response$repos$delete$commit$signature$protection$Status$404;
  export type repos$get$status$checks$protection = Response$repos$get$status$checks$protection$Status$404;
  export type repos$remove$status$check$protection = void;
  export type repos$update$status$check$protection =
    | Response$repos$update$status$check$protection$Status$404
    | Response$repos$update$status$check$protection$Status$422;
  export type repos$get$all$status$check$contexts = Response$repos$get$all$status$check$contexts$Status$404;
  export type repos$set$status$check$contexts =
    | Response$repos$set$status$check$contexts$Status$404
    | Response$repos$set$status$check$contexts$Status$422;
  export type repos$add$status$check$contexts =
    | Response$repos$add$status$check$contexts$Status$403
    | Response$repos$add$status$check$contexts$Status$404
    | Response$repos$add$status$check$contexts$Status$422;
  export type repos$remove$status$check$contexts =
    | Response$repos$remove$status$check$contexts$Status$404
    | Response$repos$remove$status$check$contexts$Status$422;
  export type repos$get$access$restrictions = Response$repos$get$access$restrictions$Status$404;
  export type repos$delete$access$restrictions = void;
  export type repos$get$apps$with$access$to$protected$branch = Response$repos$get$apps$with$access$to$protected$branch$Status$404;
  export type repos$set$app$access$restrictions = Response$repos$set$app$access$restrictions$Status$422;
  export type repos$add$app$access$restrictions = Response$repos$add$app$access$restrictions$Status$422;
  export type repos$remove$app$access$restrictions = Response$repos$remove$app$access$restrictions$Status$422;
  export type repos$get$teams$with$access$to$protected$branch = Response$repos$get$teams$with$access$to$protected$branch$Status$404;
  export type repos$set$team$access$restrictions = Response$repos$set$team$access$restrictions$Status$422;
  export type repos$add$team$access$restrictions = Response$repos$add$team$access$restrictions$Status$422;
  export type repos$remove$team$access$restrictions = Response$repos$remove$team$access$restrictions$Status$422;
  export type repos$get$users$with$access$to$protected$branch = Response$repos$get$users$with$access$to$protected$branch$Status$404;
  export type repos$set$user$access$restrictions = Response$repos$set$user$access$restrictions$Status$422;
  export type repos$add$user$access$restrictions = Response$repos$add$user$access$restrictions$Status$422;
  export type repos$remove$user$access$restrictions = Response$repos$remove$user$access$restrictions$Status$422;
  export type repos$rename$branch =
    | Response$repos$rename$branch$Status$403
    | Response$repos$rename$branch$Status$404
    | Response$repos$rename$branch$Status$422;
  export type checks$create = void;
  export type checks$get = void;
  export type checks$update = void;
  export type checks$list$annotations = void;
  export type checks$rerequest$run =
    | Response$checks$rerequest$run$Status$403
    | Response$checks$rerequest$run$Status$404
    | Response$checks$rerequest$run$Status$422;
  export type checks$create$suite = void;
  export type checks$set$suites$preferences = void;
  export type checks$get$suite = void;
  export type checks$list$for$suite = void;
  export type checks$rerequest$suite = void;
  export type code$scanning$list$alerts$for$repo =
    | Response$code$scanning$list$alerts$for$repo$Status$403
    | Response$code$scanning$list$alerts$for$repo$Status$404
    | Response$code$scanning$list$alerts$for$repo$Status$503;
  export type code$scanning$get$alert =
    | Response$code$scanning$get$alert$Status$403
    | Response$code$scanning$get$alert$Status$404
    | Response$code$scanning$get$alert$Status$503;
  export type code$scanning$update$alert =
    | Response$code$scanning$update$alert$Status$403
    | Response$code$scanning$update$alert$Status$404
    | Response$code$scanning$update$alert$Status$503;
  export type code$scanning$list$alert$instances =
    | Response$code$scanning$list$alert$instances$Status$403
    | Response$code$scanning$list$alert$instances$Status$404
    | Response$code$scanning$list$alert$instances$Status$503;
  export type code$scanning$list$recent$analyses =
    | Response$code$scanning$list$recent$analyses$Status$403
    | Response$code$scanning$list$recent$analyses$Status$404
    | Response$code$scanning$list$recent$analyses$Status$503;
  export type code$scanning$get$analysis =
    | Response$code$scanning$get$analysis$Status$403
    | Response$code$scanning$get$analysis$Status$404
    | Response$code$scanning$get$analysis$Status$503;
  export type code$scanning$delete$analysis =
    | Response$code$scanning$delete$analysis$Status$400
    | Response$code$scanning$delete$analysis$Status$403
    | Response$code$scanning$delete$analysis$Status$404
    | Response$code$scanning$delete$analysis$Status$503;
  export type code$scanning$upload$sarif =
    | Response$code$scanning$upload$sarif$Status$403
    | Response$code$scanning$upload$sarif$Status$404
    | Response$code$scanning$upload$sarif$Status$503;
  export type code$scanning$get$sarif = Response$code$scanning$get$sarif$Status$403 | Response$code$scanning$get$sarif$Status$503;
  export type repos$list$collaborators = Response$repos$list$collaborators$Status$404;
  export type repos$check$collaborator = void;
  export type repos$add$collaborator = Response$repos$add$collaborator$Status$403 | Response$repos$add$collaborator$Status$422;
  export type repos$remove$collaborator = void;
  export type repos$get$collaborator$permission$level = Response$repos$get$collaborator$permission$level$Status$404;
  export type repos$list$commit$comments$for$repo = void;
  export type repos$get$commit$comment = Response$repos$get$commit$comment$Status$404;
  export type repos$delete$commit$comment = Response$repos$delete$commit$comment$Status$404;
  export type repos$update$commit$comment = Response$repos$update$commit$comment$Status$404;
  export type reactions$list$for$commit$comment = Response$reactions$list$for$commit$comment$Status$404;
  export type reactions$create$for$commit$comment =
    | Response$reactions$create$for$commit$comment$Status$415
    | Response$reactions$create$for$commit$comment$Status$422;
  export type reactions$delete$for$commit$comment = void;
  export type repos$list$commits =
    | Response$repos$list$commits$Status$400
    | Response$repos$list$commits$Status$404
    | Response$repos$list$commits$Status$409
    | Response$repos$list$commits$Status$500;
  export type repos$list$branches$for$head$commit = Response$repos$list$branches$for$head$commit$Status$422;
  export type repos$list$comments$for$commit = void;
  export type repos$create$commit$comment = Response$repos$create$commit$comment$Status$403 | Response$repos$create$commit$comment$Status$422;
  export type repos$list$pull$requests$associated$with$commit = void;
  export type repos$get$commit =
    | Response$repos$get$commit$Status$404
    | Response$repos$get$commit$Status$422
    | Response$repos$get$commit$Status$500;
  export type checks$list$for$ref = void;
  export type checks$list$suites$for$ref = void;
  export type repos$get$combined$status$for$ref = Response$repos$get$combined$status$for$ref$Status$404;
  export type repos$list$commit$statuses$for$ref = void;
  export type repos$compare$commits = Response$repos$compare$commits$Status$404 | Response$repos$compare$commits$Status$500;
  export type repos$get$content = Response$repos$get$content$Status$403 | Response$repos$get$content$Status$404;
  export type repos$create$or$update$file$contents =
    | Response$repos$create$or$update$file$contents$Status$404
    | Response$repos$create$or$update$file$contents$Status$409
    | Response$repos$create$or$update$file$contents$Status$422;
  export type repos$delete$file =
    | Response$repos$delete$file$Status$404
    | Response$repos$delete$file$Status$409
    | Response$repos$delete$file$Status$422
    | Response$repos$delete$file$Status$503;
  export type repos$list$contributors = Response$repos$list$contributors$Status$403 | Response$repos$list$contributors$Status$404;
  export type dependabot$list$repo$secrets = void;
  export type dependabot$get$repo$public$key = void;
  export type dependabot$get$repo$secret = void;
  export type dependabot$create$or$update$repo$secret = void;
  export type dependabot$delete$repo$secret = void;
  export type repos$list$deployments = void;
  export type repos$create$deployment = Response$repos$create$deployment$Status$422;
  export type repos$get$deployment = Response$repos$get$deployment$Status$404;
  export type repos$delete$deployment = Response$repos$delete$deployment$Status$404 | Response$repos$delete$deployment$Status$422;
  export type repos$list$deployment$statuses = Response$repos$list$deployment$statuses$Status$404;
  export type repos$create$deployment$status = Response$repos$create$deployment$status$Status$422;
  export type repos$get$deployment$status = Response$repos$get$deployment$status$Status$404;
  export type repos$create$dispatch$event = Response$repos$create$dispatch$event$Status$422;
  export type repos$get$all$environments = void;
  export type repos$get$environment = void;
  export type repos$create$or$update$environment = Response$repos$create$or$update$environment$Status$422;
  export type repos$delete$an$environment = void;
  export type activity$list$repo$events = void;
  export type repos$list$forks = Response$repos$list$forks$Status$400;
  export type repos$create$fork =
    | Response$repos$create$fork$Status$400
    | Response$repos$create$fork$Status$403
    | Response$repos$create$fork$Status$404
    | Response$repos$create$fork$Status$422;
  export type git$create$blob =
    | Response$git$create$blob$Status$403
    | Response$git$create$blob$Status$404
    | Response$git$create$blob$Status$409
    | Response$git$create$blob$Status$422;
  export type git$get$blob = Response$git$get$blob$Status$403 | Response$git$get$blob$Status$404 | Response$git$get$blob$Status$422;
  export type git$create$commit = Response$git$create$commit$Status$404 | Response$git$create$commit$Status$422;
  export type git$get$commit = Response$git$get$commit$Status$404;
  export type git$list$matching$refs = void;
  export type git$get$ref = Response$git$get$ref$Status$404;
  export type git$create$ref = Response$git$create$ref$Status$422;
  export type git$delete$ref = Response$git$delete$ref$Status$422;
  export type git$update$ref = Response$git$update$ref$Status$422;
  export type git$create$tag = Response$git$create$tag$Status$422;
  export type git$get$tag = Response$git$get$tag$Status$404;
  export type git$create$tree = Response$git$create$tree$Status$403 | Response$git$create$tree$Status$404 | Response$git$create$tree$Status$422;
  export type git$get$tree = Response$git$get$tree$Status$404 | Response$git$get$tree$Status$422;
  export type repos$list$webhooks = Response$repos$list$webhooks$Status$404;
  export type repos$create$webhook =
    | Response$repos$create$webhook$Status$403
    | Response$repos$create$webhook$Status$404
    | Response$repos$create$webhook$Status$422;
  export type repos$get$webhook = Response$repos$get$webhook$Status$404;
  export type repos$delete$webhook = Response$repos$delete$webhook$Status$404;
  export type repos$update$webhook = Response$repos$update$webhook$Status$404 | Response$repos$update$webhook$Status$422;
  export type repos$get$webhook$config$for$repo = void;
  export type repos$update$webhook$config$for$repo = void;
  export type repos$list$webhook$deliveries =
    | Response$repos$list$webhook$deliveries$Status$400
    | Response$repos$list$webhook$deliveries$Status$422;
  export type repos$get$webhook$delivery = Response$repos$get$webhook$delivery$Status$400 | Response$repos$get$webhook$delivery$Status$422;
  export type repos$redeliver$webhook$delivery =
    | Response$repos$redeliver$webhook$delivery$Status$400
    | Response$repos$redeliver$webhook$delivery$Status$422;
  export type repos$ping$webhook = Response$repos$ping$webhook$Status$404;
  export type repos$test$push$webhook = Response$repos$test$push$webhook$Status$404;
  export type apps$get$repo$installation = Response$apps$get$repo$installation$Status$404;
  export type repos$list$invitations = void;
  export type repos$delete$invitation = void;
  export type repos$update$invitation = void;
  export type issues$list$for$repo = Response$issues$list$for$repo$Status$404 | Response$issues$list$for$repo$Status$422;
  export type issues$create =
    | Response$issues$create$Status$403
    | Response$issues$create$Status$404
    | Response$issues$create$Status$410
    | Response$issues$create$Status$422
    | Response$issues$create$Status$503;
  export type issues$list$comments$for$repo =
    | Response$issues$list$comments$for$repo$Status$404
    | Response$issues$list$comments$for$repo$Status$422;
  export type issues$get$comment = Response$issues$get$comment$Status$404;
  export type issues$delete$comment = void;
  export type issues$update$comment = Response$issues$update$comment$Status$422;
  export type reactions$list$for$issue$comment = Response$reactions$list$for$issue$comment$Status$404;
  export type reactions$create$for$issue$comment = Response$reactions$create$for$issue$comment$Status$422;
  export type reactions$delete$for$issue$comment = void;
  export type issues$list$events$for$repo = Response$issues$list$events$for$repo$Status$422;
  export type issues$get$event =
    | Response$issues$get$event$Status$403
    | Response$issues$get$event$Status$404
    | Response$issues$get$event$Status$410;
  export type issues$get = Response$issues$get$Status$404 | Response$issues$get$Status$410;
  export type issues$update =
    | Response$issues$update$Status$403
    | Response$issues$update$Status$404
    | Response$issues$update$Status$410
    | Response$issues$update$Status$422
    | Response$issues$update$Status$503;
  export type issues$add$assignees = void;
  export type issues$remove$assignees = void;
  export type issues$list$comments = Response$issues$list$comments$Status$404 | Response$issues$list$comments$Status$410;
  export type issues$create$comment =
    | Response$issues$create$comment$Status$403
    | Response$issues$create$comment$Status$404
    | Response$issues$create$comment$Status$410
    | Response$issues$create$comment$Status$422;
  export type issues$list$events = Response$issues$list$events$Status$410;
  export type issues$list$labels$on$issue = Response$issues$list$labels$on$issue$Status$410;
  export type issues$set$labels = Response$issues$set$labels$Status$410 | Response$issues$set$labels$Status$422;
  export type issues$add$labels = Response$issues$add$labels$Status$410 | Response$issues$add$labels$Status$422;
  export type issues$remove$all$labels = Response$issues$remove$all$labels$Status$410;
  export type issues$remove$label = Response$issues$remove$label$Status$404 | Response$issues$remove$label$Status$410;
  export type issues$lock =
    | Response$issues$lock$Status$403
    | Response$issues$lock$Status$404
    | Response$issues$lock$Status$410
    | Response$issues$lock$Status$422;
  export type issues$unlock = Response$issues$unlock$Status$403 | Response$issues$unlock$Status$404;
  export type reactions$list$for$issue = Response$reactions$list$for$issue$Status$404 | Response$reactions$list$for$issue$Status$410;
  export type reactions$create$for$issue = Response$reactions$create$for$issue$Status$422;
  export type reactions$delete$for$issue = void;
  export type issues$list$events$for$timeline =
    | Response$issues$list$events$for$timeline$Status$404
    | Response$issues$list$events$for$timeline$Status$410;
  export type repos$list$deploy$keys = void;
  export type repos$create$deploy$key = Response$repos$create$deploy$key$Status$422;
  export type repos$get$deploy$key = Response$repos$get$deploy$key$Status$404;
  export type repos$delete$deploy$key = void;
  export type issues$list$labels$for$repo = Response$issues$list$labels$for$repo$Status$404;
  export type issues$create$label = Response$issues$create$label$Status$404 | Response$issues$create$label$Status$422;
  export type issues$get$label = Response$issues$get$label$Status$404;
  export type issues$delete$label = void;
  export type issues$update$label = void;
  export type repos$list$languages = void;
  export type repos$enable$lfs$for$repo = void;
  export type repos$disable$lfs$for$repo = void;
  export type licenses$get$for$repo = void;
  export type repos$merge$upstream = void;
  export type repos$merge = Response$repos$merge$Status$403 | Response$repos$merge$Status$422;
  export type issues$list$milestones = Response$issues$list$milestones$Status$404;
  export type issues$create$milestone = Response$issues$create$milestone$Status$404 | Response$issues$create$milestone$Status$422;
  export type issues$get$milestone = Response$issues$get$milestone$Status$404;
  export type issues$delete$milestone = Response$issues$delete$milestone$Status$404;
  export type issues$update$milestone = void;
  export type issues$list$labels$for$milestone = void;
  export type activity$list$repo$notifications$for$authenticated$user = void;
  export type activity$mark$repo$notifications$as$read = void;
  export type repos$get$pages = Response$repos$get$pages$Status$404;
  export type repos$update$information$about$pages$site =
    | Response$repos$update$information$about$pages$site$Status$400
    | Response$repos$update$information$about$pages$site$Status$422;
  export type repos$create$pages$site = Response$repos$create$pages$site$Status$409 | Response$repos$create$pages$site$Status$422;
  export type repos$delete$pages$site = Response$repos$delete$pages$site$Status$404 | Response$repos$delete$pages$site$Status$422;
  export type repos$list$pages$builds = void;
  export type repos$request$pages$build = void;
  export type repos$get$latest$pages$build = void;
  export type repos$get$pages$build = void;
  export type enterprise$admin$list$pre$receive$hooks$for$repo = void;
  export type enterprise$admin$get$pre$receive$hook$for$repo = void;
  export type enterprise$admin$remove$pre$receive$hook$enforcement$for$repo = void;
  export type enterprise$admin$update$pre$receive$hook$enforcement$for$repo = void;
  export type projects$list$for$repo =
    | Response$projects$list$for$repo$Status$401
    | Response$projects$list$for$repo$Status$403
    | Response$projects$list$for$repo$Status$404
    | Response$projects$list$for$repo$Status$410
    | Response$projects$list$for$repo$Status$422;
  export type projects$create$for$repo =
    | Response$projects$create$for$repo$Status$401
    | Response$projects$create$for$repo$Status$403
    | Response$projects$create$for$repo$Status$404
    | Response$projects$create$for$repo$Status$410
    | Response$projects$create$for$repo$Status$422;
  export type pulls$list = Response$pulls$list$Status$422;
  export type pulls$create = Response$pulls$create$Status$403 | Response$pulls$create$Status$422;
  export type pulls$list$review$comments$for$repo = void;
  export type pulls$get$review$comment = Response$pulls$get$review$comment$Status$404;
  export type pulls$delete$review$comment = Response$pulls$delete$review$comment$Status$404;
  export type pulls$update$review$comment = void;
  export type reactions$list$for$pull$request$review$comment = Response$reactions$list$for$pull$request$review$comment$Status$404;
  export type reactions$create$for$pull$request$review$comment = Response$reactions$create$for$pull$request$review$comment$Status$422;
  export type reactions$delete$for$pull$request$comment = void;
  export type pulls$get = Response$pulls$get$Status$404 | Response$pulls$get$Status$500;
  export type pulls$update = Response$pulls$update$Status$403 | Response$pulls$update$Status$422;
  export type pulls$list$review$comments = void;
  export type pulls$create$review$comment = Response$pulls$create$review$comment$Status$403 | Response$pulls$create$review$comment$Status$422;
  export type pulls$create$reply$for$review$comment = Response$pulls$create$reply$for$review$comment$Status$404;
  export type pulls$list$commits = void;
  export type pulls$list$files = Response$pulls$list$files$Status$422 | Response$pulls$list$files$Status$500;
  export type pulls$check$if$merged = void;
  export type pulls$merge =
    | Response$pulls$merge$Status$403
    | Response$pulls$merge$Status$404
    | Response$pulls$merge$Status$405
    | Response$pulls$merge$Status$409
    | Response$pulls$merge$Status$422;
  export type pulls$list$requested$reviewers = void;
  export type pulls$request$reviewers = Response$pulls$request$reviewers$Status$403;
  export type pulls$remove$requested$reviewers = Response$pulls$remove$requested$reviewers$Status$422;
  export type pulls$list$reviews = void;
  export type pulls$create$review = Response$pulls$create$review$Status$403 | Response$pulls$create$review$Status$422;
  export type pulls$get$review = Response$pulls$get$review$Status$404;
  export type pulls$update$review = Response$pulls$update$review$Status$422;
  export type pulls$delete$pending$review = Response$pulls$delete$pending$review$Status$404 | Response$pulls$delete$pending$review$Status$422;
  export type pulls$list$comments$for$review = Response$pulls$list$comments$for$review$Status$404;
  export type pulls$dismiss$review = Response$pulls$dismiss$review$Status$404 | Response$pulls$dismiss$review$Status$422;
  export type pulls$submit$review =
    | Response$pulls$submit$review$Status$403
    | Response$pulls$submit$review$Status$404
    | Response$pulls$submit$review$Status$422;
  export type pulls$update$branch = Response$pulls$update$branch$Status$403 | Response$pulls$update$branch$Status$422;
  export type repos$get$readme = Response$repos$get$readme$Status$404 | Response$repos$get$readme$Status$422;
  export type repos$get$readme$in$directory =
    | Response$repos$get$readme$in$directory$Status$404
    | Response$repos$get$readme$in$directory$Status$422;
  export type repos$list$releases = Response$repos$list$releases$Status$404;
  export type repos$create$release = Response$repos$create$release$Status$422;
  export type repos$get$release$asset = Response$repos$get$release$asset$Status$404 | Response$repos$get$release$asset$Status$415;
  export type repos$delete$release$asset = void;
  export type repos$update$release$asset = void;
  export type repos$generate$release$notes = Response$repos$generate$release$notes$Status$404;
  export type repos$get$latest$release = void;
  export type repos$get$release$by$tag = Response$repos$get$release$by$tag$Status$404;
  export type repos$get$release = Response$repos$get$release$Status$404;
  export type repos$delete$release = void;
  export type repos$update$release = void;
  export type repos$list$release$assets = void;
  export type repos$upload$release$asset = void;
  export type reactions$create$for$release = Response$reactions$create$for$release$Status$422;
  export type repos$list$cache$info = Response$repos$list$cache$info$Status$403 | Response$repos$list$cache$info$Status$404;
  export type secret$scanning$list$alerts$for$repo = Response$secret$scanning$list$alerts$for$repo$Status$503;
  export type secret$scanning$get$alert = Response$secret$scanning$get$alert$Status$503;
  export type secret$scanning$update$alert = Response$secret$scanning$update$alert$Status$503;
  export type secret$scanning$list$locations$for$alert = Response$secret$scanning$list$locations$for$alert$Status$503;
  export type activity$list$stargazers$for$repo = Response$activity$list$stargazers$for$repo$Status$422;
  export type repos$get$code$frequency$stats = void;
  export type repos$get$commit$activity$stats = void;
  export type repos$get$contributors$stats = void;
  export type repos$get$participation$stats = Response$repos$get$participation$stats$Status$404;
  export type repos$get$punch$card$stats = void;
  export type repos$create$commit$status = void;
  export type activity$list$watchers$for$repo = void;
  export type activity$get$repo$subscription = Response$activity$get$repo$subscription$Status$403;
  export type activity$set$repo$subscription = void;
  export type activity$delete$repo$subscription = void;
  export type repos$list$tags = void;
  export type repos$download$tarball$archive = void;
  export type repos$list$teams = void;
  export type repos$get$all$topics = Response$repos$get$all$topics$Status$404;
  export type repos$replace$all$topics = Response$repos$replace$all$topics$Status$404 | Response$repos$replace$all$topics$Status$422;
  export type repos$transfer = void;
  export type repos$download$zipball$archive = void;
  export type repos$create$using$template = void;
  export type repos$list$public = Response$repos$list$public$Status$422;
  export type actions$list$environment$secrets = void;
  export type actions$get$environment$public$key = void;
  export type actions$get$environment$secret = void;
  export type actions$create$or$update$environment$secret = void;
  export type actions$delete$environment$secret = void;
  export type search$code = Response$search$code$Status$403 | Response$search$code$Status$422 | Response$search$code$Status$503;
  export type search$commits = void;
  export type search$issues$and$pull$requests =
    | Response$search$issues$and$pull$requests$Status$403
    | Response$search$issues$and$pull$requests$Status$422
    | Response$search$issues$and$pull$requests$Status$503;
  export type search$labels = Response$search$labels$Status$403 | Response$search$labels$Status$404 | Response$search$labels$Status$422;
  export type search$repos = Response$search$repos$Status$422 | Response$search$repos$Status$503;
  export type search$topics = void;
  export type search$users = Response$search$users$Status$422 | Response$search$users$Status$503;
  export type enterprise$admin$get$configuration$status = void;
  export type enterprise$admin$start$configuration$process = void;
  export type enterprise$admin$get$maintenance$status = void;
  export type enterprise$admin$enable$or$disable$maintenance$mode = void;
  export type enterprise$admin$get$settings = void;
  export type enterprise$admin$set$settings = void;
  export type enterprise$admin$get$all$authorized$ssh$keys = void;
  export type enterprise$admin$add$authorized$ssh$key = void;
  export type enterprise$admin$remove$authorized$ssh$key = void;
  export type enterprise$admin$create$enterprise$server$license = void;
  export type enterprise$admin$upgrade$license = void;
  export type teams$get$legacy = Response$teams$get$legacy$Status$404;
  export type teams$delete$legacy = Response$teams$delete$legacy$Status$404 | Response$teams$delete$legacy$Status$422;
  export type teams$update$legacy =
    | Response$teams$update$legacy$Status$403
    | Response$teams$update$legacy$Status$404
    | Response$teams$update$legacy$Status$422;
  export type teams$list$discussions$legacy = void;
  export type teams$create$discussion$legacy = void;
  export type teams$get$discussion$legacy = void;
  export type teams$delete$discussion$legacy = void;
  export type teams$update$discussion$legacy = void;
  export type teams$list$discussion$comments$legacy = void;
  export type teams$create$discussion$comment$legacy = void;
  export type teams$get$discussion$comment$legacy = void;
  export type teams$delete$discussion$comment$legacy = void;
  export type teams$update$discussion$comment$legacy = void;
  export type reactions$list$for$team$discussion$comment$legacy = void;
  export type reactions$create$for$team$discussion$comment$legacy = void;
  export type reactions$list$for$team$discussion$legacy = void;
  export type reactions$create$for$team$discussion$legacy = void;
  export type teams$list$members$legacy = Response$teams$list$members$legacy$Status$404;
  export type teams$get$member$legacy = void;
  export type teams$add$member$legacy = Response$teams$add$member$legacy$Status$403;
  export type teams$remove$member$legacy = void;
  export type teams$get$membership$for$user$legacy = Response$teams$get$membership$for$user$legacy$Status$404;
  export type teams$add$or$update$membership$for$user$legacy = Response$teams$add$or$update$membership$for$user$legacy$Status$404;
  export type teams$remove$membership$for$user$legacy = void;
  export type teams$list$projects$legacy = Response$teams$list$projects$legacy$Status$404;
  export type teams$check$permissions$for$project$legacy = void;
  export type teams$add$or$update$project$permissions$legacy =
    | Response$teams$add$or$update$project$permissions$legacy$Status$403
    | Response$teams$add$or$update$project$permissions$legacy$Status$404
    | Response$teams$add$or$update$project$permissions$legacy$Status$422;
  export type teams$remove$project$legacy =
    | Response$teams$remove$project$legacy$Status$404
    | Response$teams$remove$project$legacy$Status$415
    | Response$teams$remove$project$legacy$Status$422;
  export type teams$list$repos$legacy = Response$teams$list$repos$legacy$Status$404;
  export type teams$check$permissions$for$repo$legacy = void;
  export type teams$add$or$update$repo$permissions$legacy =
    | Response$teams$add$or$update$repo$permissions$legacy$Status$403
    | Response$teams$add$or$update$repo$permissions$legacy$Status$422;
  export type teams$remove$repo$legacy = void;
  export type teams$list$child$legacy =
    | Response$teams$list$child$legacy$Status$403
    | Response$teams$list$child$legacy$Status$404
    | Response$teams$list$child$legacy$Status$422;
  export type users$get$authenticated = Response$users$get$authenticated$Status$401 | Response$users$get$authenticated$Status$403;
  export type users$update$authenticated =
    | Response$users$update$authenticated$Status$401
    | Response$users$update$authenticated$Status$403
    | Response$users$update$authenticated$Status$404
    | Response$users$update$authenticated$Status$422;
  export type users$list$emails$for$authenticated$user =
    | Response$users$list$emails$for$authenticated$user$Status$401
    | Response$users$list$emails$for$authenticated$user$Status$403
    | Response$users$list$emails$for$authenticated$user$Status$404;
  export type users$add$email$for$authenticated$user =
    | Response$users$add$email$for$authenticated$user$Status$401
    | Response$users$add$email$for$authenticated$user$Status$403
    | Response$users$add$email$for$authenticated$user$Status$404
    | Response$users$add$email$for$authenticated$user$Status$422;
  export type users$delete$email$for$authenticated$user =
    | Response$users$delete$email$for$authenticated$user$Status$401
    | Response$users$delete$email$for$authenticated$user$Status$403
    | Response$users$delete$email$for$authenticated$user$Status$404
    | Response$users$delete$email$for$authenticated$user$Status$422;
  export type users$list$followers$for$authenticated$user =
    | Response$users$list$followers$for$authenticated$user$Status$401
    | Response$users$list$followers$for$authenticated$user$Status$403;
  export type users$list$followed$by$authenticated$user =
    | Response$users$list$followed$by$authenticated$user$Status$401
    | Response$users$list$followed$by$authenticated$user$Status$403;
  export type users$check$person$is$followed$by$authenticated =
    | Response$users$check$person$is$followed$by$authenticated$Status$401
    | Response$users$check$person$is$followed$by$authenticated$Status$403
    | Response$users$check$person$is$followed$by$authenticated$Status$404;
  export type users$follow = Response$users$follow$Status$401 | Response$users$follow$Status$403 | Response$users$follow$Status$404;
  export type users$unfollow = Response$users$unfollow$Status$401 | Response$users$unfollow$Status$403 | Response$users$unfollow$Status$404;
  export type users$list$gpg$keys$for$authenticated$user =
    | Response$users$list$gpg$keys$for$authenticated$user$Status$401
    | Response$users$list$gpg$keys$for$authenticated$user$Status$403
    | Response$users$list$gpg$keys$for$authenticated$user$Status$404;
  export type users$create$gpg$key$for$authenticated$user =
    | Response$users$create$gpg$key$for$authenticated$user$Status$401
    | Response$users$create$gpg$key$for$authenticated$user$Status$403
    | Response$users$create$gpg$key$for$authenticated$user$Status$404
    | Response$users$create$gpg$key$for$authenticated$user$Status$422;
  export type users$get$gpg$key$for$authenticated$user =
    | Response$users$get$gpg$key$for$authenticated$user$Status$401
    | Response$users$get$gpg$key$for$authenticated$user$Status$403
    | Response$users$get$gpg$key$for$authenticated$user$Status$404;
  export type users$delete$gpg$key$for$authenticated$user =
    | Response$users$delete$gpg$key$for$authenticated$user$Status$401
    | Response$users$delete$gpg$key$for$authenticated$user$Status$403
    | Response$users$delete$gpg$key$for$authenticated$user$Status$404
    | Response$users$delete$gpg$key$for$authenticated$user$Status$422;
  export type apps$list$installations$for$authenticated$user =
    | Response$apps$list$installations$for$authenticated$user$Status$401
    | Response$apps$list$installations$for$authenticated$user$Status$403
    | Response$apps$list$installations$for$authenticated$user$Status$415;
  export type apps$list$installation$repos$for$authenticated$user =
    | Response$apps$list$installation$repos$for$authenticated$user$Status$403
    | Response$apps$list$installation$repos$for$authenticated$user$Status$404;
  export type apps$add$repo$to$installation$for$authenticated$user =
    | Response$apps$add$repo$to$installation$for$authenticated$user$Status$403
    | Response$apps$add$repo$to$installation$for$authenticated$user$Status$404;
  export type apps$remove$repo$from$installation$for$authenticated$user =
    | Response$apps$remove$repo$from$installation$for$authenticated$user$Status$403
    | Response$apps$remove$repo$from$installation$for$authenticated$user$Status$404;
  export type issues$list$for$authenticated$user = Response$issues$list$for$authenticated$user$Status$404;
  export type users$list$public$ssh$keys$for$authenticated$user =
    | Response$users$list$public$ssh$keys$for$authenticated$user$Status$401
    | Response$users$list$public$ssh$keys$for$authenticated$user$Status$403
    | Response$users$list$public$ssh$keys$for$authenticated$user$Status$404;
  export type users$create$public$ssh$key$for$authenticated$user =
    | Response$users$create$public$ssh$key$for$authenticated$user$Status$401
    | Response$users$create$public$ssh$key$for$authenticated$user$Status$403
    | Response$users$create$public$ssh$key$for$authenticated$user$Status$404
    | Response$users$create$public$ssh$key$for$authenticated$user$Status$422;
  export type users$get$public$ssh$key$for$authenticated$user =
    | Response$users$get$public$ssh$key$for$authenticated$user$Status$401
    | Response$users$get$public$ssh$key$for$authenticated$user$Status$403
    | Response$users$get$public$ssh$key$for$authenticated$user$Status$404;
  export type users$delete$public$ssh$key$for$authenticated$user =
    | Response$users$delete$public$ssh$key$for$authenticated$user$Status$401
    | Response$users$delete$public$ssh$key$for$authenticated$user$Status$403
    | Response$users$delete$public$ssh$key$for$authenticated$user$Status$404;
  export type orgs$list$memberships$for$authenticated$user =
    | Response$orgs$list$memberships$for$authenticated$user$Status$401
    | Response$orgs$list$memberships$for$authenticated$user$Status$403
    | Response$orgs$list$memberships$for$authenticated$user$Status$422;
  export type orgs$get$membership$for$authenticated$user =
    | Response$orgs$get$membership$for$authenticated$user$Status$403
    | Response$orgs$get$membership$for$authenticated$user$Status$404;
  export type orgs$update$membership$for$authenticated$user =
    | Response$orgs$update$membership$for$authenticated$user$Status$403
    | Response$orgs$update$membership$for$authenticated$user$Status$404
    | Response$orgs$update$membership$for$authenticated$user$Status$422;
  export type migrations$list$for$authenticated$user =
    | Response$migrations$list$for$authenticated$user$Status$401
    | Response$migrations$list$for$authenticated$user$Status$403;
  export type migrations$start$for$authenticated$user =
    | Response$migrations$start$for$authenticated$user$Status$401
    | Response$migrations$start$for$authenticated$user$Status$403
    | Response$migrations$start$for$authenticated$user$Status$422;
  export type migrations$get$archive$for$authenticated$user =
    | Response$migrations$get$archive$for$authenticated$user$Status$401
    | Response$migrations$get$archive$for$authenticated$user$Status$403;
  export type migrations$list$repos$for$authenticated$user = Response$migrations$list$repos$for$authenticated$user$Status$404;
  export type orgs$list$for$authenticated$user =
    | Response$orgs$list$for$authenticated$user$Status$401
    | Response$orgs$list$for$authenticated$user$Status$403;
  export type projects$create$for$authenticated$user =
    | Response$projects$create$for$authenticated$user$Status$401
    | Response$projects$create$for$authenticated$user$Status$403
    | Response$projects$create$for$authenticated$user$Status$415
    | Response$projects$create$for$authenticated$user$Status$422;
  export type users$list$public$emails$for$authenticated$user =
    | Response$users$list$public$emails$for$authenticated$user$Status$401
    | Response$users$list$public$emails$for$authenticated$user$Status$403
    | Response$users$list$public$emails$for$authenticated$user$Status$404;
  export type repos$list$for$authenticated$user =
    | Response$repos$list$for$authenticated$user$Status$401
    | Response$repos$list$for$authenticated$user$Status$403
    | Response$repos$list$for$authenticated$user$Status$422;
  export type repos$create$for$authenticated$user =
    | Response$repos$create$for$authenticated$user$Status$400
    | Response$repos$create$for$authenticated$user$Status$401
    | Response$repos$create$for$authenticated$user$Status$403
    | Response$repos$create$for$authenticated$user$Status$404
    | Response$repos$create$for$authenticated$user$Status$422;
  export type repos$list$invitations$for$authenticated$user =
    | Response$repos$list$invitations$for$authenticated$user$Status$401
    | Response$repos$list$invitations$for$authenticated$user$Status$403
    | Response$repos$list$invitations$for$authenticated$user$Status$404;
  export type repos$decline$invitation$for$authenticated$user =
    | Response$repos$decline$invitation$for$authenticated$user$Status$403
    | Response$repos$decline$invitation$for$authenticated$user$Status$404
    | Response$repos$decline$invitation$for$authenticated$user$Status$409;
  export type repos$accept$invitation$for$authenticated$user =
    | Response$repos$accept$invitation$for$authenticated$user$Status$403
    | Response$repos$accept$invitation$for$authenticated$user$Status$404
    | Response$repos$accept$invitation$for$authenticated$user$Status$409;
  export type activity$list$repos$starred$by$authenticated$user =
    | Response$activity$list$repos$starred$by$authenticated$user$Status$401
    | Response$activity$list$repos$starred$by$authenticated$user$Status$403;
  export type activity$check$repo$is$starred$by$authenticated$user =
    | Response$activity$check$repo$is$starred$by$authenticated$user$Status$401
    | Response$activity$check$repo$is$starred$by$authenticated$user$Status$403
    | Response$activity$check$repo$is$starred$by$authenticated$user$Status$404;
  export type activity$star$repo$for$authenticated$user =
    | Response$activity$star$repo$for$authenticated$user$Status$401
    | Response$activity$star$repo$for$authenticated$user$Status$403
    | Response$activity$star$repo$for$authenticated$user$Status$404;
  export type activity$unstar$repo$for$authenticated$user =
    | Response$activity$unstar$repo$for$authenticated$user$Status$401
    | Response$activity$unstar$repo$for$authenticated$user$Status$403
    | Response$activity$unstar$repo$for$authenticated$user$Status$404;
  export type activity$list$watched$repos$for$authenticated$user =
    | Response$activity$list$watched$repos$for$authenticated$user$Status$401
    | Response$activity$list$watched$repos$for$authenticated$user$Status$403;
  export type teams$list$for$authenticated$user =
    | Response$teams$list$for$authenticated$user$Status$403
    | Response$teams$list$for$authenticated$user$Status$404;
  export type users$list = void;
  export type users$get$by$username = Response$users$get$by$username$Status$404;
  export type activity$list$events$for$authenticated$user = void;
  export type activity$list$org$events$for$authenticated$user = void;
  export type activity$list$public$events$for$user = void;
  export type users$list$followers$for$user = void;
  export type users$list$following$for$user = void;
  export type users$check$following$for$user = void;
  export type gists$list$for$user = Response$gists$list$for$user$Status$422;
  export type users$list$gpg$keys$for$user = void;
  export type users$get$context$for$user = Response$users$get$context$for$user$Status$404 | Response$users$get$context$for$user$Status$422;
  export type apps$get$user$installation = void;
  export type users$list$public$keys$for$user = void;
  export type orgs$list$for$user = void;
  export type projects$list$for$user = Response$projects$list$for$user$Status$422;
  export type activity$list$received$events$for$user = void;
  export type activity$list$received$public$events$for$user = void;
  export type repos$list$for$user = void;
  export type enterprise$admin$promote$user$to$be$site$administrator = void;
  export type enterprise$admin$demote$site$administrator = void;
  export type activity$list$repos$starred$by$user = void;
  export type activity$list$repos$watched$by$user = void;
  export type enterprise$admin$suspend$user = void;
  export type enterprise$admin$unsuspend$user = void;
  export type meta$get$zen = void;
}
export interface ApiClient<RequestOption> {
  request: <T = SuccessResponses>(
    httpMethod: HttpMethod,
    url: string,
    headers: ObjectLike | any,
    requestBody: ObjectLike | any,
    queryParameters: QueryParameters | undefined,
    options?: RequestOption,
  ) => Promise<T>;
}
export class Client<RequestOption> {
  private baseUrl: string;
  constructor(private apiClient: ApiClient<RequestOption>, baseUrl: string) {
    this.baseUrl = baseUrl.replace(/\/$/, "");
  }
  /**
   * GitHub API Root
   * Get Hypermedia links to resources accessible in GitHub's REST API
   * operationId: meta/root
   * Request URI: /
   */
  public async meta$root(option?: RequestOption): Promise<Response$meta$root$Status$200["application/json"]> {
    const url = this.baseUrl + `/`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * List global webhooks
   * operationId: enterprise-admin/list-global-webhooks
   * Request URI: /admin/hooks
   */
  public async enterprise$admin$list$global$webhooks(
    params: Params$enterprise$admin$list$global$webhooks,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$list$global$webhooks$Status$200["application/json"]> {
    const url = this.baseUrl + `/admin/hooks`;
    const headers = {
      Accept: "application/json",
      accept: params.parameter.accept,
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create a global webhook
   * operationId: enterprise-admin/create-global-webhook
   * Request URI: /admin/hooks
   */
  public async enterprise$admin$create$global$webhook(
    params: Params$enterprise$admin$create$global$webhook,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$create$global$webhook$Status$201["application/json"]> {
    const url = this.baseUrl + `/admin/hooks`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get a global webhook
   * operationId: enterprise-admin/get-global-webhook
   * Request URI: /admin/hooks/{hook_id}
   */
  public async enterprise$admin$get$global$webhook(
    params: Params$enterprise$admin$get$global$webhook,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$get$global$webhook$Status$200["application/json"]> {
    const url = this.baseUrl + `/admin/hooks/${params.parameter.hook_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Delete a global webhook
   * operationId: enterprise-admin/delete-global-webhook
   * Request URI: /admin/hooks/{hook_id}
   */
  public async enterprise$admin$delete$global$webhook(
    params: Params$enterprise$admin$delete$global$webhook,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/admin/hooks/${params.parameter.hook_id}`;
    const headers = {
      accept: params.parameter.accept,
    };
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Update a global webhook
   * Parameters that are not provided will be overwritten with the default value or removed if no default exists.
   * operationId: enterprise-admin/update-global-webhook
   * Request URI: /admin/hooks/{hook_id}
   */
  public async enterprise$admin$update$global$webhook(
    params: Params$enterprise$admin$update$global$webhook,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$update$global$webhook$Status$200["application/json"]> {
    const url = this.baseUrl + `/admin/hooks/${params.parameter.hook_id}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Ping a global webhook
   * This will trigger a [ping event](https://docs.github.com/enterprise-server@3.4/webhooks/#ping-event) to be sent to the webhook.
   * operationId: enterprise-admin/ping-global-webhook
   * Request URI: /admin/hooks/{hook_id}/pings
   */
  public async enterprise$admin$ping$global$webhook(
    params: Params$enterprise$admin$ping$global$webhook,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/admin/hooks/${params.parameter.hook_id}/pings`;
    const headers = {
      accept: params.parameter.accept,
    };
    return this.apiClient.request("POST", url, headers, undefined, undefined, option);
  }
  /**
   * List public keys
   * operationId: enterprise-admin/list-public-keys
   * Request URI: /admin/keys
   */
  public async enterprise$admin$list$public$keys(
    params: Params$enterprise$admin$list$public$keys,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$list$public$keys$Status$200["application/json"]> {
    const url = this.baseUrl + `/admin/keys`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
      direction: { value: params.parameter.direction, explode: false },
      sort: { value: params.parameter.sort, explode: false },
      since: { value: params.parameter.since, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Delete a public key
   * operationId: enterprise-admin/delete-public-key
   * Request URI: /admin/keys/{key_ids}
   */
  public async enterprise$admin$delete$public$key(params: Params$enterprise$admin$delete$public$key, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/admin/keys/${params.parameter.key_ids}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Update LDAP mapping for a team
   * Updates the [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team. [LDAP synchronization](https://docs.github.com/enterprise/admin/guides/user-management/using-ldap/#enabling-ldap-sync) must be enabled to map LDAP entries to a team. Use the [Create a team](https://docs.github.com/enterprise-server@3.4/rest/reference/teams/#create-a-team) endpoint to create a team with LDAP mapping.
   * operationId: enterprise-admin/update-ldap-mapping-for-team
   * Request URI: /admin/ldap/teams/{team_id}/mapping
   */
  public async enterprise$admin$update$ldap$mapping$for$team(
    params: Params$enterprise$admin$update$ldap$mapping$for$team,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$update$ldap$mapping$for$team$Status$200["application/json"]> {
    const url = this.baseUrl + `/admin/ldap/teams/${params.parameter.team_id}/mapping`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Sync LDAP mapping for a team
   * Note that this API call does not automatically initiate an LDAP sync. Rather, if a `201` is returned, the sync job is queued successfully, and is performed when the instance is ready.
   * operationId: enterprise-admin/sync-ldap-mapping-for-team
   * Request URI: /admin/ldap/teams/{team_id}/sync
   */
  public async enterprise$admin$sync$ldap$mapping$for$team(
    params: Params$enterprise$admin$sync$ldap$mapping$for$team,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$sync$ldap$mapping$for$team$Status$201["application/json"]> {
    const url = this.baseUrl + `/admin/ldap/teams/${params.parameter.team_id}/sync`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, undefined, undefined, option);
  }
  /**
   * Update LDAP mapping for a user
   * operationId: enterprise-admin/update-ldap-mapping-for-user
   * Request URI: /admin/ldap/users/{username}/mapping
   */
  public async enterprise$admin$update$ldap$mapping$for$user(
    params: Params$enterprise$admin$update$ldap$mapping$for$user,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$update$ldap$mapping$for$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/admin/ldap/users/${params.parameter.username}/mapping`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Sync LDAP mapping for a user
   * Note that this API call does not automatically initiate an LDAP sync. Rather, if a `201` is returned, the sync job is queued successfully, and is performed when the instance is ready.
   * operationId: enterprise-admin/sync-ldap-mapping-for-user
   * Request URI: /admin/ldap/users/{username}/sync
   */
  public async enterprise$admin$sync$ldap$mapping$for$user(
    params: Params$enterprise$admin$sync$ldap$mapping$for$user,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$sync$ldap$mapping$for$user$Status$201["application/json"]> {
    const url = this.baseUrl + `/admin/ldap/users/${params.parameter.username}/sync`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, undefined, undefined, option);
  }
  /**
   * Create an organization
   * operationId: enterprise-admin/create-org
   * Request URI: /admin/organizations
   */
  public async enterprise$admin$create$org(
    params: Params$enterprise$admin$create$org,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$create$org$Status$201["application/json"]> {
    const url = this.baseUrl + `/admin/organizations`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Update an organization name
   * operationId: enterprise-admin/update-org-name
   * Request URI: /admin/organizations/{org}
   */
  public async enterprise$admin$update$org$name(
    params: Params$enterprise$admin$update$org$name,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$update$org$name$Status$202["application/json"]> {
    const url = this.baseUrl + `/admin/organizations/${params.parameter.org}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List pre-receive environments
   * operationId: enterprise-admin/list-pre-receive-environments
   * Request URI: /admin/pre-receive-environments
   */
  public async enterprise$admin$list$pre$receive$environments(
    params: Params$enterprise$admin$list$pre$receive$environments,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$list$pre$receive$environments$Status$200["application/json"]> {
    const url = this.baseUrl + `/admin/pre-receive-environments`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
      direction: { value: params.parameter.direction, explode: false },
      sort: { value: params.parameter.sort, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create a pre-receive environment
   * operationId: enterprise-admin/create-pre-receive-environment
   * Request URI: /admin/pre-receive-environments
   */
  public async enterprise$admin$create$pre$receive$environment(
    params: Params$enterprise$admin$create$pre$receive$environment,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$create$pre$receive$environment$Status$201["application/json"]> {
    const url = this.baseUrl + `/admin/pre-receive-environments`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get a pre-receive environment
   * operationId: enterprise-admin/get-pre-receive-environment
   * Request URI: /admin/pre-receive-environments/{pre_receive_environment_id}
   */
  public async enterprise$admin$get$pre$receive$environment(
    params: Params$enterprise$admin$get$pre$receive$environment,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$get$pre$receive$environment$Status$200["application/json"]> {
    const url = this.baseUrl + `/admin/pre-receive-environments/${params.parameter.pre_receive_environment_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Delete a pre-receive environment
   * If you attempt to delete an environment that cannot be deleted, you will receive a `422 Unprocessable Entity` response.
   *
   * The possible error messages are:
   *
   * *   _Cannot modify or delete the default environment_
   * *   _Cannot delete environment that has hooks_
   * *   _Cannot delete environment when download is in progress_
   * operationId: enterprise-admin/delete-pre-receive-environment
   * Request URI: /admin/pre-receive-environments/{pre_receive_environment_id}
   */
  public async enterprise$admin$delete$pre$receive$environment(
    params: Params$enterprise$admin$delete$pre$receive$environment,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/admin/pre-receive-environments/${params.parameter.pre_receive_environment_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Update a pre-receive environment
   * You cannot modify the default environment. If you attempt to modify the default environment, you will receive a `422 Unprocessable Entity` response.
   * operationId: enterprise-admin/update-pre-receive-environment
   * Request URI: /admin/pre-receive-environments/{pre_receive_environment_id}
   */
  public async enterprise$admin$update$pre$receive$environment(
    params: Params$enterprise$admin$update$pre$receive$environment,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$update$pre$receive$environment$Status$200["application/json"]> {
    const url = this.baseUrl + `/admin/pre-receive-environments/${params.parameter.pre_receive_environment_id}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Start a pre-receive environment download
   * Triggers a new download of the environment tarball from the environment's `image_url`. When the download is finished, the newly downloaded tarball will overwrite the existing environment.
   *
   * If a download cannot be triggered, you will receive a `422 Unprocessable Entity` response.
   *
   * The possible error messages are:
   *
   * * _Cannot modify or delete the default environment_
   * * _Can not start a new download when a download is in progress_
   * operationId: enterprise-admin/start-pre-receive-environment-download
   * Request URI: /admin/pre-receive-environments/{pre_receive_environment_id}/downloads
   */
  public async enterprise$admin$start$pre$receive$environment$download(
    params: Params$enterprise$admin$start$pre$receive$environment$download,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$start$pre$receive$environment$download$Status$202["application/json"]> {
    const url = this.baseUrl + `/admin/pre-receive-environments/${params.parameter.pre_receive_environment_id}/downloads`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, undefined, undefined, option);
  }
  /**
   * Get the download status for a pre-receive environment
   * In addition to seeing the download status at the "[Get a pre-receive environment](#get-a-pre-receive-environment)" endpoint, there is also this separate endpoint for just the download status.
   * operationId: enterprise-admin/get-download-status-for-pre-receive-environment
   * Request URI: /admin/pre-receive-environments/{pre_receive_environment_id}/downloads/latest
   */
  public async enterprise$admin$get$download$status$for$pre$receive$environment(
    params: Params$enterprise$admin$get$download$status$for$pre$receive$environment,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$get$download$status$for$pre$receive$environment$Status$200["application/json"]> {
    const url = this.baseUrl + `/admin/pre-receive-environments/${params.parameter.pre_receive_environment_id}/downloads/latest`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * List pre-receive hooks
   * operationId: enterprise-admin/list-pre-receive-hooks
   * Request URI: /admin/pre-receive-hooks
   */
  public async enterprise$admin$list$pre$receive$hooks(
    params: Params$enterprise$admin$list$pre$receive$hooks,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$list$pre$receive$hooks$Status$200["application/json"]> {
    const url = this.baseUrl + `/admin/pre-receive-hooks`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
      direction: { value: params.parameter.direction, explode: false },
      sort: { value: params.parameter.sort, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create a pre-receive hook
   * operationId: enterprise-admin/create-pre-receive-hook
   * Request URI: /admin/pre-receive-hooks
   */
  public async enterprise$admin$create$pre$receive$hook(
    params: Params$enterprise$admin$create$pre$receive$hook,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$create$pre$receive$hook$Status$201["application/json"]> {
    const url = this.baseUrl + `/admin/pre-receive-hooks`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get a pre-receive hook
   * operationId: enterprise-admin/get-pre-receive-hook
   * Request URI: /admin/pre-receive-hooks/{pre_receive_hook_id}
   */
  public async enterprise$admin$get$pre$receive$hook(
    params: Params$enterprise$admin$get$pre$receive$hook,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$get$pre$receive$hook$Status$200["application/json"]> {
    const url = this.baseUrl + `/admin/pre-receive-hooks/${params.parameter.pre_receive_hook_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Delete a pre-receive hook
   * operationId: enterprise-admin/delete-pre-receive-hook
   * Request URI: /admin/pre-receive-hooks/{pre_receive_hook_id}
   */
  public async enterprise$admin$delete$pre$receive$hook(
    params: Params$enterprise$admin$delete$pre$receive$hook,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/admin/pre-receive-hooks/${params.parameter.pre_receive_hook_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Update a pre-receive hook
   * operationId: enterprise-admin/update-pre-receive-hook
   * Request URI: /admin/pre-receive-hooks/{pre_receive_hook_id}
   */
  public async enterprise$admin$update$pre$receive$hook(
    params: Params$enterprise$admin$update$pre$receive$hook,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$update$pre$receive$hook$Status$200["application/json"]> {
    const url = this.baseUrl + `/admin/pre-receive-hooks/${params.parameter.pre_receive_hook_id}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List personal access tokens
   * Lists personal access tokens for all users, including admin users.
   * operationId: enterprise-admin/list-personal-access-tokens
   * Request URI: /admin/tokens
   */
  public async enterprise$admin$list$personal$access$tokens(
    params: Params$enterprise$admin$list$personal$access$tokens,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$list$personal$access$tokens$Status$200["application/json"]> {
    const url = this.baseUrl + `/admin/tokens`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Delete a personal access token
   * Deletes a personal access token. Returns a `403 - Forbidden` status when a personal access token is in use. For example, if you access this endpoint with the same personal access token that you are trying to delete, you will receive this error.
   * operationId: enterprise-admin/delete-personal-access-token
   * Request URI: /admin/tokens/{token_id}
   */
  public async enterprise$admin$delete$personal$access$token(
    params: Params$enterprise$admin$delete$personal$access$token,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/admin/tokens/${params.parameter.token_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Create a user
   * If an external authentication mechanism is used, the login name should match the login name in the external system. If you are using LDAP authentication, you should also [update the LDAP mapping](https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#update-ldap-mapping-for-a-user) for the user.
   *
   * The login name will be normalized to only contain alphanumeric characters or single hyphens. For example, if you send `"octo_cat"` as the login, a user named `"octo-cat"` will be created.
   *
   * If the login name or email address is already associated with an account, the server will return a `422` response.
   * operationId: enterprise-admin/create-user
   * Request URI: /admin/users
   */
  public async enterprise$admin$create$user(
    params: Params$enterprise$admin$create$user,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$create$user$Status$201["application/json"]> {
    const url = this.baseUrl + `/admin/users`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Delete a user
   * Deleting a user will delete all their repositories, gists, applications, and personal settings. [Suspending a user](https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#suspend-a-user) is often a better option.
   *
   * You can delete any user account except your own.
   * operationId: enterprise-admin/delete-user
   * Request URI: /admin/users/{username}
   */
  public async enterprise$admin$delete$user(params: Params$enterprise$admin$delete$user, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/admin/users/${params.parameter.username}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Update the username for a user
   * operationId: enterprise-admin/update-username-for-user
   * Request URI: /admin/users/{username}
   */
  public async enterprise$admin$update$username$for$user(
    params: Params$enterprise$admin$update$username$for$user,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$update$username$for$user$Status$202["application/json"]> {
    const url = this.baseUrl + `/admin/users/${params.parameter.username}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Create an impersonation OAuth token
   * operationId: enterprise-admin/create-impersonation-o-auth-token
   * Request URI: /admin/users/{username}/authorizations
   */
  public async enterprise$admin$create$impersonation$o$auth$token(
    params: Params$enterprise$admin$create$impersonation$o$auth$token,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$create$impersonation$o$auth$token$Status$201["application/json"]> {
    const url = this.baseUrl + `/admin/users/${params.parameter.username}/authorizations`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Delete an impersonation OAuth token
   * operationId: enterprise-admin/delete-impersonation-o-auth-token
   * Request URI: /admin/users/{username}/authorizations
   */
  public async enterprise$admin$delete$impersonation$o$auth$token(
    params: Params$enterprise$admin$delete$impersonation$o$auth$token,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/admin/users/${params.parameter.username}/authorizations`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Get the authenticated app
   * Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the "[List installations for the authenticated app](https://docs.github.com/enterprise-server@3.4/rest/reference/apps#list-installations-for-the-authenticated-app)" endpoint.
   *
   * You must use a [JWT](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * operationId: apps/get-authenticated
   * Request URI: /app
   */
  public async apps$get$authenticated(option?: RequestOption): Promise<Response$apps$get$authenticated$Status$200["application/json"]> {
    const url = this.baseUrl + `/app`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Create a GitHub App from a manifest
   * Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`.
   * operationId: apps/create-from-manifest
   * Request URI: /app-manifests/{code}/conversions
   */
  public async apps$create$from$manifest(
    params: Params$apps$create$from$manifest,
    option?: RequestOption,
  ): Promise<Response$apps$create$from$manifest$Status$201["application/json"]> {
    const url = this.baseUrl + `/app-manifests/${params.parameter.code}/conversions`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get a webhook configuration for an app
   * Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
   *
   * You must use a [JWT](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * operationId: apps/get-webhook-config-for-app
   * Request URI: /app/hook/config
   */
  public async apps$get$webhook$config$for$app(
    option?: RequestOption,
  ): Promise<Response$apps$get$webhook$config$for$app$Status$200["application/json"]> {
    const url = this.baseUrl + `/app/hook/config`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Update a webhook configuration for an app
   * Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
   *
   * You must use a [JWT](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * operationId: apps/update-webhook-config-for-app
   * Request URI: /app/hook/config
   */
  public async apps$update$webhook$config$for$app(
    params: Params$apps$update$webhook$config$for$app,
    option?: RequestOption,
  ): Promise<Response$apps$update$webhook$config$for$app$Status$200["application/json"]> {
    const url = this.baseUrl + `/app/hook/config`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List deliveries for an app webhook
   * Returns a list of webhook deliveries for the webhook configured for a GitHub App.
   *
   * You must use a [JWT](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * operationId: apps/list-webhook-deliveries
   * Request URI: /app/hook/deliveries
   */
  public async apps$list$webhook$deliveries(
    params: Params$apps$list$webhook$deliveries,
    option?: RequestOption,
  ): Promise<Response$apps$list$webhook$deliveries$Status$200["application/json"]> {
    const url = this.baseUrl + `/app/hook/deliveries`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      cursor: { value: params.parameter.cursor, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get a delivery for an app webhook
   * Returns a delivery for the webhook configured for a GitHub App.
   *
   * You must use a [JWT](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * operationId: apps/get-webhook-delivery
   * Request URI: /app/hook/deliveries/{delivery_id}
   */
  public async apps$get$webhook$delivery(
    params: Params$apps$get$webhook$delivery,
    option?: RequestOption,
  ): Promise<Response$apps$get$webhook$delivery$Status$200["application/json"]> {
    const url = this.baseUrl + `/app/hook/deliveries/${params.parameter.delivery_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Redeliver a delivery for an app webhook
   * Redeliver a delivery for the webhook configured for a GitHub App.
   *
   * You must use a [JWT](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * operationId: apps/redeliver-webhook-delivery
   * Request URI: /app/hook/deliveries/{delivery_id}/attempts
   */
  public async apps$redeliver$webhook$delivery(
    params: Params$apps$redeliver$webhook$delivery,
    option?: RequestOption,
  ): Promise<Response$apps$redeliver$webhook$delivery$Status$202["application/json"]> {
    const url = this.baseUrl + `/app/hook/deliveries/${params.parameter.delivery_id}/attempts`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, undefined, undefined, option);
  }
  /**
   * List installations for the authenticated app
   * You must use a [JWT](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   *
   * The permissions the installation has are included under the `permissions` key.
   * operationId: apps/list-installations
   * Request URI: /app/installations
   */
  public async apps$list$installations(
    params: Params$apps$list$installations,
    option?: RequestOption,
  ): Promise<Response$apps$list$installations$Status$200["application/json"]> {
    const url = this.baseUrl + `/app/installations`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
      since: { value: params.parameter.since, explode: false },
      outdated: { value: params.parameter.outdated, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get an installation for the authenticated app
   * Enables an authenticated GitHub App to find an installation's information using the installation id.
   *
   * You must use a [JWT](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * operationId: apps/get-installation
   * Request URI: /app/installations/{installation_id}
   */
  public async apps$get$installation(
    params: Params$apps$get$installation,
    option?: RequestOption,
  ): Promise<Response$apps$get$installation$Status$200["application/json"]> {
    const url = this.baseUrl + `/app/installations/${params.parameter.installation_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Delete an installation for the authenticated app
   * Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the "[Suspend an app installation](https://docs.github.com/enterprise-server@3.4/rest/reference/apps/#suspend-an-app-installation)" endpoint.
   *
   * You must use a [JWT](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * operationId: apps/delete-installation
   * Request URI: /app/installations/{installation_id}
   */
  public async apps$delete$installation(params: Params$apps$delete$installation, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/app/installations/${params.parameter.installation_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Create an installation access token for an app
   * Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.
   *
   * You must use a [JWT](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * operationId: apps/create-installation-access-token
   * Request URI: /app/installations/{installation_id}/access_tokens
   */
  public async apps$create$installation$access$token(
    params: Params$apps$create$installation$access$token,
    option?: RequestOption,
  ): Promise<Response$apps$create$installation$access$token$Status$201["application/json"]> {
    const url = this.baseUrl + `/app/installations/${params.parameter.installation_id}/access_tokens`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Suspend an app installation
   * Suspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub Enterprise Server API or webhook events is blocked for that account.
   *
   * You must use a [JWT](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * operationId: apps/suspend-installation
   * Request URI: /app/installations/{installation_id}/suspended
   */
  public async apps$suspend$installation(params: Params$apps$suspend$installation, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/app/installations/${params.parameter.installation_id}/suspended`;
    const headers = {};
    return this.apiClient.request("PUT", url, headers, undefined, undefined, option);
  }
  /**
   * Unsuspend an app installation
   * Removes a GitHub App installation suspension.
   *
   * You must use a [JWT](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * operationId: apps/unsuspend-installation
   * Request URI: /app/installations/{installation_id}/suspended
   */
  public async apps$unsuspend$installation(params: Params$apps$unsuspend$installation, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/app/installations/${params.parameter.installation_id}/suspended`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * @deprecated
   * List your grants
   * **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.4/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.4/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.4/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
   *
   * You can use this API to list the set of OAuth applications that have been granted access to your account. Unlike the [list your authorizations](https://docs.github.com/enterprise-server@3.4/rest/reference/oauth-authorizations#list-your-authorizations) API, this API does not manage individual tokens. This API will return one entry for each OAuth application that has been granted access to your account, regardless of the number of tokens an application has generated for your user. The list of OAuth applications returned matches what is shown on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized). The `scopes` returned are the union of scopes authorized for the application. For example, if an application has one token with `repo` scope and another token with `user` scope, the grant will return `["repo", "user"]`.
   * operationId: oauth-authorizations/list-grants
   * Request URI: /applications/grants
   */
  public async oauth$authorizations$list$grants(
    params: Params$oauth$authorizations$list$grants,
    option?: RequestOption,
  ): Promise<Response$oauth$authorizations$list$grants$Status$200["application/json"]> {
    const url = this.baseUrl + `/applications/grants`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
      client_id: { value: params.parameter.client_id, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * @deprecated
   * Get a single grant
   * **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.4/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.4/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
   * operationId: oauth-authorizations/get-grant
   * Request URI: /applications/grants/{grant_id}
   */
  public async oauth$authorizations$get$grant(
    params: Params$oauth$authorizations$get$grant,
    option?: RequestOption,
  ): Promise<Response$oauth$authorizations$get$grant$Status$200["application/json"]> {
    const url = this.baseUrl + `/applications/grants/${params.parameter.grant_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * @deprecated
   * Delete a grant
   * **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.4/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.4/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.4/rest/reference/oauth-authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
   *
   * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for your user. Once deleted, the application has no access to your account and is no longer listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
   * operationId: oauth-authorizations/delete-grant
   * Request URI: /applications/grants/{grant_id}
   */
  public async oauth$authorizations$delete$grant(params: Params$oauth$authorizations$delete$grant, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/applications/grants/${params.parameter.grant_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Delete an app authorization
   * OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.4/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.
   * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
   * operationId: apps/delete-authorization
   * Request URI: /applications/{client_id}/grant
   */
  public async apps$delete$authorization(params: Params$apps$delete$authorization, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/applications/${params.parameter.client_id}/grant`;
    const headers = {
      "Content-Type": "application/json",
    };
    return this.apiClient.request("DELETE", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Check a token
   * OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.4/rest/overview/other-authentication-methods#basic-authentication) to use this endpoint, where the username is the OAuth application `client_id` and the password is its `client_secret`. Invalid tokens will return `404 NOT FOUND`.
   * operationId: apps/check-token
   * Request URI: /applications/{client_id}/token
   */
  public async apps$check$token(
    params: Params$apps$check$token,
    option?: RequestOption,
  ): Promise<Response$apps$check$token$Status$200["application/json"]> {
    const url = this.baseUrl + `/applications/${params.parameter.client_id}/token`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Delete an app token
   * OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.4/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.
   * operationId: apps/delete-token
   * Request URI: /applications/{client_id}/token
   */
  public async apps$delete$token(params: Params$apps$delete$token, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/applications/${params.parameter.client_id}/token`;
    const headers = {
      "Content-Type": "application/json",
    };
    return this.apiClient.request("DELETE", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Reset a token
   * OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.4/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
   * operationId: apps/reset-token
   * Request URI: /applications/{client_id}/token
   */
  public async apps$reset$token(
    params: Params$apps$reset$token,
    option?: RequestOption,
  ): Promise<Response$apps$reset$token$Status$200["application/json"]> {
    const url = this.baseUrl + `/applications/${params.parameter.client_id}/token`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Create a scoped access token
   * Use a non-scoped user-to-server OAuth access token to create a repository scoped and/or permission scoped user-to-server OAuth access token. You can specify which repositories the token can access and which permissions are granted to the token. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.4/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
   * operationId: apps/scope-token
   * Request URI: /applications/{client_id}/token/scoped
   */
  public async apps$scope$token(
    params: Params$apps$scope$token,
    option?: RequestOption,
  ): Promise<Response$apps$scope$token$Status$200["application/json"]> {
    const url = this.baseUrl + `/applications/${params.parameter.client_id}/token/scoped`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get an app
   * **Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).
   *
   * If the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
   * operationId: apps/get-by-slug
   * Request URI: /apps/{app_slug}
   */
  public async apps$get$by$slug(
    params: Params$apps$get$by$slug,
    option?: RequestOption,
  ): Promise<Response$apps$get$by$slug$Status$200["application/json"]> {
    const url = this.baseUrl + `/apps/${params.parameter.app_slug}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * @deprecated
   * List your authorizations
   * **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.4/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.4/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
   * operationId: oauth-authorizations/list-authorizations
   * Request URI: /authorizations
   */
  public async oauth$authorizations$list$authorizations(
    params: Params$oauth$authorizations$list$authorizations,
    option?: RequestOption,
  ): Promise<Response$oauth$authorizations$list$authorizations$Status$200["application/json"]> {
    const url = this.baseUrl + `/authorizations`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
      client_id: { value: params.parameter.client_id, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * @deprecated
   * Create a new authorization
   * **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.4/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.4/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.4/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
   *
   * **Warning:** Apps must use the [web application flow](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub Enterprise Server SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub Enterprise Server SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
   *
   * Creates OAuth tokens using [Basic Authentication](https://docs.github.com/enterprise-server@3.4/rest/overview/other-authentication-methods#basic-authentication). If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/enterprise-server@3.4/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
   *
   * To create tokens for a particular OAuth application using this endpoint, you must authenticate as the user you want to create an authorization for and provide the app's client ID and secret, found on your OAuth application's settings page. If your OAuth application intends to create multiple tokens for one user, use `fingerprint` to differentiate between them.
   *
   * You can also create tokens on GitHub Enterprise Server from the [personal access tokens settings](https://github.com/settings/tokens) page. Read more about these tokens in [the GitHub Help documentation](https://docs.github.com/articles/creating-an-access-token-for-command-line-use).
   *
   * Organizations that enforce SAML SSO require personal access tokens to be allowed. Read more about allowing tokens in [the GitHub Help documentation](https://docs.github.com/articles/about-identity-and-access-management-with-saml-single-sign-on).
   * operationId: oauth-authorizations/create-authorization
   * Request URI: /authorizations
   */
  public async oauth$authorizations$create$authorization(
    params: Params$oauth$authorizations$create$authorization,
    option?: RequestOption,
  ): Promise<Response$oauth$authorizations$create$authorization$Status$201["application/json"]> {
    const url = this.baseUrl + `/authorizations`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * @deprecated
   * Get-or-create an authorization for a specific app
   * **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.4/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.4/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.4/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
   *
   * **Warning:** Apps must use the [web application flow](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub Enterprise Server SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub Enterprise Server SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
   *
   * Creates a new authorization for the specified OAuth application, only if an authorization for that application doesn't already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.
   *
   * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/enterprise-server@3.4/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
   *
   * **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.4/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.4/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.4/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
   * operationId: oauth-authorizations/get-or-create-authorization-for-app
   * Request URI: /authorizations/clients/{client_id}
   */
  public async oauth$authorizations$get$or$create$authorization$for$app(
    params: Params$oauth$authorizations$get$or$create$authorization$for$app,
    option?: RequestOption,
  ): Promise<
    (
      | Response$oauth$authorizations$get$or$create$authorization$for$app$Status$200
      | Response$oauth$authorizations$get$or$create$authorization$for$app$Status$201
    )["application/json"]
  > {
    const url = this.baseUrl + `/authorizations/clients/${params.parameter.client_id}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * @deprecated
   * Get-or-create an authorization for a specific app and fingerprint
   * **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.4/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.4/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.4/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
   *
   * **Warning:** Apps must use the [web application flow](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub Enterprise Server SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub Enterprise Server SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
   *
   * This method will create a new authorization for the specified OAuth application, only if an authorization for that application and fingerprint do not already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. `fingerprint` is a unique string to distinguish an authorization from others created for the same client ID and user. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.
   *
   * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/enterprise-server@3.4/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
   * operationId: oauth-authorizations/get-or-create-authorization-for-app-and-fingerprint
   * Request URI: /authorizations/clients/{client_id}/{fingerprint}
   */
  public async oauth$authorizations$get$or$create$authorization$for$app$and$fingerprint(
    params: Params$oauth$authorizations$get$or$create$authorization$for$app$and$fingerprint,
    option?: RequestOption,
  ): Promise<
    (
      | Response$oauth$authorizations$get$or$create$authorization$for$app$and$fingerprint$Status$200
      | Response$oauth$authorizations$get$or$create$authorization$for$app$and$fingerprint$Status$201
    )["application/json"]
  > {
    const url = this.baseUrl + `/authorizations/clients/${params.parameter.client_id}/${params.parameter.fingerprint}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * @deprecated
   * Get a single authorization
   * **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.4/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.4/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
   * operationId: oauth-authorizations/get-authorization
   * Request URI: /authorizations/{authorization_id}
   */
  public async oauth$authorizations$get$authorization(
    params: Params$oauth$authorizations$get$authorization,
    option?: RequestOption,
  ): Promise<Response$oauth$authorizations$get$authorization$Status$200["application/json"]> {
    const url = this.baseUrl + `/authorizations/${params.parameter.authorization_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * @deprecated
   * Delete an authorization
   * **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.4/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.4/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
   * operationId: oauth-authorizations/delete-authorization
   * Request URI: /authorizations/{authorization_id}
   */
  public async oauth$authorizations$delete$authorization(
    params: Params$oauth$authorizations$delete$authorization,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/authorizations/${params.parameter.authorization_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * @deprecated
   * Update an existing authorization
   * **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.4/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.4/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.4/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
   *
   * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/enterprise-server@3.4/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
   *
   * You can only send one of these scope keys at a time.
   * operationId: oauth-authorizations/update-authorization
   * Request URI: /authorizations/{authorization_id}
   */
  public async oauth$authorizations$update$authorization(
    params: Params$oauth$authorizations$update$authorization,
    option?: RequestOption,
  ): Promise<Response$oauth$authorizations$update$authorization$Status$200["application/json"]> {
    const url = this.baseUrl + `/authorizations/${params.parameter.authorization_id}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get all codes of conduct
   * operationId: codes-of-conduct/get-all-codes-of-conduct
   * Request URI: /codes_of_conduct
   */
  public async codes$of$conduct$get$all$codes$of$conduct(
    option?: RequestOption,
  ): Promise<Response$codes$of$conduct$get$all$codes$of$conduct$Status$200["application/json"]> {
    const url = this.baseUrl + `/codes_of_conduct`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Get a code of conduct
   * operationId: codes-of-conduct/get-conduct-code
   * Request URI: /codes_of_conduct/{key}
   */
  public async codes$of$conduct$get$conduct$code(
    params: Params$codes$of$conduct$get$conduct$code,
    option?: RequestOption,
  ): Promise<Response$codes$of$conduct$get$conduct$code$Status$200["application/json"]> {
    const url = this.baseUrl + `/codes_of_conduct/${params.parameter.key}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Get emojis
   * Lists all the emojis available to use on GitHub Enterprise Server.
   * operationId: emojis/get
   * Request URI: /emojis
   */
  public async emojis$get(option?: RequestOption): Promise<Response$emojis$get$Status$200["application/json"]> {
    const url = this.baseUrl + `/emojis`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Get the global announcement banner
   * Gets the current message and expiration date of the global announcement banner in your enterprise.
   * operationId: enterprise-admin/get-announcement
   * Request URI: /enterprise/announcement
   */
  public async enterprise$admin$get$announcement(
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$get$announcement$Status$200["application/json"]> {
    const url = this.baseUrl + `/enterprise/announcement`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Remove the global announcement banner
   * Removes the global announcement banner in your enterprise.
   * operationId: enterprise-admin/remove-announcement
   * Request URI: /enterprise/announcement
   */
  public async enterprise$admin$remove$announcement(option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/enterprise/announcement`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Set the global announcement banner
   * Sets the message and expiration time for the global announcement banner in your enterprise.
   * operationId: enterprise-admin/set-announcement
   * Request URI: /enterprise/announcement
   */
  public async enterprise$admin$set$announcement(
    params: Params$enterprise$admin$set$announcement,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$set$announcement$Status$200["application/json"]> {
    const url = this.baseUrl + `/enterprise/announcement`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get license information
   * operationId: enterprise-admin/get-license-information
   * Request URI: /enterprise/settings/license
   */
  public async enterprise$admin$get$license$information(
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$get$license$information$Status$200["application/json"]> {
    const url = this.baseUrl + `/enterprise/settings/license`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Get all statistics
   * operationId: enterprise-admin/get-all-stats
   * Request URI: /enterprise/stats/all
   */
  public async enterprise$admin$get$all$stats(
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$get$all$stats$Status$200["application/json"]> {
    const url = this.baseUrl + `/enterprise/stats/all`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Get comment statistics
   * operationId: enterprise-admin/get-comment-stats
   * Request URI: /enterprise/stats/comments
   */
  public async enterprise$admin$get$comment$stats(
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$get$comment$stats$Status$200["application/json"]> {
    const url = this.baseUrl + `/enterprise/stats/comments`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Get gist statistics
   * operationId: enterprise-admin/get-gist-stats
   * Request URI: /enterprise/stats/gists
   */
  public async enterprise$admin$get$gist$stats(
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$get$gist$stats$Status$200["application/json"]> {
    const url = this.baseUrl + `/enterprise/stats/gists`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Get hooks statistics
   * operationId: enterprise-admin/get-hooks-stats
   * Request URI: /enterprise/stats/hooks
   */
  public async enterprise$admin$get$hooks$stats(
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$get$hooks$stats$Status$200["application/json"]> {
    const url = this.baseUrl + `/enterprise/stats/hooks`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Get issue statistics
   * operationId: enterprise-admin/get-issue-stats
   * Request URI: /enterprise/stats/issues
   */
  public async enterprise$admin$get$issue$stats(
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$get$issue$stats$Status$200["application/json"]> {
    const url = this.baseUrl + `/enterprise/stats/issues`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Get milestone statistics
   * operationId: enterprise-admin/get-milestone-stats
   * Request URI: /enterprise/stats/milestones
   */
  public async enterprise$admin$get$milestone$stats(
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$get$milestone$stats$Status$200["application/json"]> {
    const url = this.baseUrl + `/enterprise/stats/milestones`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Get organization statistics
   * operationId: enterprise-admin/get-org-stats
   * Request URI: /enterprise/stats/orgs
   */
  public async enterprise$admin$get$org$stats(
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$get$org$stats$Status$200["application/json"]> {
    const url = this.baseUrl + `/enterprise/stats/orgs`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Get pages statistics
   * operationId: enterprise-admin/get-pages-stats
   * Request URI: /enterprise/stats/pages
   */
  public async enterprise$admin$get$pages$stats(
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$get$pages$stats$Status$200["application/json"]> {
    const url = this.baseUrl + `/enterprise/stats/pages`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Get pull request statistics
   * operationId: enterprise-admin/get-pull-request-stats
   * Request URI: /enterprise/stats/pulls
   */
  public async enterprise$admin$get$pull$request$stats(
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$get$pull$request$stats$Status$200["application/json"]> {
    const url = this.baseUrl + `/enterprise/stats/pulls`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Get repository statistics
   * operationId: enterprise-admin/get-repo-stats
   * Request URI: /enterprise/stats/repos
   */
  public async enterprise$admin$get$repo$stats(
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$get$repo$stats$Status$200["application/json"]> {
    const url = this.baseUrl + `/enterprise/stats/repos`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Get users statistics
   * operationId: enterprise-admin/get-user-stats
   * Request URI: /enterprise/stats/users
   */
  public async enterprise$admin$get$user$stats(
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$get$user$stats$Status$200["application/json"]> {
    const url = this.baseUrl + `/enterprise/stats/users`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Get GitHub Actions permissions for an enterprise
   * Gets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   * operationId: enterprise-admin/get-github-actions-permissions-enterprise
   * Request URI: /enterprises/{enterprise}/actions/permissions
   */
  public async enterprise$admin$get$github$actions$permissions$enterprise(
    params: Params$enterprise$admin$get$github$actions$permissions$enterprise,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$get$github$actions$permissions$enterprise$Status$200["application/json"]> {
    const url = this.baseUrl + `/enterprises/${params.parameter.enterprise}/actions/permissions`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Set GitHub Actions permissions for an enterprise
   * Sets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   * operationId: enterprise-admin/set-github-actions-permissions-enterprise
   * Request URI: /enterprises/{enterprise}/actions/permissions
   */
  public async enterprise$admin$set$github$actions$permissions$enterprise(
    params: Params$enterprise$admin$set$github$actions$permissions$enterprise,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/enterprises/${params.parameter.enterprise}/actions/permissions`;
    const headers = {
      "Content-Type": "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List selected organizations enabled for GitHub Actions in an enterprise
   * Lists the organizations that are selected to have GitHub Actions enabled in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   * operationId: enterprise-admin/list-selected-organizations-enabled-github-actions-enterprise
   * Request URI: /enterprises/{enterprise}/actions/permissions/organizations
   */
  public async enterprise$admin$list$selected$organizations$enabled$github$actions$enterprise(
    params: Params$enterprise$admin$list$selected$organizations$enabled$github$actions$enterprise,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$list$selected$organizations$enabled$github$actions$enterprise$Status$200["application/json"]> {
    const url = this.baseUrl + `/enterprises/${params.parameter.enterprise}/actions/permissions/organizations`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Set selected organizations enabled for GitHub Actions in an enterprise
   * Replaces the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   * operationId: enterprise-admin/set-selected-organizations-enabled-github-actions-enterprise
   * Request URI: /enterprises/{enterprise}/actions/permissions/organizations
   */
  public async enterprise$admin$set$selected$organizations$enabled$github$actions$enterprise(
    params: Params$enterprise$admin$set$selected$organizations$enabled$github$actions$enterprise,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/enterprises/${params.parameter.enterprise}/actions/permissions/organizations`;
    const headers = {
      "Content-Type": "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Enable a selected organization for GitHub Actions in an enterprise
   * Adds an organization to the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   * operationId: enterprise-admin/enable-selected-organization-github-actions-enterprise
   * Request URI: /enterprises/{enterprise}/actions/permissions/organizations/{org_id}
   */
  public async enterprise$admin$enable$selected$organization$github$actions$enterprise(
    params: Params$enterprise$admin$enable$selected$organization$github$actions$enterprise,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/enterprises/${params.parameter.enterprise}/actions/permissions/organizations/${params.parameter.org_id}`;
    const headers = {};
    return this.apiClient.request("PUT", url, headers, undefined, undefined, option);
  }
  /**
   * Disable a selected organization for GitHub Actions in an enterprise
   * Removes an organization from the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   * operationId: enterprise-admin/disable-selected-organization-github-actions-enterprise
   * Request URI: /enterprises/{enterprise}/actions/permissions/organizations/{org_id}
   */
  public async enterprise$admin$disable$selected$organization$github$actions$enterprise(
    params: Params$enterprise$admin$disable$selected$organization$github$actions$enterprise,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/enterprises/${params.parameter.enterprise}/actions/permissions/organizations/${params.parameter.org_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Get allowed actions for an enterprise
   * Gets the selected actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   * operationId: enterprise-admin/get-allowed-actions-enterprise
   * Request URI: /enterprises/{enterprise}/actions/permissions/selected-actions
   */
  public async enterprise$admin$get$allowed$actions$enterprise(
    params: Params$enterprise$admin$get$allowed$actions$enterprise,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$get$allowed$actions$enterprise$Status$200["application/json"]> {
    const url = this.baseUrl + `/enterprises/${params.parameter.enterprise}/actions/permissions/selected-actions`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Set allowed actions for an enterprise
   * Sets the actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   * operationId: enterprise-admin/set-allowed-actions-enterprise
   * Request URI: /enterprises/{enterprise}/actions/permissions/selected-actions
   */
  public async enterprise$admin$set$allowed$actions$enterprise(
    params: Params$enterprise$admin$set$allowed$actions$enterprise,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/enterprises/${params.parameter.enterprise}/actions/permissions/selected-actions`;
    const headers = {
      "Content-Type": "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List self-hosted runner groups for an enterprise
   * Lists all self-hosted runner groups for an enterprise.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   * operationId: enterprise-admin/list-self-hosted-runner-groups-for-enterprise
   * Request URI: /enterprises/{enterprise}/actions/runner-groups
   */
  public async enterprise$admin$list$self$hosted$runner$groups$for$enterprise(
    params: Params$enterprise$admin$list$self$hosted$runner$groups$for$enterprise,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$list$self$hosted$runner$groups$for$enterprise$Status$200["application/json"]> {
    const url = this.baseUrl + `/enterprises/${params.parameter.enterprise}/actions/runner-groups`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create a self-hosted runner group for an enterprise
   * Creates a new self-hosted runner group for an enterprise.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   * operationId: enterprise-admin/create-self-hosted-runner-group-for-enterprise
   * Request URI: /enterprises/{enterprise}/actions/runner-groups
   */
  public async enterprise$admin$create$self$hosted$runner$group$for$enterprise(
    params: Params$enterprise$admin$create$self$hosted$runner$group$for$enterprise,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$create$self$hosted$runner$group$for$enterprise$Status$201["application/json"]> {
    const url = this.baseUrl + `/enterprises/${params.parameter.enterprise}/actions/runner-groups`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get a self-hosted runner group for an enterprise
   * Gets a specific self-hosted runner group for an enterprise.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   * operationId: enterprise-admin/get-self-hosted-runner-group-for-enterprise
   * Request URI: /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}
   */
  public async enterprise$admin$get$self$hosted$runner$group$for$enterprise(
    params: Params$enterprise$admin$get$self$hosted$runner$group$for$enterprise,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$get$self$hosted$runner$group$for$enterprise$Status$200["application/json"]> {
    const url = this.baseUrl + `/enterprises/${params.parameter.enterprise}/actions/runner-groups/${params.parameter.runner_group_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Delete a self-hosted runner group from an enterprise
   * Deletes a self-hosted runner group for an enterprise.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   * operationId: enterprise-admin/delete-self-hosted-runner-group-from-enterprise
   * Request URI: /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}
   */
  public async enterprise$admin$delete$self$hosted$runner$group$from$enterprise(
    params: Params$enterprise$admin$delete$self$hosted$runner$group$from$enterprise,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/enterprises/${params.parameter.enterprise}/actions/runner-groups/${params.parameter.runner_group_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Update a self-hosted runner group for an enterprise
   * Updates the `name` and `visibility` of a self-hosted runner group in an enterprise.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   * operationId: enterprise-admin/update-self-hosted-runner-group-for-enterprise
   * Request URI: /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}
   */
  public async enterprise$admin$update$self$hosted$runner$group$for$enterprise(
    params: Params$enterprise$admin$update$self$hosted$runner$group$for$enterprise,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$update$self$hosted$runner$group$for$enterprise$Status$200["application/json"]> {
    const url = this.baseUrl + `/enterprises/${params.parameter.enterprise}/actions/runner-groups/${params.parameter.runner_group_id}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List organization access to a self-hosted runner group in an enterprise
   * Lists the organizations with access to a self-hosted runner group.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   * operationId: enterprise-admin/list-org-access-to-self-hosted-runner-group-in-enterprise
   * Request URI: /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations
   */
  public async enterprise$admin$list$org$access$to$self$hosted$runner$group$in$enterprise(
    params: Params$enterprise$admin$list$org$access$to$self$hosted$runner$group$in$enterprise,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$list$org$access$to$self$hosted$runner$group$in$enterprise$Status$200["application/json"]> {
    const url =
      this.baseUrl + `/enterprises/${params.parameter.enterprise}/actions/runner-groups/${params.parameter.runner_group_id}/organizations`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Set organization access for a self-hosted runner group in an enterprise
   * Replaces the list of organizations that have access to a self-hosted runner configured in an enterprise.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   * operationId: enterprise-admin/set-org-access-to-self-hosted-runner-group-in-enterprise
   * Request URI: /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations
   */
  public async enterprise$admin$set$org$access$to$self$hosted$runner$group$in$enterprise(
    params: Params$enterprise$admin$set$org$access$to$self$hosted$runner$group$in$enterprise,
    option?: RequestOption,
  ): Promise<void> {
    const url =
      this.baseUrl + `/enterprises/${params.parameter.enterprise}/actions/runner-groups/${params.parameter.runner_group_id}/organizations`;
    const headers = {
      "Content-Type": "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Add organization access to a self-hosted runner group in an enterprise
   * Adds an organization to the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise)."
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   * operationId: enterprise-admin/add-org-access-to-self-hosted-runner-group-in-enterprise
   * Request URI: /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}
   */
  public async enterprise$admin$add$org$access$to$self$hosted$runner$group$in$enterprise(
    params: Params$enterprise$admin$add$org$access$to$self$hosted$runner$group$in$enterprise,
    option?: RequestOption,
  ): Promise<void> {
    const url =
      this.baseUrl +
      `/enterprises/${params.parameter.enterprise}/actions/runner-groups/${params.parameter.runner_group_id}/organizations/${params.parameter.org_id}`;
    const headers = {};
    return this.apiClient.request("PUT", url, headers, undefined, undefined, option);
  }
  /**
   * Remove organization access to a self-hosted runner group in an enterprise
   * Removes an organization from the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise)."
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   * operationId: enterprise-admin/remove-org-access-to-self-hosted-runner-group-in-enterprise
   * Request URI: /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}
   */
  public async enterprise$admin$remove$org$access$to$self$hosted$runner$group$in$enterprise(
    params: Params$enterprise$admin$remove$org$access$to$self$hosted$runner$group$in$enterprise,
    option?: RequestOption,
  ): Promise<void> {
    const url =
      this.baseUrl +
      `/enterprises/${params.parameter.enterprise}/actions/runner-groups/${params.parameter.runner_group_id}/organizations/${params.parameter.org_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * List self-hosted runners in a group for an enterprise
   * Lists the self-hosted runners that are in a specific enterprise group.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   * operationId: enterprise-admin/list-self-hosted-runners-in-group-for-enterprise
   * Request URI: /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners
   */
  public async enterprise$admin$list$self$hosted$runners$in$group$for$enterprise(
    params: Params$enterprise$admin$list$self$hosted$runners$in$group$for$enterprise,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$list$self$hosted$runners$in$group$for$enterprise$Status$200["application/json"]> {
    const url = this.baseUrl + `/enterprises/${params.parameter.enterprise}/actions/runner-groups/${params.parameter.runner_group_id}/runners`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Set self-hosted runners in a group for an enterprise
   * Replaces the list of self-hosted runners that are part of an enterprise runner group.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   * operationId: enterprise-admin/set-self-hosted-runners-in-group-for-enterprise
   * Request URI: /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners
   */
  public async enterprise$admin$set$self$hosted$runners$in$group$for$enterprise(
    params: Params$enterprise$admin$set$self$hosted$runners$in$group$for$enterprise,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/enterprises/${params.parameter.enterprise}/actions/runner-groups/${params.parameter.runner_group_id}/runners`;
    const headers = {
      "Content-Type": "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Add a self-hosted runner to a group for an enterprise
   * Adds a self-hosted runner to a runner group configured in an enterprise.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise`
   * scope to use this endpoint.
   * operationId: enterprise-admin/add-self-hosted-runner-to-group-for-enterprise
   * Request URI: /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}
   */
  public async enterprise$admin$add$self$hosted$runner$to$group$for$enterprise(
    params: Params$enterprise$admin$add$self$hosted$runner$to$group$for$enterprise,
    option?: RequestOption,
  ): Promise<void> {
    const url =
      this.baseUrl +
      `/enterprises/${params.parameter.enterprise}/actions/runner-groups/${params.parameter.runner_group_id}/runners/${params.parameter.runner_id}`;
    const headers = {};
    return this.apiClient.request("PUT", url, headers, undefined, undefined, option);
  }
  /**
   * Remove a self-hosted runner from a group for an enterprise
   * Removes a self-hosted runner from a group configured in an enterprise. The runner is then returned to the default group.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   * operationId: enterprise-admin/remove-self-hosted-runner-from-group-for-enterprise
   * Request URI: /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}
   */
  public async enterprise$admin$remove$self$hosted$runner$from$group$for$enterprise(
    params: Params$enterprise$admin$remove$self$hosted$runner$from$group$for$enterprise,
    option?: RequestOption,
  ): Promise<void> {
    const url =
      this.baseUrl +
      `/enterprises/${params.parameter.enterprise}/actions/runner-groups/${params.parameter.runner_group_id}/runners/${params.parameter.runner_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * List self-hosted runners for an enterprise
   * Lists all self-hosted runners configured for an enterprise.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   * operationId: enterprise-admin/list-self-hosted-runners-for-enterprise
   * Request URI: /enterprises/{enterprise}/actions/runners
   */
  public async enterprise$admin$list$self$hosted$runners$for$enterprise(
    params: Params$enterprise$admin$list$self$hosted$runners$for$enterprise,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$list$self$hosted$runners$for$enterprise$Status$200["application/json"]> {
    const url = this.baseUrl + `/enterprises/${params.parameter.enterprise}/actions/runners`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List runner applications for an enterprise
   * Lists binaries for the runner application that you can download and run.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   * operationId: enterprise-admin/list-runner-applications-for-enterprise
   * Request URI: /enterprises/{enterprise}/actions/runners/downloads
   */
  public async enterprise$admin$list$runner$applications$for$enterprise(
    params: Params$enterprise$admin$list$runner$applications$for$enterprise,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$list$runner$applications$for$enterprise$Status$200["application/json"]> {
    const url = this.baseUrl + `/enterprises/${params.parameter.enterprise}/actions/runners/downloads`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Create a registration token for an enterprise
   * Returns a token that you can pass to the `config` script. The token expires after one hour.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   *
   * #### Example using registration token
   *
   * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
   *
   * ```
   * ./config.sh --url https://github.com/enterprises/octo-enterprise --token TOKEN
   * ```
   * operationId: enterprise-admin/create-registration-token-for-enterprise
   * Request URI: /enterprises/{enterprise}/actions/runners/registration-token
   */
  public async enterprise$admin$create$registration$token$for$enterprise(
    params: Params$enterprise$admin$create$registration$token$for$enterprise,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$create$registration$token$for$enterprise$Status$201["application/json"]> {
    const url = this.baseUrl + `/enterprises/${params.parameter.enterprise}/actions/runners/registration-token`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, undefined, undefined, option);
  }
  /**
   * Create a remove token for an enterprise
   * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an enterprise. The token expires after one hour.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   *
   * #### Example using remove token
   *
   * To remove your self-hosted runner from an enterprise, replace `TOKEN` with the remove token provided by this
   * endpoint.
   *
   * ```
   * ./config.sh remove --token TOKEN
   * ```
   * operationId: enterprise-admin/create-remove-token-for-enterprise
   * Request URI: /enterprises/{enterprise}/actions/runners/remove-token
   */
  public async enterprise$admin$create$remove$token$for$enterprise(
    params: Params$enterprise$admin$create$remove$token$for$enterprise,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$create$remove$token$for$enterprise$Status$201["application/json"]> {
    const url = this.baseUrl + `/enterprises/${params.parameter.enterprise}/actions/runners/remove-token`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, undefined, undefined, option);
  }
  /**
   * Get a self-hosted runner for an enterprise
   * Gets a specific self-hosted runner configured in an enterprise.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   * operationId: enterprise-admin/get-self-hosted-runner-for-enterprise
   * Request URI: /enterprises/{enterprise}/actions/runners/{runner_id}
   */
  public async enterprise$admin$get$self$hosted$runner$for$enterprise(
    params: Params$enterprise$admin$get$self$hosted$runner$for$enterprise,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$get$self$hosted$runner$for$enterprise$Status$200["application/json"]> {
    const url = this.baseUrl + `/enterprises/${params.parameter.enterprise}/actions/runners/${params.parameter.runner_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Delete a self-hosted runner from an enterprise
   * Forces the removal of a self-hosted runner from an enterprise. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   * operationId: enterprise-admin/delete-self-hosted-runner-from-enterprise
   * Request URI: /enterprises/{enterprise}/actions/runners/{runner_id}
   */
  public async enterprise$admin$delete$self$hosted$runner$from$enterprise(
    params: Params$enterprise$admin$delete$self$hosted$runner$from$enterprise,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/enterprises/${params.parameter.enterprise}/actions/runners/${params.parameter.runner_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * List labels for a self-hosted runner for an enterprise
   * Lists all labels for a self-hosted runner configured in an enterprise.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   * operationId: enterprise-admin/list-labels-for-self-hosted-runner-for-enterprise
   * Request URI: /enterprises/{enterprise}/actions/runners/{runner_id}/labels
   */
  public async enterprise$admin$list$labels$for$self$hosted$runner$for$enterprise(
    params: Params$enterprise$admin$list$labels$for$self$hosted$runner$for$enterprise,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$list$labels$for$self$hosted$runner$for$enterprise$Status$200["application/json"]> {
    const url = this.baseUrl + `/enterprises/${params.parameter.enterprise}/actions/runners/${params.parameter.runner_id}/labels`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Set custom labels for a self-hosted runner for an enterprise
   * Remove all previous custom labels and set the new custom labels for a specific
   * self-hosted runner configured in an enterprise.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   * operationId: enterprise-admin/set-custom-labels-for-self-hosted-runner-for-enterprise
   * Request URI: /enterprises/{enterprise}/actions/runners/{runner_id}/labels
   */
  public async enterprise$admin$set$custom$labels$for$self$hosted$runner$for$enterprise(
    params: Params$enterprise$admin$set$custom$labels$for$self$hosted$runner$for$enterprise,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$set$custom$labels$for$self$hosted$runner$for$enterprise$Status$200["application/json"]> {
    const url = this.baseUrl + `/enterprises/${params.parameter.enterprise}/actions/runners/${params.parameter.runner_id}/labels`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Add custom labels to a self-hosted runner for an enterprise
   * Add custom labels to a self-hosted runner configured in an enterprise.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   * operationId: enterprise-admin/add-custom-labels-to-self-hosted-runner-for-enterprise
   * Request URI: /enterprises/{enterprise}/actions/runners/{runner_id}/labels
   */
  public async enterprise$admin$add$custom$labels$to$self$hosted$runner$for$enterprise(
    params: Params$enterprise$admin$add$custom$labels$to$self$hosted$runner$for$enterprise,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$add$custom$labels$to$self$hosted$runner$for$enterprise$Status$200["application/json"]> {
    const url = this.baseUrl + `/enterprises/${params.parameter.enterprise}/actions/runners/${params.parameter.runner_id}/labels`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Remove all custom labels from a self-hosted runner for an enterprise
   * Remove all custom labels from a self-hosted runner configured in an
   * enterprise. Returns the remaining read-only labels from the runner.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   * operationId: enterprise-admin/remove-all-custom-labels-from-self-hosted-runner-for-enterprise
   * Request URI: /enterprises/{enterprise}/actions/runners/{runner_id}/labels
   */
  public async enterprise$admin$remove$all$custom$labels$from$self$hosted$runner$for$enterprise(
    params: Params$enterprise$admin$remove$all$custom$labels$from$self$hosted$runner$for$enterprise,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$remove$all$custom$labels$from$self$hosted$runner$for$enterprise$Status$200["application/json"]> {
    const url = this.baseUrl + `/enterprises/${params.parameter.enterprise}/actions/runners/${params.parameter.runner_id}/labels`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Remove a custom label from a self-hosted runner for an enterprise
   * Remove a custom label from a self-hosted runner configured
   * in an enterprise. Returns the remaining labels from the runner.
   *
   * This endpoint returns a `404 Not Found` status if the custom label is not
   * present on the runner.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   * operationId: enterprise-admin/remove-custom-label-from-self-hosted-runner-for-enterprise
   * Request URI: /enterprises/{enterprise}/actions/runners/{runner_id}/labels/{name}
   */
  public async enterprise$admin$remove$custom$label$from$self$hosted$runner$for$enterprise(
    params: Params$enterprise$admin$remove$custom$label$from$self$hosted$runner$for$enterprise,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$remove$custom$label$from$self$hosted$runner$for$enterprise$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/enterprises/${params.parameter.enterprise}/actions/runners/${params.parameter.runner_id}/labels/${params.parameter.name}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Get the audit log for an enterprise
   * Gets the audit log for an enterprise. To use this endpoint, you must be an enterprise admin, and you must use an access token with the `admin:enterprise` scope.
   * operationId: enterprise-admin/get-audit-log
   * Request URI: /enterprises/{enterprise}/audit-log
   */
  public async enterprise$admin$get$audit$log(
    params: Params$enterprise$admin$get$audit$log,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$get$audit$log$Status$200["application/json"]> {
    const url = this.baseUrl + `/enterprises/${params.parameter.enterprise}/audit-log`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      phrase: { value: params.parameter.phrase, explode: false },
      include: { value: params.parameter.include, explode: false },
      after: { value: params.parameter.after, explode: false },
      before: { value: params.parameter.before, explode: false },
      order: { value: params.parameter.order, explode: false },
      page: { value: params.parameter.page, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List secret scanning alerts for an enterprise
   * Lists secret scanning alerts for eligible repositories in an enterprise, from newest to oldest.
   * To use this endpoint, you must be a member of the enterprise, and you must use an access token with the `repo` scope or `security_events` scope. Alerts are only returned for organizations in the enterprise for which you are an organization owner or a [security manager](https://docs.github.com/enterprise-server@3.4/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).
   * operationId: secret-scanning/list-alerts-for-enterprise
   * Request URI: /enterprises/{enterprise}/secret-scanning/alerts
   */
  public async secret$scanning$list$alerts$for$enterprise(
    params: Params$secret$scanning$list$alerts$for$enterprise,
    option?: RequestOption,
  ): Promise<Response$secret$scanning$list$alerts$for$enterprise$Status$200["application/json"]> {
    const url = this.baseUrl + `/enterprises/${params.parameter.enterprise}/secret-scanning/alerts`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      state: { value: params.parameter.state, explode: false },
      secret_type: { value: params.parameter.secret_type, explode: false },
      resolution: { value: params.parameter.resolution, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      before: { value: params.parameter.before, explode: false },
      after: { value: params.parameter.after, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get GitHub Advanced Security active committers for an enterprise
   * Gets the GitHub Advanced Security active committers for an enterprise per repository.
   * Each distinct user login across all repositories is counted as a single Advanced Security seat, so the total_advanced_security_committers is not the sum of active_users for each repository.
   * operationId: billing/get-github-advanced-security-billing-ghe
   * Request URI: /enterprises/{enterprise}/settings/billing/advanced-security
   */
  public async billing$get$github$advanced$security$billing$ghe(
    params: Params$billing$get$github$advanced$security$billing$ghe,
    option?: RequestOption,
  ): Promise<Response$billing$get$github$advanced$security$billing$ghe$Status$200["application/json"]> {
    const url = this.baseUrl + `/enterprises/${params.parameter.enterprise}/settings/billing/advanced-security`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List public events
   * We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago.
   * operationId: activity/list-public-events
   * Request URI: /events
   */
  public async activity$list$public$events(
    params: Params$activity$list$public$events,
    option?: RequestOption,
  ): Promise<Response$activity$list$public$events$Status$200["application/json"]> {
    const url = this.baseUrl + `/events`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get feeds
   * GitHub Enterprise Server provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:
   *
   * *   **Timeline**: The GitHub Enterprise Server global public timeline
   * *   **User**: The public timeline for any user, using [URI template](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#hypermedia)
   * *   **Current user public**: The public timeline for the authenticated user
   * *   **Current user**: The private timeline for the authenticated user
   * *   **Current user actor**: The private timeline for activity created by the authenticated user
   * *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.
   * *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub Enterprise Server.
   *
   * **Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/enterprise-server@3.4/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens.
   * operationId: activity/get-feeds
   * Request URI: /feeds
   */
  public async activity$get$feeds(option?: RequestOption): Promise<Response$activity$get$feeds$Status$200["application/json"]> {
    const url = this.baseUrl + `/feeds`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * List gists for the authenticated user
   * Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:
   * operationId: gists/list
   * Request URI: /gists
   */
  public async gists$list(params: Params$gists$list, option?: RequestOption): Promise<Response$gists$list$Status$200["application/json"]> {
    const url = this.baseUrl + `/gists`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      since: { value: params.parameter.since, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create a gist
   * Allows you to add a new gist with one or more files.
   *
   * **Note:** Don't name your files "gistfile" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
   * operationId: gists/create
   * Request URI: /gists
   */
  public async gists$create(
    params: Params$gists$create,
    option?: RequestOption,
  ): Promise<Response$gists$create$Status$201["application/json"]> {
    const url = this.baseUrl + `/gists`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List public gists
   * List public gists sorted by most recently updated to least recently updated.
   *
   * Note: With [pagination](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
   * operationId: gists/list-public
   * Request URI: /gists/public
   */
  public async gists$list$public(
    params: Params$gists$list$public,
    option?: RequestOption,
  ): Promise<Response$gists$list$public$Status$200["application/json"]> {
    const url = this.baseUrl + `/gists/public`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      since: { value: params.parameter.since, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List starred gists
   * List the authenticated user's starred gists:
   * operationId: gists/list-starred
   * Request URI: /gists/starred
   */
  public async gists$list$starred(
    params: Params$gists$list$starred,
    option?: RequestOption,
  ): Promise<Response$gists$list$starred$Status$200["application/json"]> {
    const url = this.baseUrl + `/gists/starred`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      since: { value: params.parameter.since, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get a gist
   * operationId: gists/get
   * Request URI: /gists/{gist_id}
   */
  public async gists$get(params: Params$gists$get, option?: RequestOption): Promise<Response$gists$get$Status$200["application/json"]> {
    const url = this.baseUrl + `/gists/${params.parameter.gist_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Delete a gist
   * operationId: gists/delete
   * Request URI: /gists/{gist_id}
   */
  public async gists$delete(params: Params$gists$delete, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/gists/${params.parameter.gist_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Update a gist
   * Allows you to update or delete a gist file and rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged.
   * operationId: gists/update
   * Request URI: /gists/{gist_id}
   */
  public async gists$update(
    params: Params$gists$update,
    option?: RequestOption,
  ): Promise<Response$gists$update$Status$200["application/json"]> {
    const url = this.baseUrl + `/gists/${params.parameter.gist_id}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List gist comments
   * operationId: gists/list-comments
   * Request URI: /gists/{gist_id}/comments
   */
  public async gists$list$comments(
    params: Params$gists$list$comments,
    option?: RequestOption,
  ): Promise<Response$gists$list$comments$Status$200["application/json"]> {
    const url = this.baseUrl + `/gists/${params.parameter.gist_id}/comments`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create a gist comment
   * operationId: gists/create-comment
   * Request URI: /gists/{gist_id}/comments
   */
  public async gists$create$comment(
    params: Params$gists$create$comment,
    option?: RequestOption,
  ): Promise<Response$gists$create$comment$Status$201["application/json"]> {
    const url = this.baseUrl + `/gists/${params.parameter.gist_id}/comments`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get a gist comment
   * operationId: gists/get-comment
   * Request URI: /gists/{gist_id}/comments/{comment_id}
   */
  public async gists$get$comment(
    params: Params$gists$get$comment,
    option?: RequestOption,
  ): Promise<Response$gists$get$comment$Status$200["application/json"]> {
    const url = this.baseUrl + `/gists/${params.parameter.gist_id}/comments/${params.parameter.comment_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Delete a gist comment
   * operationId: gists/delete-comment
   * Request URI: /gists/{gist_id}/comments/{comment_id}
   */
  public async gists$delete$comment(params: Params$gists$delete$comment, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/gists/${params.parameter.gist_id}/comments/${params.parameter.comment_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Update a gist comment
   * operationId: gists/update-comment
   * Request URI: /gists/{gist_id}/comments/{comment_id}
   */
  public async gists$update$comment(
    params: Params$gists$update$comment,
    option?: RequestOption,
  ): Promise<Response$gists$update$comment$Status$200["application/json"]> {
    const url = this.baseUrl + `/gists/${params.parameter.gist_id}/comments/${params.parameter.comment_id}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List gist commits
   * operationId: gists/list-commits
   * Request URI: /gists/{gist_id}/commits
   */
  public async gists$list$commits(
    params: Params$gists$list$commits,
    option?: RequestOption,
  ): Promise<Response$gists$list$commits$Status$200["application/json"]> {
    const url = this.baseUrl + `/gists/${params.parameter.gist_id}/commits`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List gist forks
   * operationId: gists/list-forks
   * Request URI: /gists/{gist_id}/forks
   */
  public async gists$list$forks(
    params: Params$gists$list$forks,
    option?: RequestOption,
  ): Promise<Response$gists$list$forks$Status$200["application/json"]> {
    const url = this.baseUrl + `/gists/${params.parameter.gist_id}/forks`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Fork a gist
   * **Note**: This was previously `/gists/:gist_id/fork`.
   * operationId: gists/fork
   * Request URI: /gists/{gist_id}/forks
   */
  public async gists$fork(params: Params$gists$fork, option?: RequestOption): Promise<Response$gists$fork$Status$201["application/json"]> {
    const url = this.baseUrl + `/gists/${params.parameter.gist_id}/forks`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, undefined, undefined, option);
  }
  /**
   * Check if a gist is starred
   * operationId: gists/check-is-starred
   * Request URI: /gists/{gist_id}/star
   */
  public async gists$check$is$starred(params: Params$gists$check$is$starred, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/gists/${params.parameter.gist_id}/star`;
    const headers = {};
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Star a gist
   * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#http-verbs)."
   * operationId: gists/star
   * Request URI: /gists/{gist_id}/star
   */
  public async gists$star(params: Params$gists$star, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/gists/${params.parameter.gist_id}/star`;
    const headers = {};
    return this.apiClient.request("PUT", url, headers, undefined, undefined, option);
  }
  /**
   * Unstar a gist
   * operationId: gists/unstar
   * Request URI: /gists/{gist_id}/star
   */
  public async gists$unstar(params: Params$gists$unstar, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/gists/${params.parameter.gist_id}/star`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Get a gist revision
   * operationId: gists/get-revision
   * Request URI: /gists/{gist_id}/{sha}
   */
  public async gists$get$revision(
    params: Params$gists$get$revision,
    option?: RequestOption,
  ): Promise<Response$gists$get$revision$Status$200["application/json"]> {
    const url = this.baseUrl + `/gists/${params.parameter.gist_id}/${params.parameter.sha}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Get all gitignore templates
   * List all templates available to pass as an option when [creating a repository](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#create-a-repository-for-the-authenticated-user).
   * operationId: gitignore/get-all-templates
   * Request URI: /gitignore/templates
   */
  public async gitignore$get$all$templates(
    option?: RequestOption,
  ): Promise<Response$gitignore$get$all$templates$Status$200["application/json"]> {
    const url = this.baseUrl + `/gitignore/templates`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Get a gitignore template
   * The API also allows fetching the source of a single template.
   * Use the raw [media type](https://docs.github.com/enterprise-server@3.4/rest/overview/media-types/) to get the raw contents.
   * operationId: gitignore/get-template
   * Request URI: /gitignore/templates/{name}
   */
  public async gitignore$get$template(
    params: Params$gitignore$get$template,
    option?: RequestOption,
  ): Promise<Response$gitignore$get$template$Status$200["application/json"]> {
    const url = this.baseUrl + `/gitignore/templates/${params.parameter.name}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * List repositories accessible to the app installation
   * List repositories that an app installation can access.
   *
   * You must use an [installation access token](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
   * operationId: apps/list-repos-accessible-to-installation
   * Request URI: /installation/repositories
   */
  public async apps$list$repos$accessible$to$installation(
    params: Params$apps$list$repos$accessible$to$installation,
    option?: RequestOption,
  ): Promise<Response$apps$list$repos$accessible$to$installation$Status$200["application/json"]> {
    const url = this.baseUrl + `/installation/repositories`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Revoke an installation access token
   * Revokes the installation token you're using to authenticate as an installation and access this endpoint.
   *
   * Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the "[Create an installation access token for an app](https://docs.github.com/enterprise-server@3.4/rest/reference/apps#create-an-installation-access-token-for-an-app)" endpoint.
   *
   * You must use an [installation access token](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
   * operationId: apps/revoke-installation-access-token
   * Request URI: /installation/token
   */
  public async apps$revoke$installation$access$token(option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/installation/token`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * List issues assigned to the authenticated user
   * List issues assigned to the authenticated user across all visible repositories including owned repositories, member
   * repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not
   * necessarily assigned to you.
   *
   *
   * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
   * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
   * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
   * request id, use the "[List pull requests](https://docs.github.com/enterprise-server@3.4/rest/reference/pulls#list-pull-requests)" endpoint.
   * operationId: issues/list
   * Request URI: /issues
   */
  public async issues$list(params: Params$issues$list, option?: RequestOption): Promise<Response$issues$list$Status$200["application/json"]> {
    const url = this.baseUrl + `/issues`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      filter: { value: params.parameter.filter, explode: false },
      state: { value: params.parameter.state, explode: false },
      labels: { value: params.parameter.labels, explode: false },
      sort: { value: params.parameter.sort, explode: false },
      direction: { value: params.parameter.direction, explode: false },
      since: { value: params.parameter.since, explode: false },
      collab: { value: params.parameter.collab, explode: false },
      orgs: { value: params.parameter.orgs, explode: false },
      owned: { value: params.parameter.owned, explode: false },
      pulls: { value: params.parameter.pulls, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get all commonly used licenses
   * operationId: licenses/get-all-commonly-used
   * Request URI: /licenses
   */
  public async licenses$get$all$commonly$used(
    params: Params$licenses$get$all$commonly$used,
    option?: RequestOption,
  ): Promise<Response$licenses$get$all$commonly$used$Status$200["application/json"]> {
    const url = this.baseUrl + `/licenses`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      featured: { value: params.parameter.featured, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get a license
   * operationId: licenses/get
   * Request URI: /licenses/{license}
   */
  public async licenses$get(
    params: Params$licenses$get,
    option?: RequestOption,
  ): Promise<Response$licenses$get$Status$200["application/json"]> {
    const url = this.baseUrl + `/licenses/${params.parameter.license}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Render a Markdown document
   * operationId: markdown/render
   * Request URI: /markdown
   */
  public async markdown$render(
    params: Params$markdown$render,
    option?: RequestOption,
  ): Promise<Response$markdown$render$Status$200["text/html"]> {
    const url = this.baseUrl + `/markdown`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "text/html",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Render a Markdown document in raw mode
   * You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less.
   * operationId: markdown/render-raw
   * Request URI: /markdown/raw
   */
  public async markdown$render$raw<RequestContentType extends RequestContentType$markdown$render$raw>(
    params: Params$markdown$render$raw<RequestContentType>,
    option?: RequestOption,
  ): Promise<Response$markdown$render$raw$Status$200["text/html"]> {
    const url = this.baseUrl + `/markdown/raw`;
    const headers = {
      "Content-Type": params.headers["Content-Type"],
      Accept: "text/html",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get GitHub Enterprise Server meta information
   * operationId: meta/get
   * Request URI: /meta
   */
  public async meta$get(option?: RequestOption): Promise<Response$meta$get$Status$200["application/json"]> {
    const url = this.baseUrl + `/meta`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * List public events for a network of repositories
   * operationId: activity/list-public-events-for-repo-network
   * Request URI: /networks/{owner}/{repo}/events
   */
  public async activity$list$public$events$for$repo$network(
    params: Params$activity$list$public$events$for$repo$network,
    option?: RequestOption,
  ): Promise<Response$activity$list$public$events$for$repo$network$Status$200["application/json"]> {
    const url = this.baseUrl + `/networks/${params.parameter.owner}/${params.parameter.repo}/events`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List notifications for the authenticated user
   * List all notifications for the current user, sorted by most recently updated.
   * operationId: activity/list-notifications-for-authenticated-user
   * Request URI: /notifications
   */
  public async activity$list$notifications$for$authenticated$user(
    params: Params$activity$list$notifications$for$authenticated$user,
    option?: RequestOption,
  ): Promise<Response$activity$list$notifications$for$authenticated$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/notifications`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      all: { value: params.parameter.all, explode: false },
      participating: { value: params.parameter.participating, explode: false },
      since: { value: params.parameter.since, explode: false },
      before: { value: params.parameter.before, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Mark notifications as read
   * Marks all notifications as "read" removes it from the [default view on GitHub Enterprise Server](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub Enterprise Server will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/enterprise-server@3.4/rest/reference/activity#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
   * operationId: activity/mark-notifications-as-read
   * Request URI: /notifications
   */
  public async activity$mark$notifications$as$read(
    params: Params$activity$mark$notifications$as$read,
    option?: RequestOption,
  ): Promise<Response$activity$mark$notifications$as$read$Status$202["application/json"]> {
    const url = this.baseUrl + `/notifications`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get a thread
   * operationId: activity/get-thread
   * Request URI: /notifications/threads/{thread_id}
   */
  public async activity$get$thread(
    params: Params$activity$get$thread,
    option?: RequestOption,
  ): Promise<Response$activity$get$thread$Status$200["application/json"]> {
    const url = this.baseUrl + `/notifications/threads/${params.parameter.thread_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Mark a thread as read
   * operationId: activity/mark-thread-as-read
   * Request URI: /notifications/threads/{thread_id}
   */
  public async activity$mark$thread$as$read(params: Params$activity$mark$thread$as$read, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/notifications/threads/${params.parameter.thread_id}`;
    const headers = {};
    return this.apiClient.request("PATCH", url, headers, undefined, undefined, option);
  }
  /**
   * Get a thread subscription for the authenticated user
   * This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/enterprise-server@3.4/rest/reference/activity#get-a-repository-subscription).
   *
   * Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.
   * operationId: activity/get-thread-subscription-for-authenticated-user
   * Request URI: /notifications/threads/{thread_id}/subscription
   */
  public async activity$get$thread$subscription$for$authenticated$user(
    params: Params$activity$get$thread$subscription$for$authenticated$user,
    option?: RequestOption,
  ): Promise<Response$activity$get$thread$subscription$for$authenticated$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/notifications/threads/${params.parameter.thread_id}/subscription`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Set a thread subscription
   * If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.
   *
   * You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.
   *
   * Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/enterprise-server@3.4/rest/reference/activity#delete-a-thread-subscription) endpoint.
   * operationId: activity/set-thread-subscription
   * Request URI: /notifications/threads/{thread_id}/subscription
   */
  public async activity$set$thread$subscription(
    params: Params$activity$set$thread$subscription,
    option?: RequestOption,
  ): Promise<Response$activity$set$thread$subscription$Status$200["application/json"]> {
    const url = this.baseUrl + `/notifications/threads/${params.parameter.thread_id}/subscription`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Delete a thread subscription
   * Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/enterprise-server@3.4/rest/reference/activity#set-a-thread-subscription) endpoint and set `ignore` to `true`.
   * operationId: activity/delete-thread-subscription
   * Request URI: /notifications/threads/{thread_id}/subscription
   */
  public async activity$delete$thread$subscription(params: Params$activity$delete$thread$subscription, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/notifications/threads/${params.parameter.thread_id}/subscription`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Get Octocat
   * Get the octocat as ASCII art
   * operationId: meta/get-octocat
   * Request URI: /octocat
   */
  public async meta$get$octocat(
    params: Params$meta$get$octocat,
    option?: RequestOption,
  ): Promise<Response$meta$get$octocat$Status$200["application/octocat-stream"]> {
    const url = this.baseUrl + `/octocat`;
    const headers = {
      Accept: "application/octocat-stream",
    };
    const queryParameters: QueryParameters = {
      s: { value: params.parameter.s, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List organizations
   * Lists all organizations, in the order that they were created on GitHub Enterprise Server.
   *
   * **Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of organizations.
   * operationId: orgs/list
   * Request URI: /organizations
   */
  public async orgs$list(params: Params$orgs$list, option?: RequestOption): Promise<Response$orgs$list$Status$200["application/json"]> {
    const url = this.baseUrl + `/organizations`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      since: { value: params.parameter.since, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List custom repository roles in an organization
   * List the custom repository roles available in this organization. In order to see custom
   * repository roles in an organization, the authenticated user must be an organization owner.
   *
   * For more information on custom repository roles, see "[Managing custom repository roles for an organization](https://docs.github.com/enterprise-server@3.4/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization)".
   * operationId: orgs/list-custom-roles
   * Request URI: /organizations/{organization_id}/custom_roles
   */
  public async orgs$list$custom$roles(
    params: Params$orgs$list$custom$roles,
    option?: RequestOption,
  ): Promise<Response$orgs$list$custom$roles$Status$200["application/json"]> {
    const url = this.baseUrl + `/organizations/${params.parameter.organization_id}/custom_roles`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Get an organization
   * To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
   *
   * GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub Enterprise Server plan. See "[Authenticating with GitHub Apps](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/authenticating-with-github-apps/)" for details. For an example response, see 'Response with GitHub Enterprise Server plan information' below."
   * operationId: orgs/get
   * Request URI: /orgs/{org}
   */
  public async orgs$get(params: Params$orgs$get, option?: RequestOption): Promise<Response$orgs$get$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Update an organization
   * **Parameter Deprecation Notice:** GitHub Enterprise Server will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).
   *
   * Enables an authenticated organization owner with the `admin:org` scope to update the organization's profile and member privileges.
   * operationId: orgs/update
   * Request URI: /orgs/{org}
   */
  public async orgs$update(params: Params$orgs$update, option?: RequestOption): Promise<Response$orgs$update$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get GitHub Actions permissions for an organization
   * Gets the GitHub Actions permissions policy for repositories and allowed actions in an organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
   * operationId: actions/get-github-actions-permissions-organization
   * Request URI: /orgs/{org}/actions/permissions
   */
  public async actions$get$github$actions$permissions$organization(
    params: Params$actions$get$github$actions$permissions$organization,
    option?: RequestOption,
  ): Promise<Response$actions$get$github$actions$permissions$organization$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/actions/permissions`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Set GitHub Actions permissions for an organization
   * Sets the GitHub Actions permissions policy for repositories and allowed actions in an organization.
   *
   * If the organization belongs to an enterprise that has set restrictive permissions at the enterprise level, such as `allowed_actions` to `selected` actions, then you cannot override them for the organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
   * operationId: actions/set-github-actions-permissions-organization
   * Request URI: /orgs/{org}/actions/permissions
   */
  public async actions$set$github$actions$permissions$organization(
    params: Params$actions$set$github$actions$permissions$organization,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/actions/permissions`;
    const headers = {
      "Content-Type": "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List selected repositories enabled for GitHub Actions in an organization
   * Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
   * operationId: actions/list-selected-repositories-enabled-github-actions-organization
   * Request URI: /orgs/{org}/actions/permissions/repositories
   */
  public async actions$list$selected$repositories$enabled$github$actions$organization(
    params: Params$actions$list$selected$repositories$enabled$github$actions$organization,
    option?: RequestOption,
  ): Promise<Response$actions$list$selected$repositories$enabled$github$actions$organization$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/actions/permissions/repositories`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Set selected repositories enabled for GitHub Actions in an organization
   * Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
   * operationId: actions/set-selected-repositories-enabled-github-actions-organization
   * Request URI: /orgs/{org}/actions/permissions/repositories
   */
  public async actions$set$selected$repositories$enabled$github$actions$organization(
    params: Params$actions$set$selected$repositories$enabled$github$actions$organization,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/actions/permissions/repositories`;
    const headers = {
      "Content-Type": "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Enable a selected repository for GitHub Actions in an organization
   * Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
   * operationId: actions/enable-selected-repository-github-actions-organization
   * Request URI: /orgs/{org}/actions/permissions/repositories/{repository_id}
   */
  public async actions$enable$selected$repository$github$actions$organization(
    params: Params$actions$enable$selected$repository$github$actions$organization,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/actions/permissions/repositories/${params.parameter.repository_id}`;
    const headers = {};
    return this.apiClient.request("PUT", url, headers, undefined, undefined, option);
  }
  /**
   * Disable a selected repository for GitHub Actions in an organization
   * Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
   * operationId: actions/disable-selected-repository-github-actions-organization
   * Request URI: /orgs/{org}/actions/permissions/repositories/{repository_id}
   */
  public async actions$disable$selected$repository$github$actions$organization(
    params: Params$actions$disable$selected$repository$github$actions$organization,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/actions/permissions/repositories/${params.parameter.repository_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Get allowed actions for an organization
   * Gets the selected actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).""
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
   * operationId: actions/get-allowed-actions-organization
   * Request URI: /orgs/{org}/actions/permissions/selected-actions
   */
  public async actions$get$allowed$actions$organization(
    params: Params$actions$get$allowed$actions$organization,
    option?: RequestOption,
  ): Promise<Response$actions$get$allowed$actions$organization$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/actions/permissions/selected-actions`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Set allowed actions for an organization
   * Sets the actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
   *
   * If the organization belongs to an enterprise that has `selected` actions set at the enterprise level, then you cannot override any of the enterprise's allowed actions settings.
   *
   * To use the `patterns_allowed` setting for private repositories, the organization must belong to an enterprise. If the organization does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories in the organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
   * operationId: actions/set-allowed-actions-organization
   * Request URI: /orgs/{org}/actions/permissions/selected-actions
   */
  public async actions$set$allowed$actions$organization(
    params: Params$actions$set$allowed$actions$organization,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/actions/permissions/selected-actions`;
    const headers = {
      "Content-Type": "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List self-hosted runner groups for an organization
   * Lists all self-hosted runner groups configured in an organization and inherited from an enterprise.
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   * operationId: actions/list-self-hosted-runner-groups-for-org
   * Request URI: /orgs/{org}/actions/runner-groups
   */
  public async actions$list$self$hosted$runner$groups$for$org(
    params: Params$actions$list$self$hosted$runner$groups$for$org,
    option?: RequestOption,
  ): Promise<Response$actions$list$self$hosted$runner$groups$for$org$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/actions/runner-groups`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create a self-hosted runner group for an organization
   * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
   *
   * Creates a new self-hosted runner group for an organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   * operationId: actions/create-self-hosted-runner-group-for-org
   * Request URI: /orgs/{org}/actions/runner-groups
   */
  public async actions$create$self$hosted$runner$group$for$org(
    params: Params$actions$create$self$hosted$runner$group$for$org,
    option?: RequestOption,
  ): Promise<Response$actions$create$self$hosted$runner$group$for$org$Status$201["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/actions/runner-groups`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get a self-hosted runner group for an organization
   * Gets a specific self-hosted runner group for an organization.
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   * operationId: actions/get-self-hosted-runner-group-for-org
   * Request URI: /orgs/{org}/actions/runner-groups/{runner_group_id}
   */
  public async actions$get$self$hosted$runner$group$for$org(
    params: Params$actions$get$self$hosted$runner$group$for$org,
    option?: RequestOption,
  ): Promise<Response$actions$get$self$hosted$runner$group$for$org$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/actions/runner-groups/${params.parameter.runner_group_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Delete a self-hosted runner group from an organization
   * Deletes a self-hosted runner group for an organization.
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   * operationId: actions/delete-self-hosted-runner-group-from-org
   * Request URI: /orgs/{org}/actions/runner-groups/{runner_group_id}
   */
  public async actions$delete$self$hosted$runner$group$from$org(
    params: Params$actions$delete$self$hosted$runner$group$from$org,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/actions/runner-groups/${params.parameter.runner_group_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Update a self-hosted runner group for an organization
   * Updates the `name` and `visibility` of a self-hosted runner group in an organization.
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   * operationId: actions/update-self-hosted-runner-group-for-org
   * Request URI: /orgs/{org}/actions/runner-groups/{runner_group_id}
   */
  public async actions$update$self$hosted$runner$group$for$org(
    params: Params$actions$update$self$hosted$runner$group$for$org,
    option?: RequestOption,
  ): Promise<Response$actions$update$self$hosted$runner$group$for$org$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/actions/runner-groups/${params.parameter.runner_group_id}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List repository access to a self-hosted runner group in an organization
   * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
   *
   * Lists the repositories with access to a self-hosted runner group configured in an organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   * operationId: actions/list-repo-access-to-self-hosted-runner-group-in-org
   * Request URI: /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories
   */
  public async actions$list$repo$access$to$self$hosted$runner$group$in$org(
    params: Params$actions$list$repo$access$to$self$hosted$runner$group$in$org,
    option?: RequestOption,
  ): Promise<Response$actions$list$repo$access$to$self$hosted$runner$group$in$org$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/actions/runner-groups/${params.parameter.runner_group_id}/repositories`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      page: { value: params.parameter.page, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Set repository access for a self-hosted runner group in an organization
   * Replaces the list of repositories that have access to a self-hosted runner group configured in an organization.
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   * operationId: actions/set-repo-access-to-self-hosted-runner-group-in-org
   * Request URI: /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories
   */
  public async actions$set$repo$access$to$self$hosted$runner$group$in$org(
    params: Params$actions$set$repo$access$to$self$hosted$runner$group$in$org,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/actions/runner-groups/${params.parameter.runner_group_id}/repositories`;
    const headers = {
      "Content-Type": "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Add repository access to a self-hosted runner group in an organization
   * Adds a repository to the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   * operationId: actions/add-repo-access-to-self-hosted-runner-group-in-org
   * Request URI: /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}
   */
  public async actions$add$repo$access$to$self$hosted$runner$group$in$org(
    params: Params$actions$add$repo$access$to$self$hosted$runner$group$in$org,
    option?: RequestOption,
  ): Promise<void> {
    const url =
      this.baseUrl +
      `/orgs/${params.parameter.org}/actions/runner-groups/${params.parameter.runner_group_id}/repositories/${params.parameter.repository_id}`;
    const headers = {};
    return this.apiClient.request("PUT", url, headers, undefined, undefined, option);
  }
  /**
   * Remove repository access to a self-hosted runner group in an organization
   * Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   * operationId: actions/remove-repo-access-to-self-hosted-runner-group-in-org
   * Request URI: /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}
   */
  public async actions$remove$repo$access$to$self$hosted$runner$group$in$org(
    params: Params$actions$remove$repo$access$to$self$hosted$runner$group$in$org,
    option?: RequestOption,
  ): Promise<void> {
    const url =
      this.baseUrl +
      `/orgs/${params.parameter.org}/actions/runner-groups/${params.parameter.runner_group_id}/repositories/${params.parameter.repository_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * List self-hosted runners in a group for an organization
   * Lists self-hosted runners that are in a specific organization group.
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   * operationId: actions/list-self-hosted-runners-in-group-for-org
   * Request URI: /orgs/{org}/actions/runner-groups/{runner_group_id}/runners
   */
  public async actions$list$self$hosted$runners$in$group$for$org(
    params: Params$actions$list$self$hosted$runners$in$group$for$org,
    option?: RequestOption,
  ): Promise<Response$actions$list$self$hosted$runners$in$group$for$org$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/actions/runner-groups/${params.parameter.runner_group_id}/runners`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Set self-hosted runners in a group for an organization
   * Replaces the list of self-hosted runners that are part of an organization runner group.
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   * operationId: actions/set-self-hosted-runners-in-group-for-org
   * Request URI: /orgs/{org}/actions/runner-groups/{runner_group_id}/runners
   */
  public async actions$set$self$hosted$runners$in$group$for$org(
    params: Params$actions$set$self$hosted$runners$in$group$for$org,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/actions/runner-groups/${params.parameter.runner_group_id}/runners`;
    const headers = {
      "Content-Type": "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Add a self-hosted runner to a group for an organization
   * Adds a self-hosted runner to a runner group configured in an organization.
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   * operationId: actions/add-self-hosted-runner-to-group-for-org
   * Request URI: /orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}
   */
  public async actions$add$self$hosted$runner$to$group$for$org(
    params: Params$actions$add$self$hosted$runner$to$group$for$org,
    option?: RequestOption,
  ): Promise<void> {
    const url =
      this.baseUrl +
      `/orgs/${params.parameter.org}/actions/runner-groups/${params.parameter.runner_group_id}/runners/${params.parameter.runner_id}`;
    const headers = {};
    return this.apiClient.request("PUT", url, headers, undefined, undefined, option);
  }
  /**
   * Remove a self-hosted runner from a group for an organization
   * Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group.
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   * operationId: actions/remove-self-hosted-runner-from-group-for-org
   * Request URI: /orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}
   */
  public async actions$remove$self$hosted$runner$from$group$for$org(
    params: Params$actions$remove$self$hosted$runner$from$group$for$org,
    option?: RequestOption,
  ): Promise<void> {
    const url =
      this.baseUrl +
      `/orgs/${params.parameter.org}/actions/runner-groups/${params.parameter.runner_group_id}/runners/${params.parameter.runner_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * List self-hosted runners for an organization
   * Lists all self-hosted runners configured in an organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   * operationId: actions/list-self-hosted-runners-for-org
   * Request URI: /orgs/{org}/actions/runners
   */
  public async actions$list$self$hosted$runners$for$org(
    params: Params$actions$list$self$hosted$runners$for$org,
    option?: RequestOption,
  ): Promise<Response$actions$list$self$hosted$runners$for$org$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/actions/runners`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List runner applications for an organization
   * Lists binaries for the runner application that you can download and run.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   * operationId: actions/list-runner-applications-for-org
   * Request URI: /orgs/{org}/actions/runners/downloads
   */
  public async actions$list$runner$applications$for$org(
    params: Params$actions$list$runner$applications$for$org,
    option?: RequestOption,
  ): Promise<Response$actions$list$runner$applications$for$org$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/actions/runners/downloads`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Create a registration token for an organization
   * Returns a token that you can pass to the `config` script. The token expires after one hour.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   *
   * #### Example using registration token
   *
   * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
   *
   * ```
   * ./config.sh --url https://github.com/octo-org --token TOKEN
   * ```
   * operationId: actions/create-registration-token-for-org
   * Request URI: /orgs/{org}/actions/runners/registration-token
   */
  public async actions$create$registration$token$for$org(
    params: Params$actions$create$registration$token$for$org,
    option?: RequestOption,
  ): Promise<Response$actions$create$registration$token$for$org$Status$201["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/actions/runners/registration-token`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, undefined, undefined, option);
  }
  /**
   * Create a remove token for an organization
   * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   *
   * #### Example using remove token
   *
   * To remove your self-hosted runner from an organization, replace `TOKEN` with the remove token provided by this
   * endpoint.
   *
   * ```
   * ./config.sh remove --token TOKEN
   * ```
   * operationId: actions/create-remove-token-for-org
   * Request URI: /orgs/{org}/actions/runners/remove-token
   */
  public async actions$create$remove$token$for$org(
    params: Params$actions$create$remove$token$for$org,
    option?: RequestOption,
  ): Promise<Response$actions$create$remove$token$for$org$Status$201["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/actions/runners/remove-token`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, undefined, undefined, option);
  }
  /**
   * Get a self-hosted runner for an organization
   * Gets a specific self-hosted runner configured in an organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   * operationId: actions/get-self-hosted-runner-for-org
   * Request URI: /orgs/{org}/actions/runners/{runner_id}
   */
  public async actions$get$self$hosted$runner$for$org(
    params: Params$actions$get$self$hosted$runner$for$org,
    option?: RequestOption,
  ): Promise<Response$actions$get$self$hosted$runner$for$org$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/actions/runners/${params.parameter.runner_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Delete a self-hosted runner from an organization
   * Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   * operationId: actions/delete-self-hosted-runner-from-org
   * Request URI: /orgs/{org}/actions/runners/{runner_id}
   */
  public async actions$delete$self$hosted$runner$from$org(
    params: Params$actions$delete$self$hosted$runner$from$org,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/actions/runners/${params.parameter.runner_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * List labels for a self-hosted runner for an organization
   * Lists all labels for a self-hosted runner configured in an organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   * operationId: actions/list-labels-for-self-hosted-runner-for-org
   * Request URI: /orgs/{org}/actions/runners/{runner_id}/labels
   */
  public async actions$list$labels$for$self$hosted$runner$for$org(
    params: Params$actions$list$labels$for$self$hosted$runner$for$org,
    option?: RequestOption,
  ): Promise<Response$actions$list$labels$for$self$hosted$runner$for$org$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/actions/runners/${params.parameter.runner_id}/labels`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Set custom labels for a self-hosted runner for an organization
   * Remove all previous custom labels and set the new custom labels for a specific
   * self-hosted runner configured in an organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   * operationId: actions/set-custom-labels-for-self-hosted-runner-for-org
   * Request URI: /orgs/{org}/actions/runners/{runner_id}/labels
   */
  public async actions$set$custom$labels$for$self$hosted$runner$for$org(
    params: Params$actions$set$custom$labels$for$self$hosted$runner$for$org,
    option?: RequestOption,
  ): Promise<Response$actions$set$custom$labels$for$self$hosted$runner$for$org$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/actions/runners/${params.parameter.runner_id}/labels`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Add custom labels to a self-hosted runner for an organization
   * Add custom labels to a self-hosted runner configured in an organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   * operationId: actions/add-custom-labels-to-self-hosted-runner-for-org
   * Request URI: /orgs/{org}/actions/runners/{runner_id}/labels
   */
  public async actions$add$custom$labels$to$self$hosted$runner$for$org(
    params: Params$actions$add$custom$labels$to$self$hosted$runner$for$org,
    option?: RequestOption,
  ): Promise<Response$actions$add$custom$labels$to$self$hosted$runner$for$org$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/actions/runners/${params.parameter.runner_id}/labels`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Remove all custom labels from a self-hosted runner for an organization
   * Remove all custom labels from a self-hosted runner configured in an
   * organization. Returns the remaining read-only labels from the runner.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   * operationId: actions/remove-all-custom-labels-from-self-hosted-runner-for-org
   * Request URI: /orgs/{org}/actions/runners/{runner_id}/labels
   */
  public async actions$remove$all$custom$labels$from$self$hosted$runner$for$org(
    params: Params$actions$remove$all$custom$labels$from$self$hosted$runner$for$org,
    option?: RequestOption,
  ): Promise<Response$actions$remove$all$custom$labels$from$self$hosted$runner$for$org$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/actions/runners/${params.parameter.runner_id}/labels`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Remove a custom label from a self-hosted runner for an organization
   * Remove a custom label from a self-hosted runner configured
   * in an organization. Returns the remaining labels from the runner.
   *
   * This endpoint returns a `404 Not Found` status if the custom label is not
   * present on the runner.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   * operationId: actions/remove-custom-label-from-self-hosted-runner-for-org
   * Request URI: /orgs/{org}/actions/runners/{runner_id}/labels/{name}
   */
  public async actions$remove$custom$label$from$self$hosted$runner$for$org(
    params: Params$actions$remove$custom$label$from$self$hosted$runner$for$org,
    option?: RequestOption,
  ): Promise<Response$actions$remove$custom$label$from$self$hosted$runner$for$org$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/actions/runners/${params.parameter.runner_id}/labels/${params.parameter.name}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * List organization secrets
   * Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
   * operationId: actions/list-org-secrets
   * Request URI: /orgs/{org}/actions/secrets
   */
  public async actions$list$org$secrets(
    params: Params$actions$list$org$secrets,
    option?: RequestOption,
  ): Promise<Response$actions$list$org$secrets$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/actions/secrets`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get an organization public key
   * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
   * operationId: actions/get-org-public-key
   * Request URI: /orgs/{org}/actions/secrets/public-key
   */
  public async actions$get$org$public$key(
    params: Params$actions$get$org$public$key,
    option?: RequestOption,
  ): Promise<Response$actions$get$org$public$key$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/actions/secrets/public-key`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Get an organization secret
   * Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
   * operationId: actions/get-org-secret
   * Request URI: /orgs/{org}/actions/secrets/{secret_name}
   */
  public async actions$get$org$secret(
    params: Params$actions$get$org$secret,
    option?: RequestOption,
  ): Promise<Response$actions$get$org$secret$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/actions/secrets/${params.parameter.secret_name}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Create or update an organization secret
   * Creates or updates an organization secret with an encrypted value. Encrypt your secret using
   * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
   * token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to
   * use this endpoint.
   *
   * #### Example encrypting a secret using Node.js
   *
   * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
   *
   * ```
   * const sodium = require('tweetsodium');
   *
   * const key = "base64-encoded-public-key";
   * const value = "plain-text-secret";
   *
   * // Convert the message and key to Uint8Array's (Buffer implements that interface)
   * const messageBytes = Buffer.from(value);
   * const keyBytes = Buffer.from(key, 'base64');
   *
   * // Encrypt using LibSodium.
   * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
   *
   * // Base64 the encrypted secret
   * const encrypted = Buffer.from(encryptedBytes).toString('base64');
   *
   * console.log(encrypted);
   * ```
   *
   *
   * #### Example encrypting a secret using Python
   *
   * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
   *
   * ```
   * from base64 import b64encode
   * from nacl import encoding, public
   *
   * def encrypt(public_key: str, secret_value: str) -> str:
   *   """Encrypt a Unicode string using the public key."""
   *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
   *   sealed_box = public.SealedBox(public_key)
   *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
   *   return b64encode(encrypted).decode("utf-8")
   * ```
   *
   * #### Example encrypting a secret using C#
   *
   * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
   *
   * ```
   * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
   * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
   *
   * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
   *
   * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
   * ```
   *
   * #### Example encrypting a secret using Ruby
   *
   * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
   *
   * ```ruby
   * require "rbnacl"
   * require "base64"
   *
   * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
   * public_key = RbNaCl::PublicKey.new(key)
   *
   * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
   * encrypted_secret = box.encrypt("my_secret")
   *
   * # Print the base64 encoded secret
   * puts Base64.strict_encode64(encrypted_secret)
   * ```
   * operationId: actions/create-or-update-org-secret
   * Request URI: /orgs/{org}/actions/secrets/{secret_name}
   */
  public async actions$create$or$update$org$secret(
    params: Params$actions$create$or$update$org$secret,
    option?: RequestOption,
  ): Promise<Response$actions$create$or$update$org$secret$Status$201["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/actions/secrets/${params.parameter.secret_name}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Delete an organization secret
   * Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
   * operationId: actions/delete-org-secret
   * Request URI: /orgs/{org}/actions/secrets/{secret_name}
   */
  public async actions$delete$org$secret(params: Params$actions$delete$org$secret, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/actions/secrets/${params.parameter.secret_name}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * List selected repositories for an organization secret
   * Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
   * operationId: actions/list-selected-repos-for-org-secret
   * Request URI: /orgs/{org}/actions/secrets/{secret_name}/repositories
   */
  public async actions$list$selected$repos$for$org$secret(
    params: Params$actions$list$selected$repos$for$org$secret,
    option?: RequestOption,
  ): Promise<Response$actions$list$selected$repos$for$org$secret$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/actions/secrets/${params.parameter.secret_name}/repositories`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      page: { value: params.parameter.page, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Set selected repositories for an organization secret
   * Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.4/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
   * operationId: actions/set-selected-repos-for-org-secret
   * Request URI: /orgs/{org}/actions/secrets/{secret_name}/repositories
   */
  public async actions$set$selected$repos$for$org$secret(
    params: Params$actions$set$selected$repos$for$org$secret,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/actions/secrets/${params.parameter.secret_name}/repositories`;
    const headers = {
      "Content-Type": "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Add selected repository to an organization secret
   * Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.4/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
   * operationId: actions/add-selected-repo-to-org-secret
   * Request URI: /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}
   */
  public async actions$add$selected$repo$to$org$secret(
    params: Params$actions$add$selected$repo$to$org$secret,
    option?: RequestOption,
  ): Promise<void> {
    const url =
      this.baseUrl +
      `/orgs/${params.parameter.org}/actions/secrets/${params.parameter.secret_name}/repositories/${params.parameter.repository_id}`;
    const headers = {};
    return this.apiClient.request("PUT", url, headers, undefined, undefined, option);
  }
  /**
   * Remove selected repository from an organization secret
   * Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.4/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
   * operationId: actions/remove-selected-repo-from-org-secret
   * Request URI: /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}
   */
  public async actions$remove$selected$repo$from$org$secret(
    params: Params$actions$remove$selected$repo$from$org$secret,
    option?: RequestOption,
  ): Promise<void> {
    const url =
      this.baseUrl +
      `/orgs/${params.parameter.org}/actions/secrets/${params.parameter.secret_name}/repositories/${params.parameter.repository_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Get the audit log for an organization
   * Gets the audit log for an organization. For more information, see "[Reviewing the audit log for your organization](https://docs.github.com/enterprise-server@3.4/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization)."
   *
   * To use this endpoint, you must be an organization owner, and you must use an access token with the `admin:org` scope. GitHub Apps must have the `organization_administration` read permission to use this endpoint.
   * operationId: orgs/get-audit-log
   * Request URI: /orgs/{org}/audit-log
   */
  public async orgs$get$audit$log(
    params: Params$orgs$get$audit$log,
    option?: RequestOption,
  ): Promise<Response$orgs$get$audit$log$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/audit-log`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      phrase: { value: params.parameter.phrase, explode: false },
      include: { value: params.parameter.include, explode: false },
      after: { value: params.parameter.after, explode: false },
      before: { value: params.parameter.before, explode: false },
      order: { value: params.parameter.order, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List organization secrets
   * Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
   * operationId: dependabot/list-org-secrets
   * Request URI: /orgs/{org}/dependabot/secrets
   */
  public async dependabot$list$org$secrets(
    params: Params$dependabot$list$org$secrets,
    option?: RequestOption,
  ): Promise<Response$dependabot$list$org$secrets$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/dependabot/secrets`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get an organization public key
   * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
   * operationId: dependabot/get-org-public-key
   * Request URI: /orgs/{org}/dependabot/secrets/public-key
   */
  public async dependabot$get$org$public$key(
    params: Params$dependabot$get$org$public$key,
    option?: RequestOption,
  ): Promise<Response$dependabot$get$org$public$key$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/dependabot/secrets/public-key`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Get an organization secret
   * Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
   * operationId: dependabot/get-org-secret
   * Request URI: /orgs/{org}/dependabot/secrets/{secret_name}
   */
  public async dependabot$get$org$secret(
    params: Params$dependabot$get$org$secret,
    option?: RequestOption,
  ): Promise<Response$dependabot$get$org$secret$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/dependabot/secrets/${params.parameter.secret_name}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Create or update an organization secret
   * Creates or updates an organization secret with an encrypted value. Encrypt your secret using
   * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
   * token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization
   * permission to use this endpoint.
   *
   * #### Example encrypting a secret using Node.js
   *
   * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
   *
   * ```
   * const sodium = require('tweetsodium');
   *
   * const key = "base64-encoded-public-key";
   * const value = "plain-text-secret";
   *
   * // Convert the message and key to Uint8Array's (Buffer implements that interface)
   * const messageBytes = Buffer.from(value);
   * const keyBytes = Buffer.from(key, 'base64');
   *
   * // Encrypt using LibSodium.
   * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
   *
   * // Base64 the encrypted secret
   * const encrypted = Buffer.from(encryptedBytes).toString('base64');
   *
   * console.log(encrypted);
   * ```
   *
   *
   * #### Example encrypting a secret using Python
   *
   * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
   *
   * ```
   * from base64 import b64encode
   * from nacl import encoding, public
   *
   * def encrypt(public_key: str, secret_value: str) -> str:
   *   """Encrypt a Unicode string using the public key."""
   *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
   *   sealed_box = public.SealedBox(public_key)
   *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
   *   return b64encode(encrypted).decode("utf-8")
   * ```
   *
   * #### Example encrypting a secret using C#
   *
   * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
   *
   * ```
   * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
   * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
   *
   * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
   *
   * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
   * ```
   *
   * #### Example encrypting a secret using Ruby
   *
   * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
   *
   * ```ruby
   * require "rbnacl"
   * require "base64"
   *
   * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
   * public_key = RbNaCl::PublicKey.new(key)
   *
   * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
   * encrypted_secret = box.encrypt("my_secret")
   *
   * # Print the base64 encoded secret
   * puts Base64.strict_encode64(encrypted_secret)
   * ```
   * operationId: dependabot/create-or-update-org-secret
   * Request URI: /orgs/{org}/dependabot/secrets/{secret_name}
   */
  public async dependabot$create$or$update$org$secret(
    params: Params$dependabot$create$or$update$org$secret,
    option?: RequestOption,
  ): Promise<Response$dependabot$create$or$update$org$secret$Status$201["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/dependabot/secrets/${params.parameter.secret_name}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Delete an organization secret
   * Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
   * operationId: dependabot/delete-org-secret
   * Request URI: /orgs/{org}/dependabot/secrets/{secret_name}
   */
  public async dependabot$delete$org$secret(params: Params$dependabot$delete$org$secret, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/dependabot/secrets/${params.parameter.secret_name}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * List selected repositories for an organization secret
   * Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
   * operationId: dependabot/list-selected-repos-for-org-secret
   * Request URI: /orgs/{org}/dependabot/secrets/{secret_name}/repositories
   */
  public async dependabot$list$selected$repos$for$org$secret(
    params: Params$dependabot$list$selected$repos$for$org$secret,
    option?: RequestOption,
  ): Promise<Response$dependabot$list$selected$repos$for$org$secret$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/dependabot/secrets/${params.parameter.secret_name}/repositories`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      page: { value: params.parameter.page, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Set selected repositories for an organization secret
   * Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.4/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
   * operationId: dependabot/set-selected-repos-for-org-secret
   * Request URI: /orgs/{org}/dependabot/secrets/{secret_name}/repositories
   */
  public async dependabot$set$selected$repos$for$org$secret(
    params: Params$dependabot$set$selected$repos$for$org$secret,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/dependabot/secrets/${params.parameter.secret_name}/repositories`;
    const headers = {
      "Content-Type": "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Add selected repository to an organization secret
   * Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.4/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
   * operationId: dependabot/add-selected-repo-to-org-secret
   * Request URI: /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}
   */
  public async dependabot$add$selected$repo$to$org$secret(
    params: Params$dependabot$add$selected$repo$to$org$secret,
    option?: RequestOption,
  ): Promise<void> {
    const url =
      this.baseUrl +
      `/orgs/${params.parameter.org}/dependabot/secrets/${params.parameter.secret_name}/repositories/${params.parameter.repository_id}`;
    const headers = {};
    return this.apiClient.request("PUT", url, headers, undefined, undefined, option);
  }
  /**
   * Remove selected repository from an organization secret
   * Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.4/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
   * operationId: dependabot/remove-selected-repo-from-org-secret
   * Request URI: /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}
   */
  public async dependabot$remove$selected$repo$from$org$secret(
    params: Params$dependabot$remove$selected$repo$from$org$secret,
    option?: RequestOption,
  ): Promise<void> {
    const url =
      this.baseUrl +
      `/orgs/${params.parameter.org}/dependabot/secrets/${params.parameter.secret_name}/repositories/${params.parameter.repository_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * List public organization events
   * operationId: activity/list-public-org-events
   * Request URI: /orgs/{org}/events
   */
  public async activity$list$public$org$events(
    params: Params$activity$list$public$org$events,
    option?: RequestOption,
  ): Promise<Response$activity$list$public$org$events$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/events`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List organization webhooks
   * operationId: orgs/list-webhooks
   * Request URI: /orgs/{org}/hooks
   */
  public async orgs$list$webhooks(
    params: Params$orgs$list$webhooks,
    option?: RequestOption,
  ): Promise<Response$orgs$list$webhooks$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/hooks`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create an organization webhook
   * Here's how you can create a hook that posts payloads in JSON format:
   * operationId: orgs/create-webhook
   * Request URI: /orgs/{org}/hooks
   */
  public async orgs$create$webhook(
    params: Params$orgs$create$webhook,
    option?: RequestOption,
  ): Promise<Response$orgs$create$webhook$Status$201["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/hooks`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get an organization webhook
   * Returns a webhook configured in an organization. To get only the webhook `config` properties, see "[Get a webhook configuration for an organization](/rest/reference/orgs#get-a-webhook-configuration-for-an-organization)."
   * operationId: orgs/get-webhook
   * Request URI: /orgs/{org}/hooks/{hook_id}
   */
  public async orgs$get$webhook(
    params: Params$orgs$get$webhook,
    option?: RequestOption,
  ): Promise<Response$orgs$get$webhook$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/hooks/${params.parameter.hook_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Delete an organization webhook
   * operationId: orgs/delete-webhook
   * Request URI: /orgs/{org}/hooks/{hook_id}
   */
  public async orgs$delete$webhook(params: Params$orgs$delete$webhook, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/hooks/${params.parameter.hook_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Update an organization webhook
   * Updates a webhook configured in an organization. When you update a webhook, the `secret` will be overwritten. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for an organization](/rest/reference/orgs#update-a-webhook-configuration-for-an-organization)."
   * operationId: orgs/update-webhook
   * Request URI: /orgs/{org}/hooks/{hook_id}
   */
  public async orgs$update$webhook(
    params: Params$orgs$update$webhook,
    option?: RequestOption,
  ): Promise<Response$orgs$update$webhook$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/hooks/${params.parameter.hook_id}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get a webhook configuration for an organization
   * Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use "[Get an organization webhook ](/rest/reference/orgs#get-an-organization-webhook)."
   *
   * Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:read` permission.
   * operationId: orgs/get-webhook-config-for-org
   * Request URI: /orgs/{org}/hooks/{hook_id}/config
   */
  public async orgs$get$webhook$config$for$org(
    params: Params$orgs$get$webhook$config$for$org,
    option?: RequestOption,
  ): Promise<Response$orgs$get$webhook$config$for$org$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/hooks/${params.parameter.hook_id}/config`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Update a webhook configuration for an organization
   * Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use "[Update an organization webhook ](/rest/reference/orgs#update-an-organization-webhook)."
   *
   * Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:write` permission.
   * operationId: orgs/update-webhook-config-for-org
   * Request URI: /orgs/{org}/hooks/{hook_id}/config
   */
  public async orgs$update$webhook$config$for$org(
    params: Params$orgs$update$webhook$config$for$org,
    option?: RequestOption,
  ): Promise<Response$orgs$update$webhook$config$for$org$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/hooks/${params.parameter.hook_id}/config`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List deliveries for an organization webhook
   * Returns a list of webhook deliveries for a webhook configured in an organization.
   * operationId: orgs/list-webhook-deliveries
   * Request URI: /orgs/{org}/hooks/{hook_id}/deliveries
   */
  public async orgs$list$webhook$deliveries(
    params: Params$orgs$list$webhook$deliveries,
    option?: RequestOption,
  ): Promise<Response$orgs$list$webhook$deliveries$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/hooks/${params.parameter.hook_id}/deliveries`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      cursor: { value: params.parameter.cursor, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get a webhook delivery for an organization webhook
   * Returns a delivery for a webhook configured in an organization.
   * operationId: orgs/get-webhook-delivery
   * Request URI: /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}
   */
  public async orgs$get$webhook$delivery(
    params: Params$orgs$get$webhook$delivery,
    option?: RequestOption,
  ): Promise<Response$orgs$get$webhook$delivery$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/hooks/${params.parameter.hook_id}/deliveries/${params.parameter.delivery_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Redeliver a delivery for an organization webhook
   * Redeliver a delivery for a webhook configured in an organization.
   * operationId: orgs/redeliver-webhook-delivery
   * Request URI: /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts
   */
  public async orgs$redeliver$webhook$delivery(
    params: Params$orgs$redeliver$webhook$delivery,
    option?: RequestOption,
  ): Promise<Response$orgs$redeliver$webhook$delivery$Status$202["application/json"]> {
    const url =
      this.baseUrl + `/orgs/${params.parameter.org}/hooks/${params.parameter.hook_id}/deliveries/${params.parameter.delivery_id}/attempts`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, undefined, undefined, option);
  }
  /**
   * Ping an organization webhook
   * This will trigger a [ping event](https://docs.github.com/enterprise-server@3.4/webhooks/#ping-event) to be sent to the hook.
   * operationId: orgs/ping-webhook
   * Request URI: /orgs/{org}/hooks/{hook_id}/pings
   */
  public async orgs$ping$webhook(params: Params$orgs$ping$webhook, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/hooks/${params.parameter.hook_id}/pings`;
    const headers = {};
    return this.apiClient.request("POST", url, headers, undefined, undefined, option);
  }
  /**
   * Get an organization installation for the authenticated app
   * Enables an authenticated GitHub App to find the organization's installation information.
   *
   * You must use a [JWT](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * operationId: apps/get-org-installation
   * Request URI: /orgs/{org}/installation
   */
  public async apps$get$org$installation(
    params: Params$apps$get$org$installation,
    option?: RequestOption,
  ): Promise<Response$apps$get$org$installation$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/installation`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * List app installations for an organization
   * Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with `admin:read` scope to use this endpoint.
   * operationId: orgs/list-app-installations
   * Request URI: /orgs/{org}/installations
   */
  public async orgs$list$app$installations(
    params: Params$orgs$list$app$installations,
    option?: RequestOption,
  ): Promise<Response$orgs$list$app$installations$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/installations`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List organization issues assigned to the authenticated user
   * List issues in an organization assigned to the authenticated user.
   *
   * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
   * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
   * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
   * request id, use the "[List pull requests](https://docs.github.com/enterprise-server@3.4/rest/reference/pulls#list-pull-requests)" endpoint.
   * operationId: issues/list-for-org
   * Request URI: /orgs/{org}/issues
   */
  public async issues$list$for$org(
    params: Params$issues$list$for$org,
    option?: RequestOption,
  ): Promise<Response$issues$list$for$org$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/issues`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      filter: { value: params.parameter.filter, explode: false },
      state: { value: params.parameter.state, explode: false },
      labels: { value: params.parameter.labels, explode: false },
      sort: { value: params.parameter.sort, explode: false },
      direction: { value: params.parameter.direction, explode: false },
      since: { value: params.parameter.since, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List organization members
   * List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.
   * operationId: orgs/list-members
   * Request URI: /orgs/{org}/members
   */
  public async orgs$list$members(
    params: Params$orgs$list$members,
    option?: RequestOption,
  ): Promise<Response$orgs$list$members$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/members`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      filter: { value: params.parameter.filter, explode: false },
      role: { value: params.parameter.role, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Check organization membership for a user
   * Check if a user is, publicly or privately, a member of the organization.
   * operationId: orgs/check-membership-for-user
   * Request URI: /orgs/{org}/members/{username}
   */
  public async orgs$check$membership$for$user(params: Params$orgs$check$membership$for$user, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/members/${params.parameter.username}`;
    const headers = {};
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Remove an organization member
   * Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.
   * operationId: orgs/remove-member
   * Request URI: /orgs/{org}/members/{username}
   */
  public async orgs$remove$member(params: Params$orgs$remove$member, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/members/${params.parameter.username}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Get organization membership for a user
   * In order to get a user's membership with an organization, the authenticated user must be an organization member. The `state` parameter in the response can be used to identify the user's membership status.
   * operationId: orgs/get-membership-for-user
   * Request URI: /orgs/{org}/memberships/{username}
   */
  public async orgs$get$membership$for$user(
    params: Params$orgs$get$membership$for$user,
    option?: RequestOption,
  ): Promise<Response$orgs$get$membership$for$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/memberships/${params.parameter.username}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Set organization membership for a user
   * Only authenticated organization owners can add a member to the organization or update the member's role.
   *
   * *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/enterprise-server@3.4/rest/reference/orgs#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.
   *
   * *   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.
   *
   * **Rate limits**
   *
   * To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
   * operationId: orgs/set-membership-for-user
   * Request URI: /orgs/{org}/memberships/{username}
   */
  public async orgs$set$membership$for$user(
    params: Params$orgs$set$membership$for$user,
    option?: RequestOption,
  ): Promise<Response$orgs$set$membership$for$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/memberships/${params.parameter.username}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Remove organization membership for a user
   * In order to remove a user's membership with an organization, the authenticated user must be an organization owner.
   *
   * If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.
   * operationId: orgs/remove-membership-for-user
   * Request URI: /orgs/{org}/memberships/{username}
   */
  public async orgs$remove$membership$for$user(params: Params$orgs$remove$membership$for$user, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/memberships/${params.parameter.username}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * List organization migrations
   * Lists the most recent migrations.
   * operationId: migrations/list-for-org
   * Request URI: /orgs/{org}/migrations
   */
  public async migrations$list$for$org(
    params: Params$migrations$list$for$org,
    option?: RequestOption,
  ): Promise<Response$migrations$list$for$org$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/migrations`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
      exclude: { value: params.parameter.exclude, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Start an organization migration
   * Initiates the generation of a migration archive.
   * operationId: migrations/start-for-org
   * Request URI: /orgs/{org}/migrations
   */
  public async migrations$start$for$org(
    params: Params$migrations$start$for$org,
    option?: RequestOption,
  ): Promise<Response$migrations$start$for$org$Status$201["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/migrations`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get an organization migration status
   * Fetches the status of a migration.
   *
   * The `state` of a migration can be one of the following values:
   *
   * *   `pending`, which means the migration hasn't started yet.
   * *   `exporting`, which means the migration is in progress.
   * *   `exported`, which means the migration finished successfully.
   * *   `failed`, which means the migration failed.
   * operationId: migrations/get-status-for-org
   * Request URI: /orgs/{org}/migrations/{migration_id}
   */
  public async migrations$get$status$for$org(
    params: Params$migrations$get$status$for$org,
    option?: RequestOption,
  ): Promise<Response$migrations$get$status$for$org$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/migrations/${params.parameter.migration_id}`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      exclude: { value: params.parameter.exclude, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List outside collaborators for an organization
   * List all users who are outside collaborators of an organization.
   * operationId: orgs/list-outside-collaborators
   * Request URI: /orgs/{org}/outside_collaborators
   */
  public async orgs$list$outside$collaborators(
    params: Params$orgs$list$outside$collaborators,
    option?: RequestOption,
  ): Promise<Response$orgs$list$outside$collaborators$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/outside_collaborators`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      filter: { value: params.parameter.filter, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Convert an organization member to outside collaborator
   * When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see "[Converting an organization member to an outside collaborator](https://docs.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)".
   * operationId: orgs/convert-member-to-outside-collaborator
   * Request URI: /orgs/{org}/outside_collaborators/{username}
   */
  public async orgs$convert$member$to$outside$collaborator(
    params: Params$orgs$convert$member$to$outside$collaborator,
    option?: RequestOption,
  ): Promise<Response$orgs$convert$member$to$outside$collaborator$Status$202["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/outside_collaborators/${params.parameter.username}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("PUT", url, headers, undefined, undefined, option);
  }
  /**
   * Remove outside collaborator from an organization
   * Removing a user from this list will remove them from all the organization's repositories.
   * operationId: orgs/remove-outside-collaborator
   * Request URI: /orgs/{org}/outside_collaborators/{username}
   */
  public async orgs$remove$outside$collaborator(params: Params$orgs$remove$outside$collaborator, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/outside_collaborators/${params.parameter.username}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * List pre-receive hooks for an organization
   * List all pre-receive hooks that are enabled or testing for this organization as well as any disabled hooks that can be configured at the organization level. Globally disabled pre-receive hooks that do not allow downstream configuration are not listed.
   * operationId: enterprise-admin/list-pre-receive-hooks-for-org
   * Request URI: /orgs/{org}/pre-receive-hooks
   */
  public async enterprise$admin$list$pre$receive$hooks$for$org(
    params: Params$enterprise$admin$list$pre$receive$hooks$for$org,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$list$pre$receive$hooks$for$org$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/pre-receive-hooks`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
      direction: { value: params.parameter.direction, explode: false },
      sort: { value: params.parameter.sort, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get a pre-receive hook for an organization
   * operationId: enterprise-admin/get-pre-receive-hook-for-org
   * Request URI: /orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}
   */
  public async enterprise$admin$get$pre$receive$hook$for$org(
    params: Params$enterprise$admin$get$pre$receive$hook$for$org,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$get$pre$receive$hook$for$org$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/pre-receive-hooks/${params.parameter.pre_receive_hook_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Remove pre-receive hook enforcement for an organization
   * Removes any overrides for this hook at the org level for this org.
   * operationId: enterprise-admin/remove-pre-receive-hook-enforcement-for-org
   * Request URI: /orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}
   */
  public async enterprise$admin$remove$pre$receive$hook$enforcement$for$org(
    params: Params$enterprise$admin$remove$pre$receive$hook$enforcement$for$org,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$remove$pre$receive$hook$enforcement$for$org$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/pre-receive-hooks/${params.parameter.pre_receive_hook_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Update pre-receive hook enforcement for an organization
   * For pre-receive hooks which are allowed to be configured at the org level, you can set `enforcement` and `allow_downstream_configuration`
   * operationId: enterprise-admin/update-pre-receive-hook-enforcement-for-org
   * Request URI: /orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}
   */
  public async enterprise$admin$update$pre$receive$hook$enforcement$for$org(
    params: Params$enterprise$admin$update$pre$receive$hook$enforcement$for$org,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$update$pre$receive$hook$enforcement$for$org$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/pre-receive-hooks/${params.parameter.pre_receive_hook_id}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List organization projects
   * Lists the projects in an organization. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
   * operationId: projects/list-for-org
   * Request URI: /orgs/{org}/projects
   */
  public async projects$list$for$org(
    params: Params$projects$list$for$org,
    option?: RequestOption,
  ): Promise<Response$projects$list$for$org$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/projects`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      state: { value: params.parameter.state, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create an organization project
   * Creates an organization project board. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
   * operationId: projects/create-for-org
   * Request URI: /orgs/{org}/projects
   */
  public async projects$create$for$org(
    params: Params$projects$create$for$org,
    option?: RequestOption,
  ): Promise<Response$projects$create$for$org$Status$201["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/projects`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List public organization members
   * Members of an organization can choose to have their membership publicized or not.
   * operationId: orgs/list-public-members
   * Request URI: /orgs/{org}/public_members
   */
  public async orgs$list$public$members(
    params: Params$orgs$list$public$members,
    option?: RequestOption,
  ): Promise<Response$orgs$list$public$members$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/public_members`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Check public organization membership for a user
   * operationId: orgs/check-public-membership-for-user
   * Request URI: /orgs/{org}/public_members/{username}
   */
  public async orgs$check$public$membership$for$user(
    params: Params$orgs$check$public$membership$for$user,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/public_members/${params.parameter.username}`;
    const headers = {};
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Set public organization membership for the authenticated user
   * The user can publicize their own membership. (A user cannot publicize the membership for another user.)
   *
   * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#http-verbs)."
   * operationId: orgs/set-public-membership-for-authenticated-user
   * Request URI: /orgs/{org}/public_members/{username}
   */
  public async orgs$set$public$membership$for$authenticated$user(
    params: Params$orgs$set$public$membership$for$authenticated$user,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/public_members/${params.parameter.username}`;
    const headers = {};
    return this.apiClient.request("PUT", url, headers, undefined, undefined, option);
  }
  /**
   * Remove public organization membership for the authenticated user
   * operationId: orgs/remove-public-membership-for-authenticated-user
   * Request URI: /orgs/{org}/public_members/{username}
   */
  public async orgs$remove$public$membership$for$authenticated$user(
    params: Params$orgs$remove$public$membership$for$authenticated$user,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/public_members/${params.parameter.username}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * List organization repositories
   * Lists repositories for the specified organization.
   * operationId: repos/list-for-org
   * Request URI: /orgs/{org}/repos
   */
  public async repos$list$for$org(
    params: Params$repos$list$for$org,
    option?: RequestOption,
  ): Promise<Response$repos$list$for$org$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/repos`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      type: { value: params.parameter.type, explode: false },
      sort: { value: params.parameter.sort, explode: false },
      direction: { value: params.parameter.direction, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create an organization repository
   * Creates a new repository in the specified organization. The authenticated user must be a member of the organization.
   *
   * **OAuth scope requirements**
   *
   * When using [OAuth](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
   *
   * *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
   * *   `repo` scope to create a private repository
   * operationId: repos/create-in-org
   * Request URI: /orgs/{org}/repos
   */
  public async repos$create$in$org(
    params: Params$repos$create$in$org,
    option?: RequestOption,
  ): Promise<Response$repos$create$in$org$Status$201["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/repos`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List secret scanning alerts for an organization
   * Lists secret scanning alerts for eligible repositories in an organization, from newest to oldest.
   * To use this endpoint, you must be an administrator or security manager for the organization, and you must use an access token with the `repo` scope or `security_events` scope.
   *
   * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
   * operationId: secret-scanning/list-alerts-for-org
   * Request URI: /orgs/{org}/secret-scanning/alerts
   */
  public async secret$scanning$list$alerts$for$org(
    params: Params$secret$scanning$list$alerts$for$org,
    option?: RequestOption,
  ): Promise<Response$secret$scanning$list$alerts$for$org$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/secret-scanning/alerts`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      state: { value: params.parameter.state, explode: false },
      secret_type: { value: params.parameter.secret_type, explode: false },
      resolution: { value: params.parameter.resolution, explode: false },
      page: { value: params.parameter.page, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get GitHub Advanced Security active committers for an organization
   * Gets the GitHub Advanced Security active committers for an organization per repository.
   * Each distinct user login across all repositories is counted as a single Advanced Security seat, so the total_advanced_security_committers is not the sum of advanced_security_committers for each repository.
   * If this organization defers to an enterprise for billing, the total_advanced_security_committers returned from the organization API may include some users that are in more than one organization, so they will only consume a single Advanced Security seat at the enterprise level.
   * operationId: billing/get-github-advanced-security-billing-org
   * Request URI: /orgs/{org}/settings/billing/advanced-security
   */
  public async billing$get$github$advanced$security$billing$org(
    params: Params$billing$get$github$advanced$security$billing$org,
    option?: RequestOption,
  ): Promise<Response$billing$get$github$advanced$security$billing$org$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/settings/billing/advanced-security`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List teams
   * Lists all teams in an organization that are visible to the authenticated user.
   * operationId: teams/list
   * Request URI: /orgs/{org}/teams
   */
  public async teams$list(params: Params$teams$list, option?: RequestOption): Promise<Response$teams$list$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/teams`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create a team
   * To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see "[Setting team creation permissions](https://docs.github.com/en/articles/setting-team-creation-permissions-in-your-organization)."
   *
   * When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see "[About teams](https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams)".
   * operationId: teams/create
   * Request URI: /orgs/{org}/teams
   */
  public async teams$create(
    params: Params$teams$create,
    option?: RequestOption,
  ): Promise<Response$teams$create$Status$201["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/teams`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get a team by name
   * Gets a team using the team's `slug`. GitHub Enterprise Server generates the `slug` from the team `name`.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.
   * operationId: teams/get-by-name
   * Request URI: /orgs/{org}/teams/{team_slug}
   */
  public async teams$get$by$name(
    params: Params$teams$get$by$name,
    option?: RequestOption,
  ): Promise<Response$teams$get$by$name$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/teams/${params.parameter.team_slug}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Delete a team
   * To delete a team, the authenticated user must be an organization owner or team maintainer.
   *
   * If you are an organization owner, deleting a parent team will delete all of its child teams as well.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.
   * operationId: teams/delete-in-org
   * Request URI: /orgs/{org}/teams/{team_slug}
   */
  public async teams$delete$in$org(params: Params$teams$delete$in$org, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/teams/${params.parameter.team_slug}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Update a team
   * To edit a team, the authenticated user must either be an organization owner or a team maintainer.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.
   * operationId: teams/update-in-org
   * Request URI: /orgs/{org}/teams/{team_slug}
   */
  public async teams$update$in$org(
    params: Params$teams$update$in$org,
    option?: RequestOption,
  ): Promise<Response$teams$update$in$org$Status$201["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/teams/${params.parameter.team_slug}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List discussions
   * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.
   * operationId: teams/list-discussions-in-org
   * Request URI: /orgs/{org}/teams/{team_slug}/discussions
   */
  public async teams$list$discussions$in$org(
    params: Params$teams$list$discussions$in$org,
    option?: RequestOption,
  ): Promise<Response$teams$list$discussions$in$org$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/teams/${params.parameter.team_slug}/discussions`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      direction: { value: params.parameter.direction, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
      pinned: { value: params.parameter.pinned, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create a discussion
   * Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.
   * operationId: teams/create-discussion-in-org
   * Request URI: /orgs/{org}/teams/{team_slug}/discussions
   */
  public async teams$create$discussion$in$org(
    params: Params$teams$create$discussion$in$org,
    option?: RequestOption,
  ): Promise<Response$teams$create$discussion$in$org$Status$201["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/teams/${params.parameter.team_slug}/discussions`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get a discussion
   * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
   * operationId: teams/get-discussion-in-org
   * Request URI: /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}
   */
  public async teams$get$discussion$in$org(
    params: Params$teams$get$discussion$in$org,
    option?: RequestOption,
  ): Promise<Response$teams$get$discussion$in$org$Status$200["application/json"]> {
    const url =
      this.baseUrl + `/orgs/${params.parameter.org}/teams/${params.parameter.team_slug}/discussions/${params.parameter.discussion_number}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Delete a discussion
   * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
   * operationId: teams/delete-discussion-in-org
   * Request URI: /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}
   */
  public async teams$delete$discussion$in$org(params: Params$teams$delete$discussion$in$org, option?: RequestOption): Promise<void> {
    const url =
      this.baseUrl + `/orgs/${params.parameter.org}/teams/${params.parameter.team_slug}/discussions/${params.parameter.discussion_number}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Update a discussion
   * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
   * operationId: teams/update-discussion-in-org
   * Request URI: /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}
   */
  public async teams$update$discussion$in$org(
    params: Params$teams$update$discussion$in$org,
    option?: RequestOption,
  ): Promise<Response$teams$update$discussion$in$org$Status$200["application/json"]> {
    const url =
      this.baseUrl + `/orgs/${params.parameter.org}/teams/${params.parameter.team_slug}/discussions/${params.parameter.discussion_number}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List discussion comments
   * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
   * operationId: teams/list-discussion-comments-in-org
   * Request URI: /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments
   */
  public async teams$list$discussion$comments$in$org(
    params: Params$teams$list$discussion$comments$in$org,
    option?: RequestOption,
  ): Promise<Response$teams$list$discussion$comments$in$org$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/orgs/${params.parameter.org}/teams/${params.parameter.team_slug}/discussions/${params.parameter.discussion_number}/comments`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      direction: { value: params.parameter.direction, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create a discussion comment
   * Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
   * operationId: teams/create-discussion-comment-in-org
   * Request URI: /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments
   */
  public async teams$create$discussion$comment$in$org(
    params: Params$teams$create$discussion$comment$in$org,
    option?: RequestOption,
  ): Promise<Response$teams$create$discussion$comment$in$org$Status$201["application/json"]> {
    const url =
      this.baseUrl +
      `/orgs/${params.parameter.org}/teams/${params.parameter.team_slug}/discussions/${params.parameter.discussion_number}/comments`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get a discussion comment
   * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
   * operationId: teams/get-discussion-comment-in-org
   * Request URI: /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}
   */
  public async teams$get$discussion$comment$in$org(
    params: Params$teams$get$discussion$comment$in$org,
    option?: RequestOption,
  ): Promise<Response$teams$get$discussion$comment$in$org$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/orgs/${params.parameter.org}/teams/${params.parameter.team_slug}/discussions/${params.parameter.discussion_number}/comments/${params.parameter.comment_number}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Delete a discussion comment
   * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
   * operationId: teams/delete-discussion-comment-in-org
   * Request URI: /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}
   */
  public async teams$delete$discussion$comment$in$org(
    params: Params$teams$delete$discussion$comment$in$org,
    option?: RequestOption,
  ): Promise<void> {
    const url =
      this.baseUrl +
      `/orgs/${params.parameter.org}/teams/${params.parameter.team_slug}/discussions/${params.parameter.discussion_number}/comments/${params.parameter.comment_number}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Update a discussion comment
   * Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
   * operationId: teams/update-discussion-comment-in-org
   * Request URI: /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}
   */
  public async teams$update$discussion$comment$in$org(
    params: Params$teams$update$discussion$comment$in$org,
    option?: RequestOption,
  ): Promise<Response$teams$update$discussion$comment$in$org$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/orgs/${params.parameter.org}/teams/${params.parameter.team_slug}/discussions/${params.parameter.discussion_number}/comments/${params.parameter.comment_number}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List reactions for a team discussion comment
   * List the reactions to a [team discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussion-comments/). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
   * operationId: reactions/list-for-team-discussion-comment-in-org
   * Request URI: /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions
   */
  public async reactions$list$for$team$discussion$comment$in$org(
    params: Params$reactions$list$for$team$discussion$comment$in$org,
    option?: RequestOption,
  ): Promise<Response$reactions$list$for$team$discussion$comment$in$org$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/orgs/${params.parameter.org}/teams/${params.parameter.team_slug}/discussions/${params.parameter.discussion_number}/comments/${params.parameter.comment_number}/reactions`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      content: { value: params.parameter.content, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create reaction for a team discussion comment
   * Create a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
   * operationId: reactions/create-for-team-discussion-comment-in-org
   * Request URI: /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions
   */
  public async reactions$create$for$team$discussion$comment$in$org(
    params: Params$reactions$create$for$team$discussion$comment$in$org,
    option?: RequestOption,
  ): Promise<
    (
      | Response$reactions$create$for$team$discussion$comment$in$org$Status$200
      | Response$reactions$create$for$team$discussion$comment$in$org$Status$201
    )["application/json"]
  > {
    const url =
      this.baseUrl +
      `/orgs/${params.parameter.org}/teams/${params.parameter.team_slug}/discussions/${params.parameter.discussion_number}/comments/${params.parameter.comment_number}/reactions`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Delete team discussion comment reaction
   * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.
   *
   * Delete a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   * operationId: reactions/delete-for-team-discussion-comment
   * Request URI: /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}
   */
  public async reactions$delete$for$team$discussion$comment(
    params: Params$reactions$delete$for$team$discussion$comment,
    option?: RequestOption,
  ): Promise<void> {
    const url =
      this.baseUrl +
      `/orgs/${params.parameter.org}/teams/${params.parameter.team_slug}/discussions/${params.parameter.discussion_number}/comments/${params.parameter.comment_number}/reactions/${params.parameter.reaction_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * List reactions for a team discussion
   * List the reactions to a [team discussion](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
   * operationId: reactions/list-for-team-discussion-in-org
   * Request URI: /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions
   */
  public async reactions$list$for$team$discussion$in$org(
    params: Params$reactions$list$for$team$discussion$in$org,
    option?: RequestOption,
  ): Promise<Response$reactions$list$for$team$discussion$in$org$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/orgs/${params.parameter.org}/teams/${params.parameter.team_slug}/discussions/${params.parameter.discussion_number}/reactions`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      content: { value: params.parameter.content, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create reaction for a team discussion
   * Create a reaction to a [team discussion](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
   * operationId: reactions/create-for-team-discussion-in-org
   * Request URI: /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions
   */
  public async reactions$create$for$team$discussion$in$org(
    params: Params$reactions$create$for$team$discussion$in$org,
    option?: RequestOption,
  ): Promise<
    (
      | Response$reactions$create$for$team$discussion$in$org$Status$200
      | Response$reactions$create$for$team$discussion$in$org$Status$201
    )["application/json"]
  > {
    const url =
      this.baseUrl +
      `/orgs/${params.parameter.org}/teams/${params.parameter.team_slug}/discussions/${params.parameter.discussion_number}/reactions`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Delete team discussion reaction
   * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.
   *
   * Delete a reaction to a [team discussion](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   * operationId: reactions/delete-for-team-discussion
   * Request URI: /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}
   */
  public async reactions$delete$for$team$discussion(
    params: Params$reactions$delete$for$team$discussion,
    option?: RequestOption,
  ): Promise<void> {
    const url =
      this.baseUrl +
      `/orgs/${params.parameter.org}/teams/${params.parameter.team_slug}/discussions/${params.parameter.discussion_number}/reactions/${params.parameter.reaction_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * List team members
   * Team members will include the members of child teams.
   *
   * To list members in a team, the team must be visible to the authenticated user.
   * operationId: teams/list-members-in-org
   * Request URI: /orgs/{org}/teams/{team_slug}/members
   */
  public async teams$list$members$in$org(
    params: Params$teams$list$members$in$org,
    option?: RequestOption,
  ): Promise<Response$teams$list$members$in$org$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/teams/${params.parameter.team_slug}/members`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      role: { value: params.parameter.role, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get team membership for a user
   * Team members will include the members of child teams.
   *
   * To get a user's membership with a team, the team must be visible to the authenticated user.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.
   *
   * **Note:**
   * The response contains the `state` of the membership and the member's `role`.
   *
   * The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see see [Create a team](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#create-a-team).
   * operationId: teams/get-membership-for-user-in-org
   * Request URI: /orgs/{org}/teams/{team_slug}/memberships/{username}
   */
  public async teams$get$membership$for$user$in$org(
    params: Params$teams$get$membership$for$user$in$org,
    option?: RequestOption,
  ): Promise<Response$teams$get$membership$for$user$in$org$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/teams/${params.parameter.team_slug}/memberships/${params.parameter.username}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Add or update team membership for a user
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.
   *
   * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
   *
   * An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the "pending" state until the person accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team.
   *
   * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.
   * operationId: teams/add-or-update-membership-for-user-in-org
   * Request URI: /orgs/{org}/teams/{team_slug}/memberships/{username}
   */
  public async teams$add$or$update$membership$for$user$in$org(
    params: Params$teams$add$or$update$membership$for$user$in$org,
    option?: RequestOption,
  ): Promise<Response$teams$add$or$update$membership$for$user$in$org$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/teams/${params.parameter.team_slug}/memberships/${params.parameter.username}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Remove team membership for a user
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
   *
   * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.
   * operationId: teams/remove-membership-for-user-in-org
   * Request URI: /orgs/{org}/teams/{team_slug}/memberships/{username}
   */
  public async teams$remove$membership$for$user$in$org(
    params: Params$teams$remove$membership$for$user$in$org,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/teams/${params.parameter.team_slug}/memberships/${params.parameter.username}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * List team projects
   * Lists the organization projects for a team.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.
   * operationId: teams/list-projects-in-org
   * Request URI: /orgs/{org}/teams/{team_slug}/projects
   */
  public async teams$list$projects$in$org(
    params: Params$teams$list$projects$in$org,
    option?: RequestOption,
  ): Promise<Response$teams$list$projects$in$org$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/teams/${params.parameter.team_slug}/projects`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Check team permissions for a project
   * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
   * operationId: teams/check-permissions-for-project-in-org
   * Request URI: /orgs/{org}/teams/{team_slug}/projects/{project_id}
   */
  public async teams$check$permissions$for$project$in$org(
    params: Params$teams$check$permissions$for$project$in$org,
    option?: RequestOption,
  ): Promise<Response$teams$check$permissions$for$project$in$org$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/teams/${params.parameter.team_slug}/projects/${params.parameter.project_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Add or update team project permissions
   * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
   * operationId: teams/add-or-update-project-permissions-in-org
   * Request URI: /orgs/{org}/teams/{team_slug}/projects/{project_id}
   */
  public async teams$add$or$update$project$permissions$in$org(
    params: Params$teams$add$or$update$project$permissions$in$org,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/teams/${params.parameter.team_slug}/projects/${params.parameter.project_id}`;
    const headers = {
      "Content-Type": "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Remove a project from a team
   * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but does not delete the project.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
   * operationId: teams/remove-project-in-org
   * Request URI: /orgs/{org}/teams/{team_slug}/projects/{project_id}
   */
  public async teams$remove$project$in$org(params: Params$teams$remove$project$in$org, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/teams/${params.parameter.team_slug}/projects/${params.parameter.project_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * List team repositories
   * Lists a team's repositories visible to the authenticated user.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.
   * operationId: teams/list-repos-in-org
   * Request URI: /orgs/{org}/teams/{team_slug}/repos
   */
  public async teams$list$repos$in$org(
    params: Params$teams$list$repos$in$org,
    option?: RequestOption,
  ): Promise<Response$teams$list$repos$in$org$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/teams/${params.parameter.team_slug}/repos`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Check team permissions for a repository
   * Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.
   *
   * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/enterprise-server@3.4/rest/overview/media-types/) via the `application/vnd.github.v3.repository+json` accept header.
   *
   * If a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
   * operationId: teams/check-permissions-for-repo-in-org
   * Request URI: /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}
   */
  public async teams$check$permissions$for$repo$in$org(
    params: Params$teams$check$permissions$for$repo$in$org,
    option?: RequestOption,
  ): Promise<Response$teams$check$permissions$for$repo$in$org$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/orgs/${params.parameter.org}/teams/${params.parameter.team_slug}/repos/${params.parameter.owner}/${params.parameter.repo}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Add or update team repository permissions
   * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#http-verbs)."
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
   *
   * For more information about the permission levels, see "[Repository permission levels for an organization](https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
   * operationId: teams/add-or-update-repo-permissions-in-org
   * Request URI: /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}
   */
  public async teams$add$or$update$repo$permissions$in$org(
    params: Params$teams$add$or$update$repo$permissions$in$org,
    option?: RequestOption,
  ): Promise<void> {
    const url =
      this.baseUrl +
      `/orgs/${params.parameter.org}/teams/${params.parameter.team_slug}/repos/${params.parameter.owner}/${params.parameter.repo}`;
    const headers = {
      "Content-Type": "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Remove a repository from a team
   * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
   * operationId: teams/remove-repo-in-org
   * Request URI: /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}
   */
  public async teams$remove$repo$in$org(params: Params$teams$remove$repo$in$org, option?: RequestOption): Promise<void> {
    const url =
      this.baseUrl +
      `/orgs/${params.parameter.org}/teams/${params.parameter.team_slug}/repos/${params.parameter.owner}/${params.parameter.repo}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * List child teams
   * Lists the child teams of the team specified by `{team_slug}`.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.
   * operationId: teams/list-child-in-org
   * Request URI: /orgs/{org}/teams/{team_slug}/teams
   */
  public async teams$list$child$in$org(
    params: Params$teams$list$child$in$org,
    option?: RequestOption,
  ): Promise<Response$teams$list$child$in$org$Status$200["application/json"]> {
    const url = this.baseUrl + `/orgs/${params.parameter.org}/teams/${params.parameter.team_slug}/teams`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get a project card
   * operationId: projects/get-card
   * Request URI: /projects/columns/cards/{card_id}
   */
  public async projects$get$card(
    params: Params$projects$get$card,
    option?: RequestOption,
  ): Promise<Response$projects$get$card$Status$200["application/json"]> {
    const url = this.baseUrl + `/projects/columns/cards/${params.parameter.card_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Delete a project card
   * operationId: projects/delete-card
   * Request URI: /projects/columns/cards/{card_id}
   */
  public async projects$delete$card(params: Params$projects$delete$card, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/projects/columns/cards/${params.parameter.card_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Update an existing project card
   * operationId: projects/update-card
   * Request URI: /projects/columns/cards/{card_id}
   */
  public async projects$update$card(
    params: Params$projects$update$card,
    option?: RequestOption,
  ): Promise<Response$projects$update$card$Status$200["application/json"]> {
    const url = this.baseUrl + `/projects/columns/cards/${params.parameter.card_id}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Move a project card
   * operationId: projects/move-card
   * Request URI: /projects/columns/cards/{card_id}/moves
   */
  public async projects$move$card(
    params: Params$projects$move$card,
    option?: RequestOption,
  ): Promise<Response$projects$move$card$Status$201["application/json"]> {
    const url = this.baseUrl + `/projects/columns/cards/${params.parameter.card_id}/moves`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get a project column
   * operationId: projects/get-column
   * Request URI: /projects/columns/{column_id}
   */
  public async projects$get$column(
    params: Params$projects$get$column,
    option?: RequestOption,
  ): Promise<Response$projects$get$column$Status$200["application/json"]> {
    const url = this.baseUrl + `/projects/columns/${params.parameter.column_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Delete a project column
   * operationId: projects/delete-column
   * Request URI: /projects/columns/{column_id}
   */
  public async projects$delete$column(params: Params$projects$delete$column, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/projects/columns/${params.parameter.column_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Update an existing project column
   * operationId: projects/update-column
   * Request URI: /projects/columns/{column_id}
   */
  public async projects$update$column(
    params: Params$projects$update$column,
    option?: RequestOption,
  ): Promise<Response$projects$update$column$Status$200["application/json"]> {
    const url = this.baseUrl + `/projects/columns/${params.parameter.column_id}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List project cards
   * operationId: projects/list-cards
   * Request URI: /projects/columns/{column_id}/cards
   */
  public async projects$list$cards(
    params: Params$projects$list$cards,
    option?: RequestOption,
  ): Promise<Response$projects$list$cards$Status$200["application/json"]> {
    const url = this.baseUrl + `/projects/columns/${params.parameter.column_id}/cards`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      archived_state: { value: params.parameter.archived_state, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create a project card
   * operationId: projects/create-card
   * Request URI: /projects/columns/{column_id}/cards
   */
  public async projects$create$card(
    params: Params$projects$create$card,
    option?: RequestOption,
  ): Promise<Response$projects$create$card$Status$201["application/json"]> {
    const url = this.baseUrl + `/projects/columns/${params.parameter.column_id}/cards`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Move a project column
   * operationId: projects/move-column
   * Request URI: /projects/columns/{column_id}/moves
   */
  public async projects$move$column(
    params: Params$projects$move$column,
    option?: RequestOption,
  ): Promise<Response$projects$move$column$Status$201["application/json"]> {
    const url = this.baseUrl + `/projects/columns/${params.parameter.column_id}/moves`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get a project
   * Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
   * operationId: projects/get
   * Request URI: /projects/{project_id}
   */
  public async projects$get(
    params: Params$projects$get,
    option?: RequestOption,
  ): Promise<Response$projects$get$Status$200["application/json"]> {
    const url = this.baseUrl + `/projects/${params.parameter.project_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Delete a project
   * Deletes a project board. Returns a `404 Not Found` status if projects are disabled.
   * operationId: projects/delete
   * Request URI: /projects/{project_id}
   */
  public async projects$delete(params: Params$projects$delete, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/projects/${params.parameter.project_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Update a project
   * Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
   * operationId: projects/update
   * Request URI: /projects/{project_id}
   */
  public async projects$update(
    params: Params$projects$update,
    option?: RequestOption,
  ): Promise<Response$projects$update$Status$200["application/json"]> {
    const url = this.baseUrl + `/projects/${params.parameter.project_id}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List project collaborators
   * Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators.
   * operationId: projects/list-collaborators
   * Request URI: /projects/{project_id}/collaborators
   */
  public async projects$list$collaborators(
    params: Params$projects$list$collaborators,
    option?: RequestOption,
  ): Promise<Response$projects$list$collaborators$Status$200["application/json"]> {
    const url = this.baseUrl + `/projects/${params.parameter.project_id}/collaborators`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      affiliation: { value: params.parameter.affiliation, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Add project collaborator
   * Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator.
   * operationId: projects/add-collaborator
   * Request URI: /projects/{project_id}/collaborators/{username}
   */
  public async projects$add$collaborator(params: Params$projects$add$collaborator, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/projects/${params.parameter.project_id}/collaborators/${params.parameter.username}`;
    const headers = {
      "Content-Type": "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Remove user as a collaborator
   * Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator.
   * operationId: projects/remove-collaborator
   * Request URI: /projects/{project_id}/collaborators/{username}
   */
  public async projects$remove$collaborator(params: Params$projects$remove$collaborator, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/projects/${params.parameter.project_id}/collaborators/${params.parameter.username}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Get project permission for a user
   * Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level.
   * operationId: projects/get-permission-for-user
   * Request URI: /projects/{project_id}/collaborators/{username}/permission
   */
  public async projects$get$permission$for$user(
    params: Params$projects$get$permission$for$user,
    option?: RequestOption,
  ): Promise<Response$projects$get$permission$for$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/projects/${params.parameter.project_id}/collaborators/${params.parameter.username}/permission`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * List project columns
   * operationId: projects/list-columns
   * Request URI: /projects/{project_id}/columns
   */
  public async projects$list$columns(
    params: Params$projects$list$columns,
    option?: RequestOption,
  ): Promise<Response$projects$list$columns$Status$200["application/json"]> {
    const url = this.baseUrl + `/projects/${params.parameter.project_id}/columns`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create a project column
   * operationId: projects/create-column
   * Request URI: /projects/{project_id}/columns
   */
  public async projects$create$column(
    params: Params$projects$create$column,
    option?: RequestOption,
  ): Promise<Response$projects$create$column$Status$201["application/json"]> {
    const url = this.baseUrl + `/projects/${params.parameter.project_id}/columns`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get rate limit status for the authenticated user
   * **Note:** Accessing this endpoint does not count against your REST API rate limit.
   *
   * **Note:** The `rate` object is deprecated. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.
   * operationId: rate-limit/get
   * Request URI: /rate_limit
   */
  public async rate$limit$get(option?: RequestOption): Promise<Response$rate$limit$get$Status$200["application/json"]> {
    const url = this.baseUrl + `/rate_limit`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * @deprecated
   * Delete a reaction (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Reactions API. We recommend migrating your existing code to use the new delete reactions endpoints. For more information, see this [blog post](https://developer.github.com/changes/2020-02-26-new-delete-reactions-endpoints/).
   *
   * OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), when deleting a [team discussion](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussions) or [team discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussion-comments).
   * operationId: reactions/delete-legacy
   * Request URI: /reactions/{reaction_id}
   */
  public async reactions$delete$legacy(params: Params$reactions$delete$legacy, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/reactions/${params.parameter.reaction_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Get a repository
   * The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.
   * operationId: repos/get
   * Request URI: /repos/{owner}/{repo}
   */
  public async repos$get(params: Params$repos$get, option?: RequestOption): Promise<Response$repos$get$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Delete a repository
   * Deleting a repository requires admin access. If OAuth is used, the `delete_repo` scope is required.
   *
   * If an organization owner has configured the organization to prevent members from deleting organization-owned
   * repositories, you will get a `403 Forbidden` response.
   * operationId: repos/delete
   * Request URI: /repos/{owner}/{repo}
   */
  public async repos$delete(params: Params$repos$delete, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Update a repository
   * **Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#replace-all-repository-topics) endpoint.
   * operationId: repos/update
   * Request URI: /repos/{owner}/{repo}
   */
  public async repos$update(
    params: Params$repos$update,
    option?: RequestOption,
  ): Promise<Response$repos$update$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List artifacts for a repository
   * Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
   * operationId: actions/list-artifacts-for-repo
   * Request URI: /repos/{owner}/{repo}/actions/artifacts
   */
  public async actions$list$artifacts$for$repo(
    params: Params$actions$list$artifacts$for$repo,
    option?: RequestOption,
  ): Promise<Response$actions$list$artifacts$for$repo$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/artifacts`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get an artifact
   * Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
   * operationId: actions/get-artifact
   * Request URI: /repos/{owner}/{repo}/actions/artifacts/{artifact_id}
   */
  public async actions$get$artifact(
    params: Params$actions$get$artifact,
    option?: RequestOption,
  ): Promise<Response$actions$get$artifact$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/artifacts/${params.parameter.artifact_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Delete an artifact
   * Deletes an artifact for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
   * operationId: actions/delete-artifact
   * Request URI: /repos/{owner}/{repo}/actions/artifacts/{artifact_id}
   */
  public async actions$delete$artifact(params: Params$actions$delete$artifact, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/artifacts/${params.parameter.artifact_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Download an artifact
   * Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in
   * the response header to find the URL for the download. The `:archive_format` must be `zip`. Anyone with read access to
   * the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
   * GitHub Apps must have the `actions:read` permission to use this endpoint.
   * operationId: actions/download-artifact
   * Request URI: /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}
   */
  public async actions$download$artifact(params: Params$actions$download$artifact, option?: RequestOption): Promise<void> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/artifacts/${params.parameter.artifact_id}/${params.parameter.archive_format}`;
    const headers = {};
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Get a job for a workflow run
   * Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
   * operationId: actions/get-job-for-workflow-run
   * Request URI: /repos/{owner}/{repo}/actions/jobs/{job_id}
   */
  public async actions$get$job$for$workflow$run(
    params: Params$actions$get$job$for$workflow$run,
    option?: RequestOption,
  ): Promise<Response$actions$get$job$for$workflow$run$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/jobs/${params.parameter.job_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Download job logs for a workflow run
   * Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look
   * for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can
   * use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must
   * have the `actions:read` permission to use this endpoint.
   * operationId: actions/download-job-logs-for-workflow-run
   * Request URI: /repos/{owner}/{repo}/actions/jobs/{job_id}/logs
   */
  public async actions$download$job$logs$for$workflow$run(
    params: Params$actions$download$job$logs$for$workflow$run,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/jobs/${params.parameter.job_id}/logs`;
    const headers = {};
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Get GitHub Actions permissions for a repository
   * Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions allowed to run in the repository.
   *
   * You must authenticate using an access token with the `repo` scope to use this
   * endpoint. GitHub Apps must have the `administration` repository permission to use this API.
   * operationId: actions/get-github-actions-permissions-repository
   * Request URI: /repos/{owner}/{repo}/actions/permissions
   */
  public async actions$get$github$actions$permissions$repository(
    params: Params$actions$get$github$actions$permissions$repository,
    option?: RequestOption,
  ): Promise<Response$actions$get$github$actions$permissions$repository$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/permissions`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Set GitHub Actions permissions for a repository
   * Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions in the repository.
   *
   * If the repository belongs to an organization or enterprise that has set restrictive permissions at the organization or enterprise levels, such as `allowed_actions` to `selected` actions, then you cannot override them for the repository.
   *
   * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
   * operationId: actions/set-github-actions-permissions-repository
   * Request URI: /repos/{owner}/{repo}/actions/permissions
   */
  public async actions$set$github$actions$permissions$repository(
    params: Params$actions$set$github$actions$permissions$repository,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/permissions`;
    const headers = {
      "Content-Type": "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get allowed actions for a repository
   * Gets the settings for selected actions that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
   *
   * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
   * operationId: actions/get-allowed-actions-repository
   * Request URI: /repos/{owner}/{repo}/actions/permissions/selected-actions
   */
  public async actions$get$allowed$actions$repository(
    params: Params$actions$get$allowed$actions$repository,
    option?: RequestOption,
  ): Promise<Response$actions$get$allowed$actions$repository$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/permissions/selected-actions`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Set allowed actions for a repository
   * Sets the actions that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
   *
   * If the repository belongs to an organization or enterprise that has `selected` actions set at the organization or enterprise levels, then you cannot override any of the allowed actions settings.
   *
   * To use the `patterns_allowed` setting for private repositories, the repository must belong to an enterprise. If the repository does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories.
   *
   * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
   * operationId: actions/set-allowed-actions-repository
   * Request URI: /repos/{owner}/{repo}/actions/permissions/selected-actions
   */
  public async actions$set$allowed$actions$repository(
    params: Params$actions$set$allowed$actions$repository,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/permissions/selected-actions`;
    const headers = {
      "Content-Type": "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List self-hosted runners for a repository
   * Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint.
   * operationId: actions/list-self-hosted-runners-for-repo
   * Request URI: /repos/{owner}/{repo}/actions/runners
   */
  public async actions$list$self$hosted$runners$for$repo(
    params: Params$actions$list$self$hosted$runners$for$repo,
    option?: RequestOption,
  ): Promise<Response$actions$list$self$hosted$runners$for$repo$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/runners`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List runner applications for a repository
   * Lists binaries for the runner application that you can download and run.
   *
   * You must authenticate using an access token with the `repo` scope to use this endpoint.
   * operationId: actions/list-runner-applications-for-repo
   * Request URI: /repos/{owner}/{repo}/actions/runners/downloads
   */
  public async actions$list$runner$applications$for$repo(
    params: Params$actions$list$runner$applications$for$repo,
    option?: RequestOption,
  ): Promise<Response$actions$list$runner$applications$for$repo$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/runners/downloads`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Create a registration token for a repository
   * Returns a token that you can pass to the `config` script. The token expires after one hour. You must authenticate
   * using an access token with the `repo` scope to use this endpoint.
   *
   * #### Example using registration token
   *
   * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
   *
   * ```
   * ./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN
   * ```
   * operationId: actions/create-registration-token-for-repo
   * Request URI: /repos/{owner}/{repo}/actions/runners/registration-token
   */
  public async actions$create$registration$token$for$repo(
    params: Params$actions$create$registration$token$for$repo,
    option?: RequestOption,
  ): Promise<Response$actions$create$registration$token$for$repo$Status$201["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/runners/registration-token`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, undefined, undefined, option);
  }
  /**
   * Create a remove token for a repository
   * Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour.
   * You must authenticate using an access token with the `repo` scope to use this endpoint.
   *
   * #### Example using remove token
   *
   * To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.
   *
   * ```
   * ./config.sh remove --token TOKEN
   * ```
   * operationId: actions/create-remove-token-for-repo
   * Request URI: /repos/{owner}/{repo}/actions/runners/remove-token
   */
  public async actions$create$remove$token$for$repo(
    params: Params$actions$create$remove$token$for$repo,
    option?: RequestOption,
  ): Promise<Response$actions$create$remove$token$for$repo$Status$201["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/runners/remove-token`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, undefined, undefined, option);
  }
  /**
   * Get a self-hosted runner for a repository
   * Gets a specific self-hosted runner configured in a repository.
   *
   * You must authenticate using an access token with the `repo` scope to use this
   * endpoint.
   * operationId: actions/get-self-hosted-runner-for-repo
   * Request URI: /repos/{owner}/{repo}/actions/runners/{runner_id}
   */
  public async actions$get$self$hosted$runner$for$repo(
    params: Params$actions$get$self$hosted$runner$for$repo,
    option?: RequestOption,
  ): Promise<Response$actions$get$self$hosted$runner$for$repo$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/runners/${params.parameter.runner_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Delete a self-hosted runner from a repository
   * Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
   *
   * You must authenticate using an access token with the `repo`
   * scope to use this endpoint.
   * operationId: actions/delete-self-hosted-runner-from-repo
   * Request URI: /repos/{owner}/{repo}/actions/runners/{runner_id}
   */
  public async actions$delete$self$hosted$runner$from$repo(
    params: Params$actions$delete$self$hosted$runner$from$repo,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/runners/${params.parameter.runner_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * List labels for a self-hosted runner for a repository
   * Lists all labels for a self-hosted runner configured in a repository.
   *
   * You must authenticate using an access token with the `repo` scope to use this
   * endpoint.
   * operationId: actions/list-labels-for-self-hosted-runner-for-repo
   * Request URI: /repos/{owner}/{repo}/actions/runners/{runner_id}/labels
   */
  public async actions$list$labels$for$self$hosted$runner$for$repo(
    params: Params$actions$list$labels$for$self$hosted$runner$for$repo,
    option?: RequestOption,
  ): Promise<Response$actions$list$labels$for$self$hosted$runner$for$repo$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/runners/${params.parameter.runner_id}/labels`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Set custom labels for a self-hosted runner for a repository
   * Remove all previous custom labels and set the new custom labels for a specific
   * self-hosted runner configured in a repository.
   *
   * You must authenticate using an access token with the `repo` scope to use this
   * endpoint.
   * operationId: actions/set-custom-labels-for-self-hosted-runner-for-repo
   * Request URI: /repos/{owner}/{repo}/actions/runners/{runner_id}/labels
   */
  public async actions$set$custom$labels$for$self$hosted$runner$for$repo(
    params: Params$actions$set$custom$labels$for$self$hosted$runner$for$repo,
    option?: RequestOption,
  ): Promise<Response$actions$set$custom$labels$for$self$hosted$runner$for$repo$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/runners/${params.parameter.runner_id}/labels`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Add custom labels to a self-hosted runner for a repository
   * Add custom labels to a self-hosted runner configured in a repository.
   *
   * You must authenticate using an access token with the `repo` scope to use this
   * endpoint.
   * operationId: actions/add-custom-labels-to-self-hosted-runner-for-repo
   * Request URI: /repos/{owner}/{repo}/actions/runners/{runner_id}/labels
   */
  public async actions$add$custom$labels$to$self$hosted$runner$for$repo(
    params: Params$actions$add$custom$labels$to$self$hosted$runner$for$repo,
    option?: RequestOption,
  ): Promise<Response$actions$add$custom$labels$to$self$hosted$runner$for$repo$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/runners/${params.parameter.runner_id}/labels`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Remove all custom labels from a self-hosted runner for a repository
   * Remove all custom labels from a self-hosted runner configured in a
   * repository. Returns the remaining read-only labels from the runner.
   *
   * You must authenticate using an access token with the `repo` scope to use this
   * endpoint.
   * operationId: actions/remove-all-custom-labels-from-self-hosted-runner-for-repo
   * Request URI: /repos/{owner}/{repo}/actions/runners/{runner_id}/labels
   */
  public async actions$remove$all$custom$labels$from$self$hosted$runner$for$repo(
    params: Params$actions$remove$all$custom$labels$from$self$hosted$runner$for$repo,
    option?: RequestOption,
  ): Promise<Response$actions$remove$all$custom$labels$from$self$hosted$runner$for$repo$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/runners/${params.parameter.runner_id}/labels`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Remove a custom label from a self-hosted runner for a repository
   * Remove a custom label from a self-hosted runner configured
   * in a repository. Returns the remaining labels from the runner.
   *
   * This endpoint returns a `404 Not Found` status if the custom label is not
   * present on the runner.
   *
   * You must authenticate using an access token with the `repo` scope to use this
   * endpoint.
   * operationId: actions/remove-custom-label-from-self-hosted-runner-for-repo
   * Request URI: /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}
   */
  public async actions$remove$custom$label$from$self$hosted$runner$for$repo(
    params: Params$actions$remove$custom$label$from$self$hosted$runner$for$repo,
    option?: RequestOption,
  ): Promise<Response$actions$remove$custom$label$from$self$hosted$runner$for$repo$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/runners/${params.parameter.runner_id}/labels/${params.parameter.name}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * List workflow runs for a repository
   * Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#parameters).
   *
   * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
   * operationId: actions/list-workflow-runs-for-repo
   * Request URI: /repos/{owner}/{repo}/actions/runs
   */
  public async actions$list$workflow$runs$for$repo(
    params: Params$actions$list$workflow$runs$for$repo,
    option?: RequestOption,
  ): Promise<Response$actions$list$workflow$runs$for$repo$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/runs`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      actor: { value: params.parameter.actor, explode: false },
      branch: { value: params.parameter.branch, explode: false },
      event: { value: params.parameter.event, explode: false },
      status: { value: params.parameter.status, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
      created: { value: params.parameter.created, explode: false },
      exclude_pull_requests: { value: params.parameter.exclude_pull_requests, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get a workflow run
   * Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
   * operationId: actions/get-workflow-run
   * Request URI: /repos/{owner}/{repo}/actions/runs/{run_id}
   */
  public async actions$get$workflow$run(
    params: Params$actions$get$workflow$run,
    option?: RequestOption,
  ): Promise<Response$actions$get$workflow$run$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/runs/${params.parameter.run_id}`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      exclude_pull_requests: { value: params.parameter.exclude_pull_requests, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Delete a workflow run
   * Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is
   * private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:write` permission to use
   * this endpoint.
   * operationId: actions/delete-workflow-run
   * Request URI: /repos/{owner}/{repo}/actions/runs/{run_id}
   */
  public async actions$delete$workflow$run(params: Params$actions$delete$workflow$run, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/runs/${params.parameter.run_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Get the review history for a workflow run
   * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
   * operationId: actions/get-reviews-for-run
   * Request URI: /repos/{owner}/{repo}/actions/runs/{run_id}/approvals
   */
  public async actions$get$reviews$for$run(
    params: Params$actions$get$reviews$for$run,
    option?: RequestOption,
  ): Promise<Response$actions$get$reviews$for$run$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/runs/${params.parameter.run_id}/approvals`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * List workflow run artifacts
   * Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
   * operationId: actions/list-workflow-run-artifacts
   * Request URI: /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts
   */
  public async actions$list$workflow$run$artifacts(
    params: Params$actions$list$workflow$run$artifacts,
    option?: RequestOption,
  ): Promise<Response$actions$list$workflow$run$artifacts$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/runs/${params.parameter.run_id}/artifacts`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Cancel a workflow run
   * Cancels a workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
   * operationId: actions/cancel-workflow-run
   * Request URI: /repos/{owner}/{repo}/actions/runs/{run_id}/cancel
   */
  public async actions$cancel$workflow$run(
    params: Params$actions$cancel$workflow$run,
    option?: RequestOption,
  ): Promise<Response$actions$cancel$workflow$run$Status$202["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/runs/${params.parameter.run_id}/cancel`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, undefined, undefined, option);
  }
  /**
   * List jobs for a workflow run
   * Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#parameters).
   * operationId: actions/list-jobs-for-workflow-run
   * Request URI: /repos/{owner}/{repo}/actions/runs/{run_id}/jobs
   */
  public async actions$list$jobs$for$workflow$run(
    params: Params$actions$list$jobs$for$workflow$run,
    option?: RequestOption,
  ): Promise<Response$actions$list$jobs$for$workflow$run$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/runs/${params.parameter.run_id}/jobs`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      filter: { value: params.parameter.filter, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Download workflow run logs
   * Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for
   * `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use
   * this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have
   * the `actions:read` permission to use this endpoint.
   * operationId: actions/download-workflow-run-logs
   * Request URI: /repos/{owner}/{repo}/actions/runs/{run_id}/logs
   */
  public async actions$download$workflow$run$logs(params: Params$actions$download$workflow$run$logs, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/runs/${params.parameter.run_id}/logs`;
    const headers = {};
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Delete workflow run logs
   * Deletes all logs for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
   * operationId: actions/delete-workflow-run-logs
   * Request URI: /repos/{owner}/{repo}/actions/runs/{run_id}/logs
   */
  public async actions$delete$workflow$run$logs(params: Params$actions$delete$workflow$run$logs, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/runs/${params.parameter.run_id}/logs`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Get pending deployments for a workflow run
   * Get all deployment environments for a workflow run that are waiting for protection rules to pass.
   *
   * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
   * operationId: actions/get-pending-deployments-for-run
   * Request URI: /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments
   */
  public async actions$get$pending$deployments$for$run(
    params: Params$actions$get$pending$deployments$for$run,
    option?: RequestOption,
  ): Promise<Response$actions$get$pending$deployments$for$run$Status$200["application/json"]> {
    const url =
      this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/runs/${params.parameter.run_id}/pending_deployments`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Review pending deployments for a workflow run
   * Approve or reject pending deployments that are waiting on approval by a required reviewer.
   *
   * Anyone with read access to the repository contents and deployments can use this endpoint.
   * operationId: actions/review-pending-deployments-for-run
   * Request URI: /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments
   */
  public async actions$review$pending$deployments$for$run(
    params: Params$actions$review$pending$deployments$for$run,
    option?: RequestOption,
  ): Promise<Response$actions$review$pending$deployments$for$run$Status$200["application/json"]> {
    const url =
      this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/runs/${params.parameter.run_id}/pending_deployments`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * @deprecated
   * Re-run a workflow
   * Re-runs your workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
   * operationId: actions/re-run-workflow
   * Request URI: /repos/{owner}/{repo}/actions/runs/{run_id}/rerun
   */
  public async actions$re$run$workflow(
    params: Params$actions$re$run$workflow,
    option?: RequestOption,
  ): Promise<Response$actions$re$run$workflow$Status$201["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/runs/${params.parameter.run_id}/rerun`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, undefined, undefined, option);
  }
  /**
   * List repository secrets
   * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
   * operationId: actions/list-repo-secrets
   * Request URI: /repos/{owner}/{repo}/actions/secrets
   */
  public async actions$list$repo$secrets(
    params: Params$actions$list$repo$secrets,
    option?: RequestOption,
  ): Promise<Response$actions$list$repo$secrets$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/secrets`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get a repository public key
   * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.
   * operationId: actions/get-repo-public-key
   * Request URI: /repos/{owner}/{repo}/actions/secrets/public-key
   */
  public async actions$get$repo$public$key(
    params: Params$actions$get$repo$public$key,
    option?: RequestOption,
  ): Promise<Response$actions$get$repo$public$key$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/secrets/public-key`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Get a repository secret
   * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
   * operationId: actions/get-repo-secret
   * Request URI: /repos/{owner}/{repo}/actions/secrets/{secret_name}
   */
  public async actions$get$repo$secret(
    params: Params$actions$get$repo$secret,
    option?: RequestOption,
  ): Promise<Response$actions$get$repo$secret$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/secrets/${params.parameter.secret_name}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Create or update a repository secret
   * Creates or updates a repository secret with an encrypted value. Encrypt your secret using
   * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
   * token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use
   * this endpoint.
   *
   * #### Example encrypting a secret using Node.js
   *
   * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
   *
   * ```
   * const sodium = require('tweetsodium');
   *
   * const key = "base64-encoded-public-key";
   * const value = "plain-text-secret";
   *
   * // Convert the message and key to Uint8Array's (Buffer implements that interface)
   * const messageBytes = Buffer.from(value);
   * const keyBytes = Buffer.from(key, 'base64');
   *
   * // Encrypt using LibSodium.
   * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
   *
   * // Base64 the encrypted secret
   * const encrypted = Buffer.from(encryptedBytes).toString('base64');
   *
   * console.log(encrypted);
   * ```
   *
   *
   * #### Example encrypting a secret using Python
   *
   * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
   *
   * ```
   * from base64 import b64encode
   * from nacl import encoding, public
   *
   * def encrypt(public_key: str, secret_value: str) -> str:
   *   """Encrypt a Unicode string using the public key."""
   *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
   *   sealed_box = public.SealedBox(public_key)
   *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
   *   return b64encode(encrypted).decode("utf-8")
   * ```
   *
   * #### Example encrypting a secret using C#
   *
   * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
   *
   * ```
   * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
   * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
   *
   * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
   *
   * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
   * ```
   *
   * #### Example encrypting a secret using Ruby
   *
   * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
   *
   * ```ruby
   * require "rbnacl"
   * require "base64"
   *
   * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
   * public_key = RbNaCl::PublicKey.new(key)
   *
   * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
   * encrypted_secret = box.encrypt("my_secret")
   *
   * # Print the base64 encoded secret
   * puts Base64.strict_encode64(encrypted_secret)
   * ```
   * operationId: actions/create-or-update-repo-secret
   * Request URI: /repos/{owner}/{repo}/actions/secrets/{secret_name}
   */
  public async actions$create$or$update$repo$secret(
    params: Params$actions$create$or$update$repo$secret,
    option?: RequestOption,
  ): Promise<Response$actions$create$or$update$repo$secret$Status$201["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/secrets/${params.parameter.secret_name}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Delete a repository secret
   * Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
   * operationId: actions/delete-repo-secret
   * Request URI: /repos/{owner}/{repo}/actions/secrets/{secret_name}
   */
  public async actions$delete$repo$secret(params: Params$actions$delete$repo$secret, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/secrets/${params.parameter.secret_name}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * List repository workflows
   * Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
   * operationId: actions/list-repo-workflows
   * Request URI: /repos/{owner}/{repo}/actions/workflows
   */
  public async actions$list$repo$workflows(
    params: Params$actions$list$repo$workflows,
    option?: RequestOption,
  ): Promise<Response$actions$list$repo$workflows$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/workflows`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get a workflow
   * Gets a specific workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
   * operationId: actions/get-workflow
   * Request URI: /repos/{owner}/{repo}/actions/workflows/{workflow_id}
   */
  public async actions$get$workflow(
    params: Params$actions$get$workflow,
    option?: RequestOption,
  ): Promise<Response$actions$get$workflow$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/workflows/${params.parameter.workflow_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Disable a workflow
   * Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
   *
   * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
   * operationId: actions/disable-workflow
   * Request URI: /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable
   */
  public async actions$disable$workflow(params: Params$actions$disable$workflow, option?: RequestOption): Promise<void> {
    const url =
      this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/workflows/${params.parameter.workflow_id}/disable`;
    const headers = {};
    return this.apiClient.request("PUT", url, headers, undefined, undefined, option);
  }
  /**
   * Create a workflow dispatch event
   * You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
   *
   * You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see "[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch)."
   *
   * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. For more information, see "[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line)."
   * operationId: actions/create-workflow-dispatch
   * Request URI: /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches
   */
  public async actions$create$workflow$dispatch(params: Params$actions$create$workflow$dispatch, option?: RequestOption): Promise<void> {
    const url =
      this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/workflows/${params.parameter.workflow_id}/dispatches`;
    const headers = {
      "Content-Type": "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Enable a workflow
   * Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
   *
   * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
   * operationId: actions/enable-workflow
   * Request URI: /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable
   */
  public async actions$enable$workflow(params: Params$actions$enable$workflow, option?: RequestOption): Promise<void> {
    const url =
      this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/workflows/${params.parameter.workflow_id}/enable`;
    const headers = {};
    return this.apiClient.request("PUT", url, headers, undefined, undefined, option);
  }
  /**
   * List workflow runs
   * List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#parameters).
   *
   * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
   * operationId: actions/list-workflow-runs
   * Request URI: /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs
   */
  public async actions$list$workflow$runs(
    params: Params$actions$list$workflow$runs,
    option?: RequestOption,
  ): Promise<Response$actions$list$workflow$runs$Status$200["application/json"]> {
    const url =
      this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/actions/workflows/${params.parameter.workflow_id}/runs`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      actor: { value: params.parameter.actor, explode: false },
      branch: { value: params.parameter.branch, explode: false },
      event: { value: params.parameter.event, explode: false },
      status: { value: params.parameter.status, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
      created: { value: params.parameter.created, explode: false },
      exclude_pull_requests: { value: params.parameter.exclude_pull_requests, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List assignees
   * Lists the [available assignees](https://docs.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.
   * operationId: issues/list-assignees
   * Request URI: /repos/{owner}/{repo}/assignees
   */
  public async issues$list$assignees(
    params: Params$issues$list$assignees,
    option?: RequestOption,
  ): Promise<Response$issues$list$assignees$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/assignees`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Check if a user can be assigned
   * Checks if a user has permission to be assigned to an issue in this repository.
   *
   * If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.
   *
   * Otherwise a `404` status code is returned.
   * operationId: issues/check-user-can-be-assigned
   * Request URI: /repos/{owner}/{repo}/assignees/{assignee}
   */
  public async issues$check$user$can$be$assigned(params: Params$issues$check$user$can$be$assigned, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/assignees/${params.parameter.assignee}`;
    const headers = {};
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * List all autolinks of a repository
   * This returns a list of autolinks configured for the given repository.
   *
   * Information about autolinks are only available to repository administrators.
   * operationId: repos/list-autolinks
   * Request URI: /repos/{owner}/{repo}/autolinks
   */
  public async repos$list$autolinks(
    params: Params$repos$list$autolinks,
    option?: RequestOption,
  ): Promise<Response$repos$list$autolinks$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/autolinks`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create an autolink reference for a repository
   * Users with admin access to the repository can create an autolink.
   * operationId: repos/create-autolink
   * Request URI: /repos/{owner}/{repo}/autolinks
   */
  public async repos$create$autolink(
    params: Params$repos$create$autolink,
    option?: RequestOption,
  ): Promise<Response$repos$create$autolink$Status$201["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/autolinks`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get an autolink reference of a repository
   * This returns a single autolink reference by ID that was configured for the given repository.
   *
   * Information about autolinks are only available to repository administrators.
   * operationId: repos/get-autolink
   * Request URI: /repos/{owner}/{repo}/autolinks/{autolink_id}
   */
  public async repos$get$autolink(
    params: Params$repos$get$autolink,
    option?: RequestOption,
  ): Promise<Response$repos$get$autolink$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/autolinks/${params.parameter.autolink_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Delete an autolink reference from a repository
   * This deletes a single autolink reference by ID that was configured for the given repository.
   *
   * Information about autolinks are only available to repository administrators.
   * operationId: repos/delete-autolink
   * Request URI: /repos/{owner}/{repo}/autolinks/{autolink_id}
   */
  public async repos$delete$autolink(params: Params$repos$delete$autolink, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/autolinks/${params.parameter.autolink_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * List branches
   * operationId: repos/list-branches
   * Request URI: /repos/{owner}/{repo}/branches
   */
  public async repos$list$branches(
    params: Params$repos$list$branches,
    option?: RequestOption,
  ): Promise<Response$repos$list$branches$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/branches`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      protected: { value: params.parameter.protected, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get a branch
   * operationId: repos/get-branch
   * Request URI: /repos/{owner}/{repo}/branches/{branch}
   */
  public async repos$get$branch(
    params: Params$repos$get$branch,
    option?: RequestOption,
  ): Promise<Response$repos$get$branch$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/branches/${params.parameter.branch}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Get branch protection
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   * operationId: repos/get-branch-protection
   * Request URI: /repos/{owner}/{repo}/branches/{branch}/protection
   */
  public async repos$get$branch$protection(
    params: Params$repos$get$branch$protection,
    option?: RequestOption,
  ): Promise<Response$repos$get$branch$protection$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/branches/${params.parameter.branch}/protection`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Update branch protection
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Protecting a branch requires admin or owner permissions to the repository.
   *
   * **Note**: Passing new arrays of `users` and `teams` replaces their previous values.
   *
   * **Note**: The list of users, apps, and teams in total is limited to 100 items.
   * operationId: repos/update-branch-protection
   * Request URI: /repos/{owner}/{repo}/branches/{branch}/protection
   */
  public async repos$update$branch$protection(
    params: Params$repos$update$branch$protection,
    option?: RequestOption,
  ): Promise<Response$repos$update$branch$protection$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/branches/${params.parameter.branch}/protection`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Delete branch protection
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   * operationId: repos/delete-branch-protection
   * Request URI: /repos/{owner}/{repo}/branches/{branch}/protection
   */
  public async repos$delete$branch$protection(params: Params$repos$delete$branch$protection, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/branches/${params.parameter.branch}/protection`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Get admin branch protection
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   * operationId: repos/get-admin-branch-protection
   * Request URI: /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins
   */
  public async repos$get$admin$branch$protection(
    params: Params$repos$get$admin$branch$protection,
    option?: RequestOption,
  ): Promise<Response$repos$get$admin$branch$protection$Status$200["application/json"]> {
    const url =
      this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/branches/${params.parameter.branch}/protection/enforce_admins`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Set admin branch protection
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
   * operationId: repos/set-admin-branch-protection
   * Request URI: /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins
   */
  public async repos$set$admin$branch$protection(
    params: Params$repos$set$admin$branch$protection,
    option?: RequestOption,
  ): Promise<Response$repos$set$admin$branch$protection$Status$200["application/json"]> {
    const url =
      this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/branches/${params.parameter.branch}/protection/enforce_admins`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, undefined, undefined, option);
  }
  /**
   * Delete admin branch protection
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
   * operationId: repos/delete-admin-branch-protection
   * Request URI: /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins
   */
  public async repos$delete$admin$branch$protection(
    params: Params$repos$delete$admin$branch$protection,
    option?: RequestOption,
  ): Promise<void> {
    const url =
      this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/branches/${params.parameter.branch}/protection/enforce_admins`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Get pull request review protection
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   * operationId: repos/get-pull-request-review-protection
   * Request URI: /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews
   */
  public async repos$get$pull$request$review$protection(
    params: Params$repos$get$pull$request$review$protection,
    option?: RequestOption,
  ): Promise<Response$repos$get$pull$request$review$protection$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/branches/${params.parameter.branch}/protection/required_pull_request_reviews`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Delete pull request review protection
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   * operationId: repos/delete-pull-request-review-protection
   * Request URI: /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews
   */
  public async repos$delete$pull$request$review$protection(
    params: Params$repos$delete$pull$request$review$protection,
    option?: RequestOption,
  ): Promise<void> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/branches/${params.parameter.branch}/protection/required_pull_request_reviews`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Update pull request review protection
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
   *
   * **Note**: Passing new arrays of `users` and `teams` replaces their previous values.
   * operationId: repos/update-pull-request-review-protection
   * Request URI: /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews
   */
  public async repos$update$pull$request$review$protection(
    params: Params$repos$update$pull$request$review$protection,
    option?: RequestOption,
  ): Promise<Response$repos$update$pull$request$review$protection$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/branches/${params.parameter.branch}/protection/required_pull_request_reviews`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get commit signature protection
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://docs.github.com/articles/signing-commits-with-gpg) in GitHub Help.
   *
   * **Note**: You must enable branch protection to require signed commits.
   * operationId: repos/get-commit-signature-protection
   * Request URI: /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures
   */
  public async repos$get$commit$signature$protection(
    params: Params$repos$get$commit$signature$protection,
    option?: RequestOption,
  ): Promise<Response$repos$get$commit$signature$protection$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/branches/${params.parameter.branch}/protection/required_signatures`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Create commit signature protection
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.
   * operationId: repos/create-commit-signature-protection
   * Request URI: /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures
   */
  public async repos$create$commit$signature$protection(
    params: Params$repos$create$commit$signature$protection,
    option?: RequestOption,
  ): Promise<Response$repos$create$commit$signature$protection$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/branches/${params.parameter.branch}/protection/required_signatures`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, undefined, undefined, option);
  }
  /**
   * Delete commit signature protection
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.
   * operationId: repos/delete-commit-signature-protection
   * Request URI: /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures
   */
  public async repos$delete$commit$signature$protection(
    params: Params$repos$delete$commit$signature$protection,
    option?: RequestOption,
  ): Promise<void> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/branches/${params.parameter.branch}/protection/required_signatures`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Get status checks protection
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   * operationId: repos/get-status-checks-protection
   * Request URI: /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks
   */
  public async repos$get$status$checks$protection(
    params: Params$repos$get$status$checks$protection,
    option?: RequestOption,
  ): Promise<Response$repos$get$status$checks$protection$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/branches/${params.parameter.branch}/protection/required_status_checks`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Remove status check protection
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   * operationId: repos/remove-status-check-protection
   * Request URI: /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks
   */
  public async repos$remove$status$check$protection(
    params: Params$repos$remove$status$check$protection,
    option?: RequestOption,
  ): Promise<void> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/branches/${params.parameter.branch}/protection/required_status_checks`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Update status check protection
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.
   * operationId: repos/update-status-check-protection
   * Request URI: /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks
   */
  public async repos$update$status$check$protection(
    params: Params$repos$update$status$check$protection,
    option?: RequestOption,
  ): Promise<Response$repos$update$status$check$protection$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/branches/${params.parameter.branch}/protection/required_status_checks`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get all status check contexts
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   * operationId: repos/get-all-status-check-contexts
   * Request URI: /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts
   */
  public async repos$get$all$status$check$contexts(
    params: Params$repos$get$all$status$check$contexts,
    option?: RequestOption,
  ): Promise<Response$repos$get$all$status$check$contexts$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/branches/${params.parameter.branch}/protection/required_status_checks/contexts`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Set status check contexts
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   * operationId: repos/set-status-check-contexts
   * Request URI: /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts
   */
  public async repos$set$status$check$contexts(
    params: Params$repos$set$status$check$contexts,
    option?: RequestOption,
  ): Promise<Response$repos$set$status$check$contexts$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/branches/${params.parameter.branch}/protection/required_status_checks/contexts`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Add status check contexts
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   * operationId: repos/add-status-check-contexts
   * Request URI: /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts
   */
  public async repos$add$status$check$contexts(
    params: Params$repos$add$status$check$contexts,
    option?: RequestOption,
  ): Promise<Response$repos$add$status$check$contexts$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/branches/${params.parameter.branch}/protection/required_status_checks/contexts`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Remove status check contexts
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   * operationId: repos/remove-status-check-contexts
   * Request URI: /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts
   */
  public async repos$remove$status$check$contexts(
    params: Params$repos$remove$status$check$contexts,
    option?: RequestOption,
  ): Promise<Response$repos$remove$status$check$contexts$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/branches/${params.parameter.branch}/protection/required_status_checks/contexts`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("DELETE", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get access restrictions
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Lists who has access to this protected branch.
   *
   * **Note**: Users, apps, and teams `restrictions` are only available for organization-owned repositories.
   * operationId: repos/get-access-restrictions
   * Request URI: /repos/{owner}/{repo}/branches/{branch}/protection/restrictions
   */
  public async repos$get$access$restrictions(
    params: Params$repos$get$access$restrictions,
    option?: RequestOption,
  ): Promise<Response$repos$get$access$restrictions$Status$200["application/json"]> {
    const url =
      this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/branches/${params.parameter.branch}/protection/restrictions`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Delete access restrictions
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Disables the ability to restrict who can push to this branch.
   * operationId: repos/delete-access-restrictions
   * Request URI: /repos/{owner}/{repo}/branches/{branch}/protection/restrictions
   */
  public async repos$delete$access$restrictions(params: Params$repos$delete$access$restrictions, option?: RequestOption): Promise<void> {
    const url =
      this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/branches/${params.parameter.branch}/protection/restrictions`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Get apps with access to the protected branch
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Lists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
   * operationId: repos/get-apps-with-access-to-protected-branch
   * Request URI: /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps
   */
  public async repos$get$apps$with$access$to$protected$branch(
    params: Params$repos$get$apps$with$access$to$protected$branch,
    option?: RequestOption,
  ): Promise<Response$repos$get$apps$with$access$to$protected$branch$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/branches/${params.parameter.branch}/protection/restrictions/apps`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Set app access restrictions
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
   *
   * | Type    | Description                                                                                                                                                |
   * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
   * operationId: repos/set-app-access-restrictions
   * Request URI: /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps
   */
  public async repos$set$app$access$restrictions(
    params: Params$repos$set$app$access$restrictions,
    option?: RequestOption,
  ): Promise<Response$repos$set$app$access$restrictions$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/branches/${params.parameter.branch}/protection/restrictions/apps`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Add app access restrictions
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Grants the specified apps push access for this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
   *
   * | Type    | Description                                                                                                                                                |
   * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
   * operationId: repos/add-app-access-restrictions
   * Request URI: /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps
   */
  public async repos$add$app$access$restrictions(
    params: Params$repos$add$app$access$restrictions,
    option?: RequestOption,
  ): Promise<Response$repos$add$app$access$restrictions$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/branches/${params.parameter.branch}/protection/restrictions/apps`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Remove app access restrictions
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Removes the ability of an app to push to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
   *
   * | Type    | Description                                                                                                                                                |
   * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
   * operationId: repos/remove-app-access-restrictions
   * Request URI: /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps
   */
  public async repos$remove$app$access$restrictions(
    params: Params$repos$remove$app$access$restrictions,
    option?: RequestOption,
  ): Promise<Response$repos$remove$app$access$restrictions$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/branches/${params.parameter.branch}/protection/restrictions/apps`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("DELETE", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get teams with access to the protected branch
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Lists the teams who have push access to this branch. The list includes child teams.
   * operationId: repos/get-teams-with-access-to-protected-branch
   * Request URI: /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams
   */
  public async repos$get$teams$with$access$to$protected$branch(
    params: Params$repos$get$teams$with$access$to$protected$branch,
    option?: RequestOption,
  ): Promise<Response$repos$get$teams$with$access$to$protected$branch$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/branches/${params.parameter.branch}/protection/restrictions/teams`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Set team access restrictions
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.
   *
   * | Type    | Description                                                                                                                                |
   * | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
   * | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
   * operationId: repos/set-team-access-restrictions
   * Request URI: /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams
   */
  public async repos$set$team$access$restrictions(
    params: Params$repos$set$team$access$restrictions,
    option?: RequestOption,
  ): Promise<Response$repos$set$team$access$restrictions$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/branches/${params.parameter.branch}/protection/restrictions/teams`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Add team access restrictions
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Grants the specified teams push access for this branch. You can also give push access to child teams.
   *
   * | Type    | Description                                                                                                                                |
   * | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
   * | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
   * operationId: repos/add-team-access-restrictions
   * Request URI: /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams
   */
  public async repos$add$team$access$restrictions(
    params: Params$repos$add$team$access$restrictions,
    option?: RequestOption,
  ): Promise<Response$repos$add$team$access$restrictions$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/branches/${params.parameter.branch}/protection/restrictions/teams`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Remove team access restrictions
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Removes the ability of a team to push to this branch. You can also remove push access for child teams.
   *
   * | Type    | Description                                                                                                                                         |
   * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `array` | Teams that should no longer have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
   * operationId: repos/remove-team-access-restrictions
   * Request URI: /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams
   */
  public async repos$remove$team$access$restrictions(
    params: Params$repos$remove$team$access$restrictions,
    option?: RequestOption,
  ): Promise<Response$repos$remove$team$access$restrictions$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/branches/${params.parameter.branch}/protection/restrictions/teams`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("DELETE", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get users with access to the protected branch
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Lists the people who have push access to this branch.
   * operationId: repos/get-users-with-access-to-protected-branch
   * Request URI: /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users
   */
  public async repos$get$users$with$access$to$protected$branch(
    params: Params$repos$get$users$with$access$to$protected$branch,
    option?: RequestOption,
  ): Promise<Response$repos$get$users$with$access$to$protected$branch$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/branches/${params.parameter.branch}/protection/restrictions/users`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Set user access restrictions
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.
   *
   * | Type    | Description                                                                                                                   |
   * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
   * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
   * operationId: repos/set-user-access-restrictions
   * Request URI: /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users
   */
  public async repos$set$user$access$restrictions(
    params: Params$repos$set$user$access$restrictions,
    option?: RequestOption,
  ): Promise<Response$repos$set$user$access$restrictions$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/branches/${params.parameter.branch}/protection/restrictions/users`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Add user access restrictions
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Grants the specified people push access for this branch.
   *
   * | Type    | Description                                                                                                                   |
   * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
   * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
   * operationId: repos/add-user-access-restrictions
   * Request URI: /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users
   */
  public async repos$add$user$access$restrictions(
    params: Params$repos$add$user$access$restrictions,
    option?: RequestOption,
  ): Promise<Response$repos$add$user$access$restrictions$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/branches/${params.parameter.branch}/protection/restrictions/users`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Remove user access restrictions
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Removes the ability of a user to push to this branch.
   *
   * | Type    | Description                                                                                                                                   |
   * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
   * operationId: repos/remove-user-access-restrictions
   * Request URI: /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users
   */
  public async repos$remove$user$access$restrictions(
    params: Params$repos$remove$user$access$restrictions,
    option?: RequestOption,
  ): Promise<Response$repos$remove$user$access$restrictions$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/branches/${params.parameter.branch}/protection/restrictions/users`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("DELETE", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Rename a branch
   * Renames a branch in a repository.
   *
   * **Note:** Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won't be able to push to the old branch name while the rename process is in progress. For more information, see "[Renaming a branch](https://docs.github.com/enterprise-server@3.4/github/administering-a-repository/renaming-a-branch)".
   *
   * The permissions required to use this endpoint depends on whether you are renaming the default branch.
   *
   * To rename a non-default branch:
   *
   * * Users must have push access.
   * * GitHub Apps must have the `contents:write` repository permission.
   *
   * To rename the default branch:
   *
   * * Users must have admin or owner permissions.
   * * GitHub Apps must have the `administration:write` repository permission.
   * operationId: repos/rename-branch
   * Request URI: /repos/{owner}/{repo}/branches/{branch}/rename
   */
  public async repos$rename$branch(
    params: Params$repos$rename$branch,
    option?: RequestOption,
  ): Promise<Response$repos$rename$branch$Status$201["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/branches/${params.parameter.branch}/rename`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Create a check run
   * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
   *
   * Creates a new check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to create check runs.
   *
   * In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.
   * operationId: checks/create
   * Request URI: /repos/{owner}/{repo}/check-runs
   */
  public async checks$create(
    params: Params$checks$create,
    option?: RequestOption,
  ): Promise<Response$checks$create$Status$201["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/check-runs`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get a check run
   * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
   *
   * Gets a single check run using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
   * operationId: checks/get
   * Request URI: /repos/{owner}/{repo}/check-runs/{check_run_id}
   */
  public async checks$get(params: Params$checks$get, option?: RequestOption): Promise<Response$checks$get$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/check-runs/${params.parameter.check_run_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Update a check run
   * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
   *
   * Updates a check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to edit check runs.
   * operationId: checks/update
   * Request URI: /repos/{owner}/{repo}/check-runs/{check_run_id}
   */
  public async checks$update(
    params: Params$checks$update,
    option?: RequestOption,
  ): Promise<Response$checks$update$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/check-runs/${params.parameter.check_run_id}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List check run annotations
   * Lists annotations for a check run using the annotation `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the `repo` scope to get annotations for a check run in a private repository.
   * operationId: checks/list-annotations
   * Request URI: /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations
   */
  public async checks$list$annotations(
    params: Params$checks$list$annotations,
    option?: RequestOption,
  ): Promise<Response$checks$list$annotations$Status$200["application/json"]> {
    const url =
      this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/check-runs/${params.parameter.check_run_id}/annotations`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Rerequest a check run
   * Triggers GitHub to rerequest an existing check run, without pushing new code to a repository. This endpoint will trigger the [`check_run` webhook](https://docs.github.com/enterprise-server@3.4/webhooks/event-payloads/#check_run) event with the action `rerequested`. When a check run is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.
   *
   * To rerequest a check run, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.
   * operationId: checks/rerequest-run
   * Request URI: /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest
   */
  public async checks$rerequest$run(
    params: Params$checks$rerequest$run,
    option?: RequestOption,
  ): Promise<Response$checks$rerequest$run$Status$201["application/json"]> {
    const url =
      this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/check-runs/${params.parameter.check_run_id}/rerequest`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, undefined, undefined, option);
  }
  /**
   * Create a check suite
   * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
   *
   * By default, check suites are automatically created when you create a [check run](https://docs.github.com/enterprise-server@3.4/rest/reference/checks#check-runs). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using "[Update repository preferences for check suites](https://docs.github.com/enterprise-server@3.4/rest/reference/checks#update-repository-preferences-for-check-suites)". Your GitHub App must have the `checks:write` permission to create check suites.
   * operationId: checks/create-suite
   * Request URI: /repos/{owner}/{repo}/check-suites
   */
  public async checks$create$suite(
    params: Params$checks$create$suite,
    option?: RequestOption,
  ): Promise<(Response$checks$create$suite$Status$200 | Response$checks$create$suite$Status$201)["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/check-suites`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Update repository preferences for check suites
   * Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/enterprise-server@3.4/rest/reference/checks#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites.
   * operationId: checks/set-suites-preferences
   * Request URI: /repos/{owner}/{repo}/check-suites/preferences
   */
  public async checks$set$suites$preferences(
    params: Params$checks$set$suites$preferences,
    option?: RequestOption,
  ): Promise<Response$checks$set$suites$preferences$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/check-suites/preferences`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get a check suite
   * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
   *
   * Gets a single check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
   * operationId: checks/get-suite
   * Request URI: /repos/{owner}/{repo}/check-suites/{check_suite_id}
   */
  public async checks$get$suite(
    params: Params$checks$get$suite,
    option?: RequestOption,
  ): Promise<Response$checks$get$suite$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/check-suites/${params.parameter.check_suite_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * List check runs in a check suite
   * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
   *
   * Lists check runs for a check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
   * operationId: checks/list-for-suite
   * Request URI: /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs
   */
  public async checks$list$for$suite(
    params: Params$checks$list$for$suite,
    option?: RequestOption,
  ): Promise<Response$checks$list$for$suite$Status$200["application/json"]> {
    const url =
      this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/check-suites/${params.parameter.check_suite_id}/check-runs`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      check_name: { value: params.parameter.check_name, explode: false },
      status: { value: params.parameter.status, explode: false },
      filter: { value: params.parameter.filter, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Rerequest a check suite
   * Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://docs.github.com/enterprise-server@3.4/webhooks/event-payloads/#check_suite) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.
   *
   * To rerequest a check suite, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.
   * operationId: checks/rerequest-suite
   * Request URI: /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest
   */
  public async checks$rerequest$suite(
    params: Params$checks$rerequest$suite,
    option?: RequestOption,
  ): Promise<Response$checks$rerequest$suite$Status$201["application/json"]> {
    const url =
      this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/check-suites/${params.parameter.check_suite_id}/rerequest`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, undefined, undefined, option);
  }
  /**
   * List code scanning alerts for a repository
   * Lists all open code scanning alerts for the default branch (usually `main`
   * or `master`). You must use an access token with the `security_events` scope to use
   * this endpoint with private repos, the `public_repo` scope also grants permission to read
   * security events on public repos only. GitHub Apps must have the `security_events` read
   * permission to use this endpoint.
   *
   * The response includes a `most_recent_instance` object.
   * This provides details of the most recent instance of this alert
   * for the default branch or for the specified Git reference
   * (if you used `ref` in the request).
   * operationId: code-scanning/list-alerts-for-repo
   * Request URI: /repos/{owner}/{repo}/code-scanning/alerts
   */
  public async code$scanning$list$alerts$for$repo(
    params: Params$code$scanning$list$alerts$for$repo,
    option?: RequestOption,
  ): Promise<Response$code$scanning$list$alerts$for$repo$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/code-scanning/alerts`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      tool_name: { value: params.parameter.tool_name, explode: false },
      tool_guid: { value: params.parameter.tool_guid, explode: false },
      page: { value: params.parameter.page, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      ref: { value: params.parameter.ref, explode: false },
      direction: { value: params.parameter.direction, explode: false },
      sort: { value: params.parameter.sort, explode: false },
      state: { value: params.parameter.state, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get a code scanning alert
   * Gets a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint with private repos, the `public_repo` scope also grants permission to read security events on public repos only. GitHub Apps must have the `security_events` read permission to use this endpoint.
   *
   * **Deprecation notice**:
   * The instances field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The same information can now be retrieved via a GET request to the URL specified by `instances_url`.
   * operationId: code-scanning/get-alert
   * Request URI: /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}
   */
  public async code$scanning$get$alert(
    params: Params$code$scanning$get$alert,
    option?: RequestOption,
  ): Promise<Response$code$scanning$get$alert$Status$200["application/json"]> {
    const url =
      this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/code-scanning/alerts/${params.parameter.alert_number}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Update a code scanning alert
   * Updates the status of a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint with private repositories. You can also use tokens with the `public_repo` scope for public repositories only. GitHub Apps must have the `security_events` write permission to use this endpoint.
   * operationId: code-scanning/update-alert
   * Request URI: /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}
   */
  public async code$scanning$update$alert(
    params: Params$code$scanning$update$alert,
    option?: RequestOption,
  ): Promise<Response$code$scanning$update$alert$Status$200["application/json"]> {
    const url =
      this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/code-scanning/alerts/${params.parameter.alert_number}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List instances of a code scanning alert
   * Lists all instances of the specified code scanning alert.
   * You must use an access token with the `security_events` scope to use this endpoint with private repos,
   * the `public_repo` scope also grants permission to read security events on public repos only.
   * GitHub Apps must have the `security_events` read permission to use this endpoint.
   * operationId: code-scanning/list-alert-instances
   * Request URI: /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances
   */
  public async code$scanning$list$alert$instances(
    params: Params$code$scanning$list$alert$instances,
    option?: RequestOption,
  ): Promise<Response$code$scanning$list$alert$instances$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/code-scanning/alerts/${params.parameter.alert_number}/instances`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      page: { value: params.parameter.page, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      ref: { value: params.parameter.ref, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List code scanning analyses for a repository
   * Lists the details of all code scanning analyses for a repository,
   * starting with the most recent.
   * The response is paginated and you can use the `page` and `per_page` parameters
   * to list the analyses you're interested in.
   * By default 30 analyses are listed per page.
   *
   * The `rules_count` field in the response give the number of rules
   * that were run in the analysis.
   * For very old analyses this data is not available,
   * and `0` is returned in this field.
   *
   * You must use an access token with the `security_events` scope to use this endpoint with private repos,
   * the `public_repo` scope also grants permission to read security events on public repos only.
   * GitHub Apps must have the `security_events` read permission to use this endpoint.
   *
   * **Deprecation notice**:
   * The `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
   * operationId: code-scanning/list-recent-analyses
   * Request URI: /repos/{owner}/{repo}/code-scanning/analyses
   */
  public async code$scanning$list$recent$analyses(
    params: Params$code$scanning$list$recent$analyses,
    option?: RequestOption,
  ): Promise<Response$code$scanning$list$recent$analyses$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/code-scanning/analyses`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      tool_name: { value: params.parameter.tool_name, explode: false },
      tool_guid: { value: params.parameter.tool_guid, explode: false },
      page: { value: params.parameter.page, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      ref: { value: params.parameter.ref, explode: false },
      sarif_id: { value: params.parameter.sarif_id, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get a code scanning analysis for a repository
   * Gets a specified code scanning analysis for a repository.
   * You must use an access token with the `security_events` scope to use this endpoint with private repos,
   * the `public_repo` scope also grants permission to read security events on public repos only.
   * GitHub Apps must have the `security_events` read permission to use this endpoint.
   *
   * The default JSON response contains fields that describe the analysis.
   * This includes the Git reference and commit SHA to which the analysis relates,
   * the datetime of the analysis, the name of the code scanning tool,
   * and the number of alerts.
   *
   * The `rules_count` field in the default response give the number of rules
   * that were run in the analysis.
   * For very old analyses this data is not available,
   * and `0` is returned in this field.
   *
   * If you use the Accept header `application/sarif+json`,
   * the response contains the analysis data that was uploaded.
   * This is formatted as
   * [SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html).
   * operationId: code-scanning/get-analysis
   * Request URI: /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}
   */
  public async code$scanning$get$analysis<ResponseContentType extends ResponseContentType$code$scanning$get$analysis>(
    params: Params$code$scanning$get$analysis<ResponseContentType>,
    option?: RequestOption,
  ): Promise<Response$code$scanning$get$analysis$Status$200[ResponseContentType]> {
    const url =
      this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/code-scanning/analyses/${params.parameter.analysis_id}`;
    const headers = {
      Accept: params.headers.Accept,
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Delete a code scanning analysis from a repository
   * Deletes a specified code scanning analysis from a repository. For
   * private repositories, you must use an access token with the `repo` scope. For public repositories,
   * you must use an access token with `public_repo` scope.
   * GitHub Apps must have the `security_events` write permission to use this endpoint.
   *
   * You can delete one analysis at a time.
   * To delete a series of analyses, start with the most recent analysis and work backwards.
   * Conceptually, the process is similar to the undo function in a text editor.
   *
   * When you list the analyses for a repository,
   * one or more will be identified as deletable in the response:
   *
   * ```
   * "deletable": true
   * ```
   *
   * An analysis is deletable when it's the most recent in a set of analyses.
   * Typically, a repository will have multiple sets of analyses
   * for each enabled code scanning tool,
   * where a set is determined by a unique combination of analysis values:
   *
   * * `ref`
   * * `tool`
   * * `analysis_key`
   * * `environment`
   *
   * If you attempt to delete an analysis that is not the most recent in a set,
   * you'll get a 400 response with the message:
   *
   * ```
   * Analysis specified is not deletable.
   * ```
   *
   * The response from a successful `DELETE` operation provides you with
   * two alternative URLs for deleting the next analysis in the set:
   * `next_analysis_url` and `confirm_delete_url`.
   * Use the `next_analysis_url` URL if you want to avoid accidentally deleting the final analysis
   * in a set. This is a useful option if you want to preserve at least one analysis
   * for the specified tool in your repository.
   * Use the `confirm_delete_url` URL if you are content to remove all analyses for a tool.
   * When you delete the last analysis in a set, the value of `next_analysis_url` and `confirm_delete_url`
   * in the 200 response is `null`.
   *
   * As an example of the deletion process,
   * let's imagine that you added a workflow that configured a particular code scanning tool
   * to analyze the code in a repository. This tool has added 15 analyses:
   * 10 on the default branch, and another 5 on a topic branch.
   * You therefore have two separate sets of analyses for this tool.
   * You've now decided that you want to remove all of the analyses for the tool.
   * To do this you must make 15 separate deletion requests.
   * To start, you must find an analysis that's identified as deletable.
   * Each set of analyses always has one that's identified as deletable.
   * Having found the deletable analysis for one of the two sets,
   * delete this analysis and then continue deleting the next analysis in the set until they're all deleted.
   * Then repeat the process for the second set.
   * The procedure therefore consists of a nested loop:
   *
   * **Outer loop**:
   * * List the analyses for the repository, filtered by tool.
   * * Parse this list to find a deletable analysis. If found:
   *
   *   **Inner loop**:
   *   * Delete the identified analysis.
   *   * Parse the response for the value of `confirm_delete_url` and, if found, use this in the next iteration.
   *
   * The above process assumes that you want to remove all trace of the tool's analyses from the GitHub user interface, for the specified repository, and it therefore uses the `confirm_delete_url` value. Alternatively, you could use the `next_analysis_url` value, which would leave the last analysis in each set undeleted to avoid removing a tool's analysis entirely.
   * operationId: code-scanning/delete-analysis
   * Request URI: /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}
   */
  public async code$scanning$delete$analysis(
    params: Params$code$scanning$delete$analysis,
    option?: RequestOption,
  ): Promise<Response$code$scanning$delete$analysis$Status$200["application/json"]> {
    const url =
      this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/code-scanning/analyses/${params.parameter.analysis_id}`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      confirm_delete: { value: params.parameter.confirm_delete, explode: false },
    };
    return this.apiClient.request("DELETE", url, headers, undefined, queryParameters, option);
  }
  /**
   * Upload an analysis as SARIF data
   * Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. You must use an access token with the `security_events` scope to use this endpoint for private repositories. You can also use tokens with the `public_repo` scope for public repositories only. GitHub Apps must have the `security_events` write permission to use this endpoint.
   *
   * There are two places where you can upload code scanning results.
   *  - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref refs/pull/42/head`, then the results appear as alerts in a pull request check. For more information, see "[Triaging code scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests)."
   *  - If you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in the **Security** tab for your repository. For more information, see "[Managing code scanning alerts for your repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository)."
   *
   * You must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64 format string. For example:
   *
   * ```
   * gzip -c analysis-data.sarif | base64 -w0
   * ```
   *
   * SARIF upload supports a maximum of 5000 results per analysis run. Any results over this limit are ignored and any SARIF uploads with more than 25,000 results are rejected. Typically, but not necessarily, a SARIF file contains a single run of a single tool. If a code scanning tool generates too many results, you should update the analysis configuration to run only the most important rules or queries.
   *
   * The `202 Accepted`, response includes an `id` value.
   * You can use this ID to check the status of the upload by using this for the `/sarifs/{sarif_id}` endpoint.
   * For more information, see "[Get information about a SARIF upload](/rest/reference/code-scanning#get-information-about-a-sarif-upload)."
   * operationId: code-scanning/upload-sarif
   * Request URI: /repos/{owner}/{repo}/code-scanning/sarifs
   */
  public async code$scanning$upload$sarif(
    params: Params$code$scanning$upload$sarif,
    option?: RequestOption,
  ): Promise<Response$code$scanning$upload$sarif$Status$202["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/code-scanning/sarifs`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get information about a SARIF upload
   * Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see "[Get a code scanning analysis for a repository](/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository)." You must use an access token with the `security_events` scope to use this endpoint with private repos, the `public_repo` scope also grants permission to read security events on public repos only. GitHub Apps must have the `security_events` read permission to use this endpoint.
   * operationId: code-scanning/get-sarif
   * Request URI: /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}
   */
  public async code$scanning$get$sarif(
    params: Params$code$scanning$get$sarif,
    option?: RequestOption,
  ): Promise<Response$code$scanning$get$sarif$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/code-scanning/sarifs/${params.parameter.sarif_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * List repository collaborators
   * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
   *
   * Team members will include the members of child teams.
   *
   * You must authenticate using an access token with the `read:org` and `repo` scopes with push access to use this
   * endpoint. GitHub Apps must have the `members` organization permission and `metadata` repository permission to use this
   * endpoint.
   * operationId: repos/list-collaborators
   * Request URI: /repos/{owner}/{repo}/collaborators
   */
  public async repos$list$collaborators(
    params: Params$repos$list$collaborators,
    option?: RequestOption,
  ): Promise<Response$repos$list$collaborators$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/collaborators`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      affiliation: { value: params.parameter.affiliation, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Check if a user is a repository collaborator
   * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
   *
   * Team members will include the members of child teams.
   *
   * You must authenticate using an access token with the `read:org` and `repo` scopes with push access to use this
   * endpoint. GitHub Apps must have the `members` organization permission and `metadata` repository permission to use this
   * endpoint.
   * operationId: repos/check-collaborator
   * Request URI: /repos/{owner}/{repo}/collaborators/{username}
   */
  public async repos$check$collaborator(params: Params$repos$check$collaborator, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/collaborators/${params.parameter.username}`;
    const headers = {};
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Add a repository collaborator
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   *
   * For more information on permission levels, see "[Repository permission levels for an organization](https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)". There are restrictions on which permissions can be granted to organization members when an organization base role is in place. In this case, the permission being given must be equal to or higher than the org base permission. Otherwise, the request will fail with:
   *
   * ```
   * Cannot assign {member} permission of {role name}
   * ```
   *
   * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#http-verbs)."
   *
   * The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#invitations).
   *
   * **Rate limits**
   *
   * You are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.
   * operationId: repos/add-collaborator
   * Request URI: /repos/{owner}/{repo}/collaborators/{username}
   */
  public async repos$add$collaborator(
    params: Params$repos$add$collaborator,
    option?: RequestOption,
  ): Promise<Response$repos$add$collaborator$Status$201["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/collaborators/${params.parameter.username}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Remove a repository collaborator
   * operationId: repos/remove-collaborator
   * Request URI: /repos/{owner}/{repo}/collaborators/{username}
   */
  public async repos$remove$collaborator(params: Params$repos$remove$collaborator, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/collaborators/${params.parameter.username}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Get repository permissions for a user
   * Checks the repository permission of a collaborator. The possible repository permissions are `admin`, `write`, `read`, and `none`.
   * operationId: repos/get-collaborator-permission-level
   * Request URI: /repos/{owner}/{repo}/collaborators/{username}/permission
   */
  public async repos$get$collaborator$permission$level(
    params: Params$repos$get$collaborator$permission$level,
    option?: RequestOption,
  ): Promise<Response$repos$get$collaborator$permission$level$Status$200["application/json"]> {
    const url =
      this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/collaborators/${params.parameter.username}/permission`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * List commit comments for a repository
   * Commit Comments use [these custom media types](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#custom-media-types). You can read more about the use of media types in the API [here](https://docs.github.com/enterprise-server@3.4/rest/overview/media-types/).
   *
   * Comments are ordered by ascending ID.
   * operationId: repos/list-commit-comments-for-repo
   * Request URI: /repos/{owner}/{repo}/comments
   */
  public async repos$list$commit$comments$for$repo(
    params: Params$repos$list$commit$comments$for$repo,
    option?: RequestOption,
  ): Promise<Response$repos$list$commit$comments$for$repo$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/comments`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get a commit comment
   * operationId: repos/get-commit-comment
   * Request URI: /repos/{owner}/{repo}/comments/{comment_id}
   */
  public async repos$get$commit$comment(
    params: Params$repos$get$commit$comment,
    option?: RequestOption,
  ): Promise<Response$repos$get$commit$comment$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/comments/${params.parameter.comment_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Delete a commit comment
   * operationId: repos/delete-commit-comment
   * Request URI: /repos/{owner}/{repo}/comments/{comment_id}
   */
  public async repos$delete$commit$comment(params: Params$repos$delete$commit$comment, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/comments/${params.parameter.comment_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Update a commit comment
   * operationId: repos/update-commit-comment
   * Request URI: /repos/{owner}/{repo}/comments/{comment_id}
   */
  public async repos$update$commit$comment(
    params: Params$repos$update$commit$comment,
    option?: RequestOption,
  ): Promise<Response$repos$update$commit$comment$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/comments/${params.parameter.comment_id}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List reactions for a commit comment
   * List the reactions to a [commit comment](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#comments).
   * operationId: reactions/list-for-commit-comment
   * Request URI: /repos/{owner}/{repo}/comments/{comment_id}/reactions
   */
  public async reactions$list$for$commit$comment(
    params: Params$reactions$list$for$commit$comment,
    option?: RequestOption,
  ): Promise<Response$reactions$list$for$commit$comment$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/comments/${params.parameter.comment_id}/reactions`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      content: { value: params.parameter.content, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create reaction for a commit comment
   * Create a reaction to a [commit comment](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#comments). A response with an HTTP `200` status means that you already added the reaction type to this commit comment.
   * operationId: reactions/create-for-commit-comment
   * Request URI: /repos/{owner}/{repo}/comments/{comment_id}/reactions
   */
  public async reactions$create$for$commit$comment(
    params: Params$reactions$create$for$commit$comment,
    option?: RequestOption,
  ): Promise<
    (Response$reactions$create$for$commit$comment$Status$200 | Response$reactions$create$for$commit$comment$Status$201)["application/json"]
  > {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/comments/${params.parameter.comment_id}/reactions`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Delete a commit comment reaction
   * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.
   *
   * Delete a reaction to a [commit comment](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#comments).
   * operationId: reactions/delete-for-commit-comment
   * Request URI: /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}
   */
  public async reactions$delete$for$commit$comment(params: Params$reactions$delete$for$commit$comment, option?: RequestOption): Promise<void> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/comments/${params.parameter.comment_id}/reactions/${params.parameter.reaction_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * List commits
   * **Signature verification object**
   *
   * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
   *
   * | Name | Type | Description |
   * | ---- | ---- | ----------- |
   * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
   * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
   * | `signature` | `string` | The signature that was extracted from the commit. |
   * | `payload` | `string` | The value that was signed. |
   *
   * These are the possible values for `reason` in the `verification` object:
   *
   * | Value | Description |
   * | ----- | ----------- |
   * | `expired_key` | The key that made the signature is expired. |
   * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
   * | `gpgverify_error` | There was an error communicating with the signature verification service. |
   * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
   * | `unsigned` | The object does not include a signature. |
   * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
   * | `no_user` | No user was associated with the `committer` email address in the commit. |
   * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
   * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
   * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
   * | `malformed_signature` | There was an error parsing the signature. |
   * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
   * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
   * operationId: repos/list-commits
   * Request URI: /repos/{owner}/{repo}/commits
   */
  public async repos$list$commits(
    params: Params$repos$list$commits,
    option?: RequestOption,
  ): Promise<Response$repos$list$commits$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/commits`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      sha: { value: params.parameter.sha, explode: false },
      path: { value: params.parameter.path, explode: false },
      author: { value: params.parameter.author, explode: false },
      since: { value: params.parameter.since, explode: false },
      until: { value: params.parameter.until, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List branches for HEAD commit
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.
   * operationId: repos/list-branches-for-head-commit
   * Request URI: /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head
   */
  public async repos$list$branches$for$head$commit(
    params: Params$repos$list$branches$for$head$commit,
    option?: RequestOption,
  ): Promise<Response$repos$list$branches$for$head$commit$Status$200["application/json"]> {
    const url =
      this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/commits/${params.parameter.commit_sha}/branches-where-head`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * List commit comments
   * Use the `:commit_sha` to specify the commit that will have its comments listed.
   * operationId: repos/list-comments-for-commit
   * Request URI: /repos/{owner}/{repo}/commits/{commit_sha}/comments
   */
  public async repos$list$comments$for$commit(
    params: Params$repos$list$comments$for$commit,
    option?: RequestOption,
  ): Promise<Response$repos$list$comments$for$commit$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/commits/${params.parameter.commit_sha}/comments`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create a commit comment
   * Create a comment for a commit using its `:commit_sha`.
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   * operationId: repos/create-commit-comment
   * Request URI: /repos/{owner}/{repo}/commits/{commit_sha}/comments
   */
  public async repos$create$commit$comment(
    params: Params$repos$create$commit$comment,
    option?: RequestOption,
  ): Promise<Response$repos$create$commit$comment$Status$201["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/commits/${params.parameter.commit_sha}/comments`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List pull requests associated with a commit
   * Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, additionally returns open pull requests associated with the commit. The results may include open and closed pull requests. Additional preview headers may be required to see certain details for associated pull requests, such as whether a pull request is in a draft state. For more information about previews that might affect this endpoint, see the [List pull requests](https://docs.github.com/enterprise-server@3.4/rest/reference/pulls#list-pull-requests) endpoint.
   * operationId: repos/list-pull-requests-associated-with-commit
   * Request URI: /repos/{owner}/{repo}/commits/{commit_sha}/pulls
   */
  public async repos$list$pull$requests$associated$with$commit(
    params: Params$repos$list$pull$requests$associated$with$commit,
    option?: RequestOption,
  ): Promise<Response$repos$list$pull$requests$associated$with$commit$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/commits/${params.parameter.commit_sha}/pulls`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get a commit
   * Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.
   *
   * **Note:** If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.
   *
   * You can pass the appropriate [media type](https://docs.github.com/enterprise-server@3.4/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to  fetch `diff` and `patch` formats. Diffs with binary data will have no `patch` property.
   *
   * To return only the SHA-1 hash of the commit reference, you can provide the `sha` custom [media type](https://docs.github.com/enterprise-server@3.4/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) in the `Accept` header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.
   *
   * **Signature verification object**
   *
   * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
   *
   * | Name | Type | Description |
   * | ---- | ---- | ----------- |
   * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
   * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
   * | `signature` | `string` | The signature that was extracted from the commit. |
   * | `payload` | `string` | The value that was signed. |
   *
   * These are the possible values for `reason` in the `verification` object:
   *
   * | Value | Description |
   * | ----- | ----------- |
   * | `expired_key` | The key that made the signature is expired. |
   * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
   * | `gpgverify_error` | There was an error communicating with the signature verification service. |
   * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
   * | `unsigned` | The object does not include a signature. |
   * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
   * | `no_user` | No user was associated with the `committer` email address in the commit. |
   * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
   * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
   * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
   * | `malformed_signature` | There was an error parsing the signature. |
   * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
   * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
   * operationId: repos/get-commit
   * Request URI: /repos/{owner}/{repo}/commits/{ref}
   */
  public async repos$get$commit(
    params: Params$repos$get$commit,
    option?: RequestOption,
  ): Promise<Response$repos$get$commit$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/commits/${params.parameter.ref}`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      page: { value: params.parameter.page, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List check runs for a Git reference
   * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
   *
   * Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
   * operationId: checks/list-for-ref
   * Request URI: /repos/{owner}/{repo}/commits/{ref}/check-runs
   */
  public async checks$list$for$ref(
    params: Params$checks$list$for$ref,
    option?: RequestOption,
  ): Promise<Response$checks$list$for$ref$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/commits/${params.parameter.ref}/check-runs`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      check_name: { value: params.parameter.check_name, explode: false },
      status: { value: params.parameter.status, explode: false },
      filter: { value: params.parameter.filter, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
      app_id: { value: params.parameter.app_id, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List check suites for a Git reference
   * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
   *
   * Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
   * operationId: checks/list-suites-for-ref
   * Request URI: /repos/{owner}/{repo}/commits/{ref}/check-suites
   */
  public async checks$list$suites$for$ref(
    params: Params$checks$list$suites$for$ref,
    option?: RequestOption,
  ): Promise<Response$checks$list$suites$for$ref$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/commits/${params.parameter.ref}/check-suites`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      app_id: { value: params.parameter.app_id, explode: false },
      check_name: { value: params.parameter.check_name, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get the combined status for a specific reference
   * Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.
   *
   *
   * Additionally, a combined `state` is returned. The `state` is one of:
   *
   * *   **failure** if any of the contexts report as `error` or `failure`
   * *   **pending** if there are no statuses or a context is `pending`
   * *   **success** if the latest status for all contexts is `success`
   * operationId: repos/get-combined-status-for-ref
   * Request URI: /repos/{owner}/{repo}/commits/{ref}/status
   */
  public async repos$get$combined$status$for$ref(
    params: Params$repos$get$combined$status$for$ref,
    option?: RequestOption,
  ): Promise<Response$repos$get$combined$status$for$ref$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/commits/${params.parameter.ref}/status`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List commit statuses for a reference
   * Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.
   *
   * This resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.
   * operationId: repos/list-commit-statuses-for-ref
   * Request URI: /repos/{owner}/{repo}/commits/{ref}/statuses
   */
  public async repos$list$commit$statuses$for$ref(
    params: Params$repos$list$commit$statuses$for$ref,
    option?: RequestOption,
  ): Promise<Response$repos$list$commit$statuses$for$ref$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/commits/${params.parameter.ref}/statuses`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Compare two commits
   * The `basehead` param is comprised of two parts: `base` and `head`. Both must be branch names in `repo`. To compare branches across other repositories in the same network as `repo`, use the format `<USERNAME>:branch`.
   *
   * The response from the API is equivalent to running the `git log base..head` command; however, commits are returned in chronological order. Pass the appropriate [media type](https://docs.github.com/enterprise-server@3.4/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
   *
   * The response also includes details on the files that were changed between the two commits. This includes the status of the change (for example, if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.
   *
   * **Working with large comparisons**
   *
   * To process a response with a large number of commits, you can use (`per_page` or `page`) to paginate the results. When using paging, the list of changed files is only returned with page 1, but includes all changed files for the entire comparison. For more information on working with pagination, see "[Traversing with pagination](/rest/guides/traversing-with-pagination)."
   *
   * When calling this API without any paging parameters (`per_page` or `page`), the returned list is limited to 250 commits and the last commit in the list is the most recent of the entire comparison. When a paging parameter is specified, the first commit in the returned list of each page is the earliest.
   *
   * **Signature verification object**
   *
   * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
   *
   * | Name | Type | Description |
   * | ---- | ---- | ----------- |
   * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
   * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
   * | `signature` | `string` | The signature that was extracted from the commit. |
   * | `payload` | `string` | The value that was signed. |
   *
   * These are the possible values for `reason` in the `verification` object:
   *
   * | Value | Description |
   * | ----- | ----------- |
   * | `expired_key` | The key that made the signature is expired. |
   * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
   * | `gpgverify_error` | There was an error communicating with the signature verification service. |
   * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
   * | `unsigned` | The object does not include a signature. |
   * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
   * | `no_user` | No user was associated with the `committer` email address in the commit. |
   * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
   * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
   * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
   * | `malformed_signature` | There was an error parsing the signature. |
   * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
   * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
   * operationId: repos/compare-commits
   * Request URI: /repos/{owner}/{repo}/compare/{basehead}
   */
  public async repos$compare$commits(
    params: Params$repos$compare$commits,
    option?: RequestOption,
  ): Promise<Response$repos$compare$commits$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/compare/${params.parameter.basehead}`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      page: { value: params.parameter.page, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get repository content
   * Gets the contents of a file or directory in a repository. Specify the file path or directory in `:path`. If you omit
   * `:path`, you will receive the contents of the repository's root directory. See the description below regarding what the API response includes for directories.
   *
   * Files and symlinks support [a custom media type](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#custom-media-types) for
   * retrieving the raw content or rendered HTML (when supported). All content types support [a custom media
   * type](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#custom-media-types) to ensure the content is returned in a consistent
   * object format.
   *
   * **Note**:
   * *   To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/enterprise-server@3.4/rest/reference/git#trees).
   * *   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees
   * API](https://docs.github.com/enterprise-server@3.4/rest/reference/git#get-a-tree).
   * *   This API supports files up to 1 megabyte in size.
   *
   * #### If the content is a directory
   * The response will be an array of objects, one object for each item in the directory.
   * When listing the contents of a directory, submodules have their "type" specified as "file". Logically, the value
   * _should_ be "submodule". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW).
   * In the next major version of the API, the type will be returned as "submodule".
   *
   * #### If the content is a symlink
   * If the requested `:path` points to a symlink, and the symlink's target is a normal file in the repository, then the
   * API responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object
   * describing the symlink itself.
   *
   * #### If the content is a submodule
   * The `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific
   * commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out
   * the submodule at that specific commit.
   *
   * If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links["git"]`) and the
   * github.com URLs (`html_url` and `_links["html"]`) will have null values.
   * operationId: repos/get-content
   * Request URI: /repos/{owner}/{repo}/contents/{path}
   */
  public async repos$get$content<ResponseContentType extends ResponseContentType$repos$get$content>(
    params: Params$repos$get$content<ResponseContentType>,
    option?: RequestOption,
  ): Promise<Response$repos$get$content$Status$200[ResponseContentType]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/contents/${params.parameter.path}`;
    const headers = {
      Accept: params.headers.Accept,
    };
    const queryParameters: QueryParameters = {
      ref: { value: params.parameter.ref, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create or update file contents
   * Creates a new file or replaces an existing file in a repository.
   * operationId: repos/create-or-update-file-contents
   * Request URI: /repos/{owner}/{repo}/contents/{path}
   */
  public async repos$create$or$update$file$contents(
    params: Params$repos$create$or$update$file$contents,
    option?: RequestOption,
  ): Promise<
    (Response$repos$create$or$update$file$contents$Status$200 | Response$repos$create$or$update$file$contents$Status$201)["application/json"]
  > {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/contents/${params.parameter.path}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Delete a file
   * Deletes a file in a repository.
   *
   * You can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.
   *
   * The `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.
   *
   * You must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.
   * operationId: repos/delete-file
   * Request URI: /repos/{owner}/{repo}/contents/{path}
   */
  public async repos$delete$file(
    params: Params$repos$delete$file,
    option?: RequestOption,
  ): Promise<Response$repos$delete$file$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/contents/${params.parameter.path}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("DELETE", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List repository contributors
   * Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API v3 caches contributor data to improve performance.
   *
   * GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
   * operationId: repos/list-contributors
   * Request URI: /repos/{owner}/{repo}/contributors
   */
  public async repos$list$contributors(
    params: Params$repos$list$contributors,
    option?: RequestOption,
  ): Promise<Response$repos$list$contributors$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/contributors`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      anon: { value: params.parameter.anon, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List repository secrets
   * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.
   * operationId: dependabot/list-repo-secrets
   * Request URI: /repos/{owner}/{repo}/dependabot/secrets
   */
  public async dependabot$list$repo$secrets(
    params: Params$dependabot$list$repo$secrets,
    option?: RequestOption,
  ): Promise<Response$dependabot$list$repo$secrets$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/dependabot/secrets`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get a repository public key
   * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.
   * operationId: dependabot/get-repo-public-key
   * Request URI: /repos/{owner}/{repo}/dependabot/secrets/public-key
   */
  public async dependabot$get$repo$public$key(
    params: Params$dependabot$get$repo$public$key,
    option?: RequestOption,
  ): Promise<Response$dependabot$get$repo$public$key$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/dependabot/secrets/public-key`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Get a repository secret
   * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.
   * operationId: dependabot/get-repo-secret
   * Request URI: /repos/{owner}/{repo}/dependabot/secrets/{secret_name}
   */
  public async dependabot$get$repo$secret(
    params: Params$dependabot$get$repo$secret,
    option?: RequestOption,
  ): Promise<Response$dependabot$get$repo$secret$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/dependabot/secrets/${params.parameter.secret_name}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Create or update a repository secret
   * Creates or updates a repository secret with an encrypted value. Encrypt your secret using
   * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
   * token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository
   * permission to use this endpoint.
   *
   * #### Example encrypting a secret using Node.js
   *
   * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
   *
   * ```
   * const sodium = require('tweetsodium');
   *
   * const key = "base64-encoded-public-key";
   * const value = "plain-text-secret";
   *
   * // Convert the message and key to Uint8Array's (Buffer implements that interface)
   * const messageBytes = Buffer.from(value);
   * const keyBytes = Buffer.from(key, 'base64');
   *
   * // Encrypt using LibSodium.
   * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
   *
   * // Base64 the encrypted secret
   * const encrypted = Buffer.from(encryptedBytes).toString('base64');
   *
   * console.log(encrypted);
   * ```
   *
   *
   * #### Example encrypting a secret using Python
   *
   * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
   *
   * ```
   * from base64 import b64encode
   * from nacl import encoding, public
   *
   * def encrypt(public_key: str, secret_value: str) -> str:
   *   """Encrypt a Unicode string using the public key."""
   *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
   *   sealed_box = public.SealedBox(public_key)
   *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
   *   return b64encode(encrypted).decode("utf-8")
   * ```
   *
   * #### Example encrypting a secret using C#
   *
   * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
   *
   * ```
   * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
   * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
   *
   * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
   *
   * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
   * ```
   *
   * #### Example encrypting a secret using Ruby
   *
   * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
   *
   * ```ruby
   * require "rbnacl"
   * require "base64"
   *
   * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
   * public_key = RbNaCl::PublicKey.new(key)
   *
   * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
   * encrypted_secret = box.encrypt("my_secret")
   *
   * # Print the base64 encoded secret
   * puts Base64.strict_encode64(encrypted_secret)
   * ```
   * operationId: dependabot/create-or-update-repo-secret
   * Request URI: /repos/{owner}/{repo}/dependabot/secrets/{secret_name}
   */
  public async dependabot$create$or$update$repo$secret(
    params: Params$dependabot$create$or$update$repo$secret,
    option?: RequestOption,
  ): Promise<Response$dependabot$create$or$update$repo$secret$Status$201["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/dependabot/secrets/${params.parameter.secret_name}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Delete a repository secret
   * Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.
   * operationId: dependabot/delete-repo-secret
   * Request URI: /repos/{owner}/{repo}/dependabot/secrets/{secret_name}
   */
  public async dependabot$delete$repo$secret(params: Params$dependabot$delete$repo$secret, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/dependabot/secrets/${params.parameter.secret_name}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * List deployments
   * Simple filtering of deployments is available via query parameters:
   * operationId: repos/list-deployments
   * Request URI: /repos/{owner}/{repo}/deployments
   */
  public async repos$list$deployments(
    params: Params$repos$list$deployments,
    option?: RequestOption,
  ): Promise<Response$repos$list$deployments$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/deployments`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      sha: { value: params.parameter.sha, explode: false },
      ref: { value: params.parameter.ref, explode: false },
      task: { value: params.parameter.task, explode: false },
      environment: { value: params.parameter.environment, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create a deployment
   * Deployments offer a few configurable parameters with certain defaults.
   *
   * The `ref` parameter can be any named branch, tag, or SHA. At GitHub Enterprise Server we often deploy branches and verify them
   * before we merge a pull request.
   *
   * The `environment` parameter allows deployments to be issued to different runtime environments. Teams often have
   * multiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter
   * makes it easier to track which environments have requested deployments. The default environment is `production`.
   *
   * The `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If
   * the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,
   * the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will
   * return a failure response.
   *
   * By default, [commit statuses](https://docs.github.com/enterprise-server@3.4/rest/reference/commits#commit-statuses) for every submitted context must be in a `success`
   * state. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to
   * specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do
   * not require any contexts or create any commit statuses, the deployment will always succeed.
   *
   * The `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text
   * field that will be passed on when a deployment event is dispatched.
   *
   * The `task` parameter is used by the deployment system to allow different execution paths. In the web world this might
   * be `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an
   * application with debugging enabled.
   *
   * Users with `repo` or `repo_deployment` scopes can create a deployment for a given ref.
   *
   * #### Merged branch response
   * You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating
   * a deployment. This auto-merge happens when:
   * *   Auto-merge option is enabled in the repository
   * *   Topic branch does not include the latest changes on the base branch, which is `master` in the response example
   * *   There are no merge conflicts
   *
   * If there are no new commits in the base branch, a new request to create a deployment should give a successful
   * response.
   *
   * #### Merge conflict response
   * This error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't
   * be merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.
   *
   * #### Failed commit status checks
   * This error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success`
   * status for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.
   * operationId: repos/create-deployment
   * Request URI: /repos/{owner}/{repo}/deployments
   */
  public async repos$create$deployment(
    params: Params$repos$create$deployment,
    option?: RequestOption,
  ): Promise<(Response$repos$create$deployment$Status$201 | Response$repos$create$deployment$Status$202)["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/deployments`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get a deployment
   * operationId: repos/get-deployment
   * Request URI: /repos/{owner}/{repo}/deployments/{deployment_id}
   */
  public async repos$get$deployment(
    params: Params$repos$get$deployment,
    option?: RequestOption,
  ): Promise<Response$repos$get$deployment$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/deployments/${params.parameter.deployment_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Delete a deployment
   * If the repository only has one deployment, you can delete the deployment regardless of its status. If the repository has more than one deployment, you can only delete inactive deployments. This ensures that repositories with multiple deployments will always have an active deployment. Anyone with `repo` or `repo_deployment` scopes can delete a deployment.
   *
   * To set a deployment as inactive, you must:
   *
   * *   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.
   * *   Mark the active deployment as inactive by adding any non-successful deployment status.
   *
   * For more information, see "[Create a deployment](https://docs.github.com/enterprise-server@3.4/rest/reference/repos/#create-a-deployment)" and "[Create a deployment status](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#create-a-deployment-status)."
   * operationId: repos/delete-deployment
   * Request URI: /repos/{owner}/{repo}/deployments/{deployment_id}
   */
  public async repos$delete$deployment(params: Params$repos$delete$deployment, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/deployments/${params.parameter.deployment_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * List deployment statuses
   * Users with pull access can view deployment statuses for a deployment:
   * operationId: repos/list-deployment-statuses
   * Request URI: /repos/{owner}/{repo}/deployments/{deployment_id}/statuses
   */
  public async repos$list$deployment$statuses(
    params: Params$repos$list$deployment$statuses,
    option?: RequestOption,
  ): Promise<Response$repos$list$deployment$statuses$Status$200["application/json"]> {
    const url =
      this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/deployments/${params.parameter.deployment_id}/statuses`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create a deployment status
   * Users with `push` access can create deployment statuses for a given deployment.
   *
   * GitHub Apps require `read & write` access to "Deployments" and `read-only` access to "Repo contents" (for private repos). OAuth Apps require the `repo_deployment` scope.
   * operationId: repos/create-deployment-status
   * Request URI: /repos/{owner}/{repo}/deployments/{deployment_id}/statuses
   */
  public async repos$create$deployment$status(
    params: Params$repos$create$deployment$status,
    option?: RequestOption,
  ): Promise<Response$repos$create$deployment$status$Status$201["application/json"]> {
    const url =
      this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/deployments/${params.parameter.deployment_id}/statuses`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get a deployment status
   * Users with pull access can view a deployment status for a deployment:
   * operationId: repos/get-deployment-status
   * Request URI: /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}
   */
  public async repos$get$deployment$status(
    params: Params$repos$get$deployment$status,
    option?: RequestOption,
  ): Promise<Response$repos$get$deployment$status$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/deployments/${params.parameter.deployment_id}/statuses/${params.parameter.status_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Create a repository dispatch event
   * You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub Enterprise Server to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see "[RepositoryDispatchEvent](https://docs.github.com/enterprise-server@3.4/webhooks/event-payloads/#repository_dispatch)."
   *
   * The `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow.
   *
   * This endpoint requires write access to the repository by providing either:
   *
   *   - Personal access tokens with `repo` scope. For more information, see "[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line)" in the GitHub Help documentation.
   *   - GitHub Apps with both `metadata:read` and `contents:read&write` permissions.
   *
   * This input example shows how you can use the `client_payload` as a test to debug your workflow.
   * operationId: repos/create-dispatch-event
   * Request URI: /repos/{owner}/{repo}/dispatches
   */
  public async repos$create$dispatch$event(params: Params$repos$create$dispatch$event, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/dispatches`;
    const headers = {
      "Content-Type": "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get all environments
   * Get all environments for a repository.
   *
   * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
   * operationId: repos/get-all-environments
   * Request URI: /repos/{owner}/{repo}/environments
   */
  public async repos$get$all$environments(
    params: Params$repos$get$all$environments,
    option?: RequestOption,
  ): Promise<Response$repos$get$all$environments$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/environments`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Get an environment
   * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
   * operationId: repos/get-environment
   * Request URI: /repos/{owner}/{repo}/environments/{environment_name}
   */
  public async repos$get$environment(
    params: Params$repos$get$environment,
    option?: RequestOption,
  ): Promise<Response$repos$get$environment$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/environments/${params.parameter.environment_name}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Create or update an environment
   * Create or update an environment with protection rules, such as required reviewers. For more information about environment protection rules, see "[Environments](/actions/reference/environments#environment-protection-rules)."
   *
   * **Note:** Although you can use this operation to specify that only branches that match specified name patterns can deploy to this environment, you must use the UI to set the name patterns. For more information, see "[Environments](/actions/reference/environments#deployment-branches)."
   *
   * **Note:** To create or update secrets for an environment, see "[Secrets](/rest/reference/actions#secrets)."
   *
   * You must authenticate using an access token with the repo scope to use this endpoint.
   * operationId: repos/create-or-update-environment
   * Request URI: /repos/{owner}/{repo}/environments/{environment_name}
   */
  public async repos$create$or$update$environment(
    params: Params$repos$create$or$update$environment,
    option?: RequestOption,
  ): Promise<Response$repos$create$or$update$environment$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/environments/${params.parameter.environment_name}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Delete an environment
   * You must authenticate using an access token with the repo scope to use this endpoint.
   * operationId: repos/delete-an-environment
   * Request URI: /repos/{owner}/{repo}/environments/{environment_name}
   */
  public async repos$delete$an$environment(params: Params$repos$delete$an$environment, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/environments/${params.parameter.environment_name}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * List repository events
   * operationId: activity/list-repo-events
   * Request URI: /repos/{owner}/{repo}/events
   */
  public async activity$list$repo$events(
    params: Params$activity$list$repo$events,
    option?: RequestOption,
  ): Promise<Response$activity$list$repo$events$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/events`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List forks
   * operationId: repos/list-forks
   * Request URI: /repos/{owner}/{repo}/forks
   */
  public async repos$list$forks(
    params: Params$repos$list$forks,
    option?: RequestOption,
  ): Promise<Response$repos$list$forks$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/forks`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      sort: { value: params.parameter.sort, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create a fork
   * Create a fork for the authenticated user.
   *
   * **Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Enterprise Server Support](https://support.github.com/contact?tags=dotcom-rest-api).
   * operationId: repos/create-fork
   * Request URI: /repos/{owner}/{repo}/forks
   */
  public async repos$create$fork(
    params: Params$repos$create$fork,
    option?: RequestOption,
  ): Promise<Response$repos$create$fork$Status$202["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/forks`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Create a blob
   * operationId: git/create-blob
   * Request URI: /repos/{owner}/{repo}/git/blobs
   */
  public async git$create$blob(
    params: Params$git$create$blob,
    option?: RequestOption,
  ): Promise<Response$git$create$blob$Status$201["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/git/blobs`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get a blob
   * The `content` in the response will always be Base64 encoded.
   *
   * _Note_: This API supports blobs up to 100 megabytes in size.
   * operationId: git/get-blob
   * Request URI: /repos/{owner}/{repo}/git/blobs/{file_sha}
   */
  public async git$get$blob(
    params: Params$git$get$blob,
    option?: RequestOption,
  ): Promise<Response$git$get$blob$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/git/blobs/${params.parameter.file_sha}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Create a commit
   * Creates a new Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
   *
   * **Signature verification object**
   *
   * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
   *
   * | Name | Type | Description |
   * | ---- | ---- | ----------- |
   * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
   * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
   * | `signature` | `string` | The signature that was extracted from the commit. |
   * | `payload` | `string` | The value that was signed. |
   *
   * These are the possible values for `reason` in the `verification` object:
   *
   * | Value | Description |
   * | ----- | ----------- |
   * | `expired_key` | The key that made the signature is expired. |
   * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
   * | `gpgverify_error` | There was an error communicating with the signature verification service. |
   * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
   * | `unsigned` | The object does not include a signature. |
   * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
   * | `no_user` | No user was associated with the `committer` email address in the commit. |
   * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
   * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
   * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
   * | `malformed_signature` | There was an error parsing the signature. |
   * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
   * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
   * operationId: git/create-commit
   * Request URI: /repos/{owner}/{repo}/git/commits
   */
  public async git$create$commit(
    params: Params$git$create$commit,
    option?: RequestOption,
  ): Promise<Response$git$create$commit$Status$201["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/git/commits`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get a commit
   * Gets a Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
   *
   * **Signature verification object**
   *
   * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
   *
   * | Name | Type | Description |
   * | ---- | ---- | ----------- |
   * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
   * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
   * | `signature` | `string` | The signature that was extracted from the commit. |
   * | `payload` | `string` | The value that was signed. |
   *
   * These are the possible values for `reason` in the `verification` object:
   *
   * | Value | Description |
   * | ----- | ----------- |
   * | `expired_key` | The key that made the signature is expired. |
   * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
   * | `gpgverify_error` | There was an error communicating with the signature verification service. |
   * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
   * | `unsigned` | The object does not include a signature. |
   * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
   * | `no_user` | No user was associated with the `committer` email address in the commit. |
   * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
   * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
   * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
   * | `malformed_signature` | There was an error parsing the signature. |
   * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
   * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
   * operationId: git/get-commit
   * Request URI: /repos/{owner}/{repo}/git/commits/{commit_sha}
   */
  public async git$get$commit(
    params: Params$git$get$commit,
    option?: RequestOption,
  ): Promise<Response$git$get$commit$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/git/commits/${params.parameter.commit_sha}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * List matching references
   * Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't exist in the repository, but existing refs start with `:ref`, they will be returned as an array.
   *
   * When you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.
   *
   * **Note:** You need to explicitly [request a pull request](https://docs.github.com/enterprise-server@3.4/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/enterprise-server@3.4/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
   *
   * If you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.
   * operationId: git/list-matching-refs
   * Request URI: /repos/{owner}/{repo}/git/matching-refs/{ref}
   */
  public async git$list$matching$refs(
    params: Params$git$list$matching$refs,
    option?: RequestOption,
  ): Promise<Response$git$list$matching$refs$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/git/matching-refs/${params.parameter.ref}`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get a reference
   * Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.
   *
   * **Note:** You need to explicitly [request a pull request](https://docs.github.com/enterprise-server@3.4/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/enterprise-server@3.4/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
   * operationId: git/get-ref
   * Request URI: /repos/{owner}/{repo}/git/ref/{ref}
   */
  public async git$get$ref(params: Params$git$get$ref, option?: RequestOption): Promise<Response$git$get$ref$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/git/ref/${params.parameter.ref}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Create a reference
   * Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.
   * operationId: git/create-ref
   * Request URI: /repos/{owner}/{repo}/git/refs
   */
  public async git$create$ref(
    params: Params$git$create$ref,
    option?: RequestOption,
  ): Promise<Response$git$create$ref$Status$201["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/git/refs`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Delete a reference
   * operationId: git/delete-ref
   * Request URI: /repos/{owner}/{repo}/git/refs/{ref}
   */
  public async git$delete$ref(params: Params$git$delete$ref, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/git/refs/${params.parameter.ref}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Update a reference
   * operationId: git/update-ref
   * Request URI: /repos/{owner}/{repo}/git/refs/{ref}
   */
  public async git$update$ref(
    params: Params$git$update$ref,
    option?: RequestOption,
  ): Promise<Response$git$update$ref$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/git/refs/${params.parameter.ref}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Create a tag object
   * Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://docs.github.com/enterprise-server@3.4/rest/reference/git#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://docs.github.com/enterprise-server@3.4/rest/reference/git#create-a-reference) the tag reference - this call would be unnecessary.
   *
   * **Signature verification object**
   *
   * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
   *
   * | Name | Type | Description |
   * | ---- | ---- | ----------- |
   * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
   * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
   * | `signature` | `string` | The signature that was extracted from the commit. |
   * | `payload` | `string` | The value that was signed. |
   *
   * These are the possible values for `reason` in the `verification` object:
   *
   * | Value | Description |
   * | ----- | ----------- |
   * | `expired_key` | The key that made the signature is expired. |
   * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
   * | `gpgverify_error` | There was an error communicating with the signature verification service. |
   * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
   * | `unsigned` | The object does not include a signature. |
   * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
   * | `no_user` | No user was associated with the `committer` email address in the commit. |
   * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
   * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
   * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
   * | `malformed_signature` | There was an error parsing the signature. |
   * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
   * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
   * operationId: git/create-tag
   * Request URI: /repos/{owner}/{repo}/git/tags
   */
  public async git$create$tag(
    params: Params$git$create$tag,
    option?: RequestOption,
  ): Promise<Response$git$create$tag$Status$201["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/git/tags`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get a tag
   * **Signature verification object**
   *
   * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
   *
   * | Name | Type | Description |
   * | ---- | ---- | ----------- |
   * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
   * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
   * | `signature` | `string` | The signature that was extracted from the commit. |
   * | `payload` | `string` | The value that was signed. |
   *
   * These are the possible values for `reason` in the `verification` object:
   *
   * | Value | Description |
   * | ----- | ----------- |
   * | `expired_key` | The key that made the signature is expired. |
   * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
   * | `gpgverify_error` | There was an error communicating with the signature verification service. |
   * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
   * | `unsigned` | The object does not include a signature. |
   * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
   * | `no_user` | No user was associated with the `committer` email address in the commit. |
   * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
   * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
   * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
   * | `malformed_signature` | There was an error parsing the signature. |
   * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
   * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
   * operationId: git/get-tag
   * Request URI: /repos/{owner}/{repo}/git/tags/{tag_sha}
   */
  public async git$get$tag(params: Params$git$get$tag, option?: RequestOption): Promise<Response$git$get$tag$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/git/tags/${params.parameter.tag_sha}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Create a tree
   * The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.
   *
   * If you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see "[Create a commit](https://docs.github.com/enterprise-server@3.4/rest/reference/git#create-a-commit)" and "[Update a reference](https://docs.github.com/enterprise-server@3.4/rest/reference/git#update-a-reference)."
   * operationId: git/create-tree
   * Request URI: /repos/{owner}/{repo}/git/trees
   */
  public async git$create$tree(
    params: Params$git$create$tree,
    option?: RequestOption,
  ): Promise<Response$git$create$tree$Status$201["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/git/trees`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get a tree
   * Returns a single tree using the SHA1 value for that tree.
   *
   * If `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.
   * operationId: git/get-tree
   * Request URI: /repos/{owner}/{repo}/git/trees/{tree_sha}
   */
  public async git$get$tree(
    params: Params$git$get$tree,
    option?: RequestOption,
  ): Promise<Response$git$get$tree$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/git/trees/${params.parameter.tree_sha}`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      recursive: { value: params.parameter.recursive, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List repository webhooks
   * operationId: repos/list-webhooks
   * Request URI: /repos/{owner}/{repo}/hooks
   */
  public async repos$list$webhooks(
    params: Params$repos$list$webhooks,
    option?: RequestOption,
  ): Promise<Response$repos$list$webhooks$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/hooks`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create a repository webhook
   * Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can
   * share the same `config` as long as those webhooks do not have any `events` that overlap.
   * operationId: repos/create-webhook
   * Request URI: /repos/{owner}/{repo}/hooks
   */
  public async repos$create$webhook(
    params: Params$repos$create$webhook,
    option?: RequestOption,
  ): Promise<Response$repos$create$webhook$Status$201["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/hooks`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get a repository webhook
   * Returns a webhook configured in a repository. To get only the webhook `config` properties, see "[Get a webhook configuration for a repository](/rest/reference/repos#get-a-webhook-configuration-for-a-repository)."
   * operationId: repos/get-webhook
   * Request URI: /repos/{owner}/{repo}/hooks/{hook_id}
   */
  public async repos$get$webhook(
    params: Params$repos$get$webhook,
    option?: RequestOption,
  ): Promise<Response$repos$get$webhook$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/hooks/${params.parameter.hook_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Delete a repository webhook
   * operationId: repos/delete-webhook
   * Request URI: /repos/{owner}/{repo}/hooks/{hook_id}
   */
  public async repos$delete$webhook(params: Params$repos$delete$webhook, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/hooks/${params.parameter.hook_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Update a repository webhook
   * Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for a repository](/rest/reference/repos#update-a-webhook-configuration-for-a-repository)."
   * operationId: repos/update-webhook
   * Request URI: /repos/{owner}/{repo}/hooks/{hook_id}
   */
  public async repos$update$webhook(
    params: Params$repos$update$webhook,
    option?: RequestOption,
  ): Promise<Response$repos$update$webhook$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/hooks/${params.parameter.hook_id}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get a webhook configuration for a repository
   * Returns the webhook configuration for a repository. To get more information about the webhook, including the `active` state and `events`, use "[Get a repository webhook](/rest/reference/orgs#get-a-repository-webhook)."
   *
   * Access tokens must have the `read:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:read` permission.
   * operationId: repos/get-webhook-config-for-repo
   * Request URI: /repos/{owner}/{repo}/hooks/{hook_id}/config
   */
  public async repos$get$webhook$config$for$repo(
    params: Params$repos$get$webhook$config$for$repo,
    option?: RequestOption,
  ): Promise<Response$repos$get$webhook$config$for$repo$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/hooks/${params.parameter.hook_id}/config`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Update a webhook configuration for a repository
   * Updates the webhook configuration for a repository. To update more information about the webhook, including the `active` state and `events`, use "[Update a repository webhook](/rest/reference/orgs#update-a-repository-webhook)."
   *
   * Access tokens must have the `write:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:write` permission.
   * operationId: repos/update-webhook-config-for-repo
   * Request URI: /repos/{owner}/{repo}/hooks/{hook_id}/config
   */
  public async repos$update$webhook$config$for$repo(
    params: Params$repos$update$webhook$config$for$repo,
    option?: RequestOption,
  ): Promise<Response$repos$update$webhook$config$for$repo$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/hooks/${params.parameter.hook_id}/config`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List deliveries for a repository webhook
   * Returns a list of webhook deliveries for a webhook configured in a repository.
   * operationId: repos/list-webhook-deliveries
   * Request URI: /repos/{owner}/{repo}/hooks/{hook_id}/deliveries
   */
  public async repos$list$webhook$deliveries(
    params: Params$repos$list$webhook$deliveries,
    option?: RequestOption,
  ): Promise<Response$repos$list$webhook$deliveries$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/hooks/${params.parameter.hook_id}/deliveries`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      cursor: { value: params.parameter.cursor, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get a delivery for a repository webhook
   * Returns a delivery for a webhook configured in a repository.
   * operationId: repos/get-webhook-delivery
   * Request URI: /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}
   */
  public async repos$get$webhook$delivery(
    params: Params$repos$get$webhook$delivery,
    option?: RequestOption,
  ): Promise<Response$repos$get$webhook$delivery$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/hooks/${params.parameter.hook_id}/deliveries/${params.parameter.delivery_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Redeliver a delivery for a repository webhook
   * Redeliver a webhook delivery for a webhook configured in a repository.
   * operationId: repos/redeliver-webhook-delivery
   * Request URI: /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts
   */
  public async repos$redeliver$webhook$delivery(
    params: Params$repos$redeliver$webhook$delivery,
    option?: RequestOption,
  ): Promise<Response$repos$redeliver$webhook$delivery$Status$202["application/json"]> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/hooks/${params.parameter.hook_id}/deliveries/${params.parameter.delivery_id}/attempts`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, undefined, undefined, option);
  }
  /**
   * Ping a repository webhook
   * This will trigger a [ping event](https://docs.github.com/enterprise-server@3.4/webhooks/#ping-event) to be sent to the hook.
   * operationId: repos/ping-webhook
   * Request URI: /repos/{owner}/{repo}/hooks/{hook_id}/pings
   */
  public async repos$ping$webhook(params: Params$repos$ping$webhook, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/hooks/${params.parameter.hook_id}/pings`;
    const headers = {};
    return this.apiClient.request("POST", url, headers, undefined, undefined, option);
  }
  /**
   * Test the push repository webhook
   * This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.
   *
   * **Note**: Previously `/repos/:owner/:repo/hooks/:hook_id/test`
   * operationId: repos/test-push-webhook
   * Request URI: /repos/{owner}/{repo}/hooks/{hook_id}/tests
   */
  public async repos$test$push$webhook(params: Params$repos$test$push$webhook, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/hooks/${params.parameter.hook_id}/tests`;
    const headers = {};
    return this.apiClient.request("POST", url, headers, undefined, undefined, option);
  }
  /**
   * Get a repository installation for the authenticated app
   * Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.
   *
   * You must use a [JWT](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * operationId: apps/get-repo-installation
   * Request URI: /repos/{owner}/{repo}/installation
   */
  public async apps$get$repo$installation(
    params: Params$apps$get$repo$installation,
    option?: RequestOption,
  ): Promise<Response$apps$get$repo$installation$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/installation`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * List repository invitations
   * When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.
   * operationId: repos/list-invitations
   * Request URI: /repos/{owner}/{repo}/invitations
   */
  public async repos$list$invitations(
    params: Params$repos$list$invitations,
    option?: RequestOption,
  ): Promise<Response$repos$list$invitations$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/invitations`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Delete a repository invitation
   * operationId: repos/delete-invitation
   * Request URI: /repos/{owner}/{repo}/invitations/{invitation_id}
   */
  public async repos$delete$invitation(params: Params$repos$delete$invitation, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/invitations/${params.parameter.invitation_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Update a repository invitation
   * operationId: repos/update-invitation
   * Request URI: /repos/{owner}/{repo}/invitations/{invitation_id}
   */
  public async repos$update$invitation(
    params: Params$repos$update$invitation,
    option?: RequestOption,
  ): Promise<Response$repos$update$invitation$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/invitations/${params.parameter.invitation_id}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List repository issues
   * List issues in a repository.
   *
   * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
   * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
   * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
   * request id, use the "[List pull requests](https://docs.github.com/enterprise-server@3.4/rest/reference/pulls#list-pull-requests)" endpoint.
   * operationId: issues/list-for-repo
   * Request URI: /repos/{owner}/{repo}/issues
   */
  public async issues$list$for$repo(
    params: Params$issues$list$for$repo,
    option?: RequestOption,
  ): Promise<Response$issues$list$for$repo$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/issues`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      milestone: { value: params.parameter.milestone, explode: false },
      state: { value: params.parameter.state, explode: false },
      assignee: { value: params.parameter.assignee, explode: false },
      creator: { value: params.parameter.creator, explode: false },
      mentioned: { value: params.parameter.mentioned, explode: false },
      labels: { value: params.parameter.labels, explode: false },
      sort: { value: params.parameter.sort, explode: false },
      direction: { value: params.parameter.direction, explode: false },
      since: { value: params.parameter.since, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create an issue
   * Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.
   *
   * This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.4/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   * operationId: issues/create
   * Request URI: /repos/{owner}/{repo}/issues
   */
  public async issues$create(
    params: Params$issues$create,
    option?: RequestOption,
  ): Promise<Response$issues$create$Status$201["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/issues`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List issue comments for a repository
   * By default, Issue Comments are ordered by ascending ID.
   * operationId: issues/list-comments-for-repo
   * Request URI: /repos/{owner}/{repo}/issues/comments
   */
  public async issues$list$comments$for$repo(
    params: Params$issues$list$comments$for$repo,
    option?: RequestOption,
  ): Promise<Response$issues$list$comments$for$repo$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/issues/comments`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      sort: { value: params.parameter.sort, explode: false },
      direction: { value: params.parameter.direction, explode: false },
      since: { value: params.parameter.since, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get an issue comment
   * operationId: issues/get-comment
   * Request URI: /repos/{owner}/{repo}/issues/comments/{comment_id}
   */
  public async issues$get$comment(
    params: Params$issues$get$comment,
    option?: RequestOption,
  ): Promise<Response$issues$get$comment$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/issues/comments/${params.parameter.comment_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Delete an issue comment
   * operationId: issues/delete-comment
   * Request URI: /repos/{owner}/{repo}/issues/comments/{comment_id}
   */
  public async issues$delete$comment(params: Params$issues$delete$comment, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/issues/comments/${params.parameter.comment_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Update an issue comment
   * operationId: issues/update-comment
   * Request URI: /repos/{owner}/{repo}/issues/comments/{comment_id}
   */
  public async issues$update$comment(
    params: Params$issues$update$comment,
    option?: RequestOption,
  ): Promise<Response$issues$update$comment$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/issues/comments/${params.parameter.comment_id}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List reactions for an issue comment
   * List the reactions to an [issue comment](https://docs.github.com/enterprise-server@3.4/rest/reference/issues#comments).
   * operationId: reactions/list-for-issue-comment
   * Request URI: /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions
   */
  public async reactions$list$for$issue$comment(
    params: Params$reactions$list$for$issue$comment,
    option?: RequestOption,
  ): Promise<Response$reactions$list$for$issue$comment$Status$200["application/json"]> {
    const url =
      this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/issues/comments/${params.parameter.comment_id}/reactions`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      content: { value: params.parameter.content, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create reaction for an issue comment
   * Create a reaction to an [issue comment](https://docs.github.com/enterprise-server@3.4/rest/reference/issues#comments). A response with an HTTP `200` status means that you already added the reaction type to this issue comment.
   * operationId: reactions/create-for-issue-comment
   * Request URI: /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions
   */
  public async reactions$create$for$issue$comment(
    params: Params$reactions$create$for$issue$comment,
    option?: RequestOption,
  ): Promise<
    (Response$reactions$create$for$issue$comment$Status$200 | Response$reactions$create$for$issue$comment$Status$201)["application/json"]
  > {
    const url =
      this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/issues/comments/${params.parameter.comment_id}/reactions`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Delete an issue comment reaction
   * **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.
   *
   * Delete a reaction to an [issue comment](https://docs.github.com/enterprise-server@3.4/rest/reference/issues#comments).
   * operationId: reactions/delete-for-issue-comment
   * Request URI: /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}
   */
  public async reactions$delete$for$issue$comment(params: Params$reactions$delete$for$issue$comment, option?: RequestOption): Promise<void> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/issues/comments/${params.parameter.comment_id}/reactions/${params.parameter.reaction_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * List issue events for a repository
   * operationId: issues/list-events-for-repo
   * Request URI: /repos/{owner}/{repo}/issues/events
   */
  public async issues$list$events$for$repo(
    params: Params$issues$list$events$for$repo,
    option?: RequestOption,
  ): Promise<Response$issues$list$events$for$repo$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/issues/events`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get an issue event
   * operationId: issues/get-event
   * Request URI: /repos/{owner}/{repo}/issues/events/{event_id}
   */
  public async issues$get$event(
    params: Params$issues$get$event,
    option?: RequestOption,
  ): Promise<Response$issues$get$event$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/issues/events/${params.parameter.event_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Get an issue
   * The API returns a [`301 Moved Permanently` status](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was
   * [transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
   * the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
   * returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
   * access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
   * to the [`issues`](https://docs.github.com/enterprise-server@3.4/webhooks/event-payloads/#issues) webhook.
   *
   * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
   * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
   * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
   * request id, use the "[List pull requests](https://docs.github.com/enterprise-server@3.4/rest/reference/pulls#list-pull-requests)" endpoint.
   * operationId: issues/get
   * Request URI: /repos/{owner}/{repo}/issues/{issue_number}
   */
  public async issues$get(params: Params$issues$get, option?: RequestOption): Promise<Response$issues$get$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/issues/${params.parameter.issue_number}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Update an issue
   * Issue owners and users with push access can edit an issue.
   * operationId: issues/update
   * Request URI: /repos/{owner}/{repo}/issues/{issue_number}
   */
  public async issues$update(
    params: Params$issues$update,
    option?: RequestOption,
  ): Promise<Response$issues$update$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/issues/${params.parameter.issue_number}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Add assignees to an issue
   * Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.
   * operationId: issues/add-assignees
   * Request URI: /repos/{owner}/{repo}/issues/{issue_number}/assignees
   */
  public async issues$add$assignees(
    params: Params$issues$add$assignees,
    option?: RequestOption,
  ): Promise<Response$issues$add$assignees$Status$201["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/issues/${params.parameter.issue_number}/assignees`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Remove assignees from an issue
   * Removes one or more assignees from an issue.
   * operationId: issues/remove-assignees
   * Request URI: /repos/{owner}/{repo}/issues/{issue_number}/assignees
   */
  public async issues$remove$assignees(
    params: Params$issues$remove$assignees,
    option?: RequestOption,
  ): Promise<Response$issues$remove$assignees$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/issues/${params.parameter.issue_number}/assignees`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("DELETE", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List issue comments
   * Issue Comments are ordered by ascending ID.
   * operationId: issues/list-comments
   * Request URI: /repos/{owner}/{repo}/issues/{issue_number}/comments
   */
  public async issues$list$comments(
    params: Params$issues$list$comments,
    option?: RequestOption,
  ): Promise<Response$issues$list$comments$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/issues/${params.parameter.issue_number}/comments`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      since: { value: params.parameter.since, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create an issue comment
   * This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.4/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   * operationId: issues/create-comment
   * Request URI: /repos/{owner}/{repo}/issues/{issue_number}/comments
   */
  public async issues$create$comment(
    params: Params$issues$create$comment,
    option?: RequestOption,
  ): Promise<Response$issues$create$comment$Status$201["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/issues/${params.parameter.issue_number}/comments`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List issue events
   * operationId: issues/list-events
   * Request URI: /repos/{owner}/{repo}/issues/{issue_number}/events
   */
  public async issues$list$events(
    params: Params$issues$list$events,
    option?: RequestOption,
  ): Promise<Response$issues$list$events$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/issues/${params.parameter.issue_number}/events`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List labels for an issue
   * operationId: issues/list-labels-on-issue
   * Request URI: /repos/{owner}/{repo}/issues/{issue_number}/labels
   */
  public async issues$list$labels$on$issue(
    params: Params$issues$list$labels$on$issue,
    option?: RequestOption,
  ): Promise<Response$issues$list$labels$on$issue$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/issues/${params.parameter.issue_number}/labels`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Set labels for an issue
   * Removes any previous labels and sets the new labels for an issue.
   * operationId: issues/set-labels
   * Request URI: /repos/{owner}/{repo}/issues/{issue_number}/labels
   */
  public async issues$set$labels(
    params: Params$issues$set$labels,
    option?: RequestOption,
  ): Promise<Response$issues$set$labels$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/issues/${params.parameter.issue_number}/labels`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Add labels to an issue
   * operationId: issues/add-labels
   * Request URI: /repos/{owner}/{repo}/issues/{issue_number}/labels
   */
  public async issues$add$labels(
    params: Params$issues$add$labels,
    option?: RequestOption,
  ): Promise<Response$issues$add$labels$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/issues/${params.parameter.issue_number}/labels`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Remove all labels from an issue
   * operationId: issues/remove-all-labels
   * Request URI: /repos/{owner}/{repo}/issues/{issue_number}/labels
   */
  public async issues$remove$all$labels(params: Params$issues$remove$all$labels, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/issues/${params.parameter.issue_number}/labels`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Remove a label from an issue
   * Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist.
   * operationId: issues/remove-label
   * Request URI: /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}
   */
  public async issues$remove$label(
    params: Params$issues$remove$label,
    option?: RequestOption,
  ): Promise<Response$issues$remove$label$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/issues/${params.parameter.issue_number}/labels/${params.parameter.name}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Lock an issue
   * Users with push access can lock an issue or pull request's conversation.
   *
   * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#http-verbs)."
   * operationId: issues/lock
   * Request URI: /repos/{owner}/{repo}/issues/{issue_number}/lock
   */
  public async issues$lock(params: Params$issues$lock, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/issues/${params.parameter.issue_number}/lock`;
    const headers = {
      "Content-Type": "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Unlock an issue
   * Users with push access can unlock an issue's conversation.
   * operationId: issues/unlock
   * Request URI: /repos/{owner}/{repo}/issues/{issue_number}/lock
   */
  public async issues$unlock(params: Params$issues$unlock, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/issues/${params.parameter.issue_number}/lock`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * List reactions for an issue
   * List the reactions to an [issue](https://docs.github.com/enterprise-server@3.4/rest/reference/issues).
   * operationId: reactions/list-for-issue
   * Request URI: /repos/{owner}/{repo}/issues/{issue_number}/reactions
   */
  public async reactions$list$for$issue(
    params: Params$reactions$list$for$issue,
    option?: RequestOption,
  ): Promise<Response$reactions$list$for$issue$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/issues/${params.parameter.issue_number}/reactions`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      content: { value: params.parameter.content, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create reaction for an issue
   * Create a reaction to an [issue](https://docs.github.com/enterprise-server@3.4/rest/reference/issues/). A response with an HTTP `200` status means that you already added the reaction type to this issue.
   * operationId: reactions/create-for-issue
   * Request URI: /repos/{owner}/{repo}/issues/{issue_number}/reactions
   */
  public async reactions$create$for$issue(
    params: Params$reactions$create$for$issue,
    option?: RequestOption,
  ): Promise<(Response$reactions$create$for$issue$Status$200 | Response$reactions$create$for$issue$Status$201)["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/issues/${params.parameter.issue_number}/reactions`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Delete an issue reaction
   * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.
   *
   * Delete a reaction to an [issue](https://docs.github.com/enterprise-server@3.4/rest/reference/issues/).
   * operationId: reactions/delete-for-issue
   * Request URI: /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}
   */
  public async reactions$delete$for$issue(params: Params$reactions$delete$for$issue, option?: RequestOption): Promise<void> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/issues/${params.parameter.issue_number}/reactions/${params.parameter.reaction_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * List timeline events for an issue
   * operationId: issues/list-events-for-timeline
   * Request URI: /repos/{owner}/{repo}/issues/{issue_number}/timeline
   */
  public async issues$list$events$for$timeline(
    params: Params$issues$list$events$for$timeline,
    option?: RequestOption,
  ): Promise<Response$issues$list$events$for$timeline$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/issues/${params.parameter.issue_number}/timeline`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List deploy keys
   * operationId: repos/list-deploy-keys
   * Request URI: /repos/{owner}/{repo}/keys
   */
  public async repos$list$deploy$keys(
    params: Params$repos$list$deploy$keys,
    option?: RequestOption,
  ): Promise<Response$repos$list$deploy$keys$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/keys`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create a deploy key
   * You can create a read-only deploy key.
   * operationId: repos/create-deploy-key
   * Request URI: /repos/{owner}/{repo}/keys
   */
  public async repos$create$deploy$key(
    params: Params$repos$create$deploy$key,
    option?: RequestOption,
  ): Promise<Response$repos$create$deploy$key$Status$201["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/keys`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get a deploy key
   * operationId: repos/get-deploy-key
   * Request URI: /repos/{owner}/{repo}/keys/{key_id}
   */
  public async repos$get$deploy$key(
    params: Params$repos$get$deploy$key,
    option?: RequestOption,
  ): Promise<Response$repos$get$deploy$key$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/keys/${params.parameter.key_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Delete a deploy key
   * Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.
   * operationId: repos/delete-deploy-key
   * Request URI: /repos/{owner}/{repo}/keys/{key_id}
   */
  public async repos$delete$deploy$key(params: Params$repos$delete$deploy$key, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/keys/${params.parameter.key_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * List labels for a repository
   * operationId: issues/list-labels-for-repo
   * Request URI: /repos/{owner}/{repo}/labels
   */
  public async issues$list$labels$for$repo(
    params: Params$issues$list$labels$for$repo,
    option?: RequestOption,
  ): Promise<Response$issues$list$labels$for$repo$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/labels`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create a label
   * operationId: issues/create-label
   * Request URI: /repos/{owner}/{repo}/labels
   */
  public async issues$create$label(
    params: Params$issues$create$label,
    option?: RequestOption,
  ): Promise<Response$issues$create$label$Status$201["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/labels`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get a label
   * operationId: issues/get-label
   * Request URI: /repos/{owner}/{repo}/labels/{name}
   */
  public async issues$get$label(
    params: Params$issues$get$label,
    option?: RequestOption,
  ): Promise<Response$issues$get$label$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/labels/${params.parameter.name}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Delete a label
   * operationId: issues/delete-label
   * Request URI: /repos/{owner}/{repo}/labels/{name}
   */
  public async issues$delete$label(params: Params$issues$delete$label, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/labels/${params.parameter.name}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Update a label
   * operationId: issues/update-label
   * Request URI: /repos/{owner}/{repo}/labels/{name}
   */
  public async issues$update$label(
    params: Params$issues$update$label,
    option?: RequestOption,
  ): Promise<Response$issues$update$label$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/labels/${params.parameter.name}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List repository languages
   * Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.
   * operationId: repos/list-languages
   * Request URI: /repos/{owner}/{repo}/languages
   */
  public async repos$list$languages(
    params: Params$repos$list$languages,
    option?: RequestOption,
  ): Promise<Response$repos$list$languages$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/languages`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Enable Git LFS for a repository
   * operationId: repos/enable-lfs-for-repo
   * Request URI: /repos/{owner}/{repo}/lfs
   */
  public async repos$enable$lfs$for$repo(
    params: Params$repos$enable$lfs$for$repo,
    option?: RequestOption,
  ): Promise<Response$repos$enable$lfs$for$repo$Status$202["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/lfs`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("PUT", url, headers, undefined, undefined, option);
  }
  /**
   * Disable Git LFS for a repository
   * operationId: repos/disable-lfs-for-repo
   * Request URI: /repos/{owner}/{repo}/lfs
   */
  public async repos$disable$lfs$for$repo(params: Params$repos$disable$lfs$for$repo, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/lfs`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Get the license for a repository
   * This method returns the contents of the repository's license file, if one is detected.
   *
   * Similar to [Get repository content](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#get-repository-content), this method also supports [custom media types](https://docs.github.com/enterprise-server@3.4/rest/overview/media-types) for retrieving the raw license content or rendered license HTML.
   * operationId: licenses/get-for-repo
   * Request URI: /repos/{owner}/{repo}/license
   */
  public async licenses$get$for$repo(
    params: Params$licenses$get$for$repo,
    option?: RequestOption,
  ): Promise<Response$licenses$get$for$repo$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/license`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Sync a fork branch with the upstream repository
   * Sync a branch of a forked repository to keep it up-to-date with the upstream repository.
   * operationId: repos/merge-upstream
   * Request URI: /repos/{owner}/{repo}/merge-upstream
   */
  public async repos$merge$upstream(
    params: Params$repos$merge$upstream,
    option?: RequestOption,
  ): Promise<Response$repos$merge$upstream$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/merge-upstream`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Merge a branch
   * operationId: repos/merge
   * Request URI: /repos/{owner}/{repo}/merges
   */
  public async repos$merge(params: Params$repos$merge, option?: RequestOption): Promise<Response$repos$merge$Status$201["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/merges`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List milestones
   * operationId: issues/list-milestones
   * Request URI: /repos/{owner}/{repo}/milestones
   */
  public async issues$list$milestones(
    params: Params$issues$list$milestones,
    option?: RequestOption,
  ): Promise<Response$issues$list$milestones$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/milestones`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      state: { value: params.parameter.state, explode: false },
      sort: { value: params.parameter.sort, explode: false },
      direction: { value: params.parameter.direction, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create a milestone
   * operationId: issues/create-milestone
   * Request URI: /repos/{owner}/{repo}/milestones
   */
  public async issues$create$milestone(
    params: Params$issues$create$milestone,
    option?: RequestOption,
  ): Promise<Response$issues$create$milestone$Status$201["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/milestones`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get a milestone
   * operationId: issues/get-milestone
   * Request URI: /repos/{owner}/{repo}/milestones/{milestone_number}
   */
  public async issues$get$milestone(
    params: Params$issues$get$milestone,
    option?: RequestOption,
  ): Promise<Response$issues$get$milestone$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/milestones/${params.parameter.milestone_number}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Delete a milestone
   * operationId: issues/delete-milestone
   * Request URI: /repos/{owner}/{repo}/milestones/{milestone_number}
   */
  public async issues$delete$milestone(params: Params$issues$delete$milestone, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/milestones/${params.parameter.milestone_number}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Update a milestone
   * operationId: issues/update-milestone
   * Request URI: /repos/{owner}/{repo}/milestones/{milestone_number}
   */
  public async issues$update$milestone(
    params: Params$issues$update$milestone,
    option?: RequestOption,
  ): Promise<Response$issues$update$milestone$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/milestones/${params.parameter.milestone_number}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List labels for issues in a milestone
   * operationId: issues/list-labels-for-milestone
   * Request URI: /repos/{owner}/{repo}/milestones/{milestone_number}/labels
   */
  public async issues$list$labels$for$milestone(
    params: Params$issues$list$labels$for$milestone,
    option?: RequestOption,
  ): Promise<Response$issues$list$labels$for$milestone$Status$200["application/json"]> {
    const url =
      this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/milestones/${params.parameter.milestone_number}/labels`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List repository notifications for the authenticated user
   * List all notifications for the current user.
   * operationId: activity/list-repo-notifications-for-authenticated-user
   * Request URI: /repos/{owner}/{repo}/notifications
   */
  public async activity$list$repo$notifications$for$authenticated$user(
    params: Params$activity$list$repo$notifications$for$authenticated$user,
    option?: RequestOption,
  ): Promise<Response$activity$list$repo$notifications$for$authenticated$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/notifications`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      all: { value: params.parameter.all, explode: false },
      participating: { value: params.parameter.participating, explode: false },
      since: { value: params.parameter.since, explode: false },
      before: { value: params.parameter.before, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Mark repository notifications as read
   * Marks all notifications in a repository as "read" removes them from the [default view on GitHub Enterprise Server](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub Enterprise Server will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/enterprise-server@3.4/rest/reference/activity#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
   * operationId: activity/mark-repo-notifications-as-read
   * Request URI: /repos/{owner}/{repo}/notifications
   */
  public async activity$mark$repo$notifications$as$read(
    params: Params$activity$mark$repo$notifications$as$read,
    option?: RequestOption,
  ): Promise<Response$activity$mark$repo$notifications$as$read$Status$202["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/notifications`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get a GitHub Enterprise Server Pages site
   * operationId: repos/get-pages
   * Request URI: /repos/{owner}/{repo}/pages
   */
  public async repos$get$pages(
    params: Params$repos$get$pages,
    option?: RequestOption,
  ): Promise<Response$repos$get$pages$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/pages`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Update information about a GitHub Enterprise Server Pages site
   * Updates information for a GitHub Enterprise Server Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages).
   * operationId: repos/update-information-about-pages-site
   * Request URI: /repos/{owner}/{repo}/pages
   */
  public async repos$update$information$about$pages$site(
    params: Params$repos$update$information$about$pages$site,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/pages`;
    const headers = {
      "Content-Type": "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Create a GitHub Enterprise Server Pages site
   * Configures a GitHub Enterprise Server Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages)."
   * operationId: repos/create-pages-site
   * Request URI: /repos/{owner}/{repo}/pages
   */
  public async repos$create$pages$site(
    params: Params$repos$create$pages$site,
    option?: RequestOption,
  ): Promise<Response$repos$create$pages$site$Status$201["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/pages`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Delete a GitHub Enterprise Server Pages site
   * operationId: repos/delete-pages-site
   * Request URI: /repos/{owner}/{repo}/pages
   */
  public async repos$delete$pages$site(params: Params$repos$delete$pages$site, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/pages`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * List GitHub Enterprise Server Pages builds
   * operationId: repos/list-pages-builds
   * Request URI: /repos/{owner}/{repo}/pages/builds
   */
  public async repos$list$pages$builds(
    params: Params$repos$list$pages$builds,
    option?: RequestOption,
  ): Promise<Response$repos$list$pages$builds$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/pages/builds`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Request a GitHub Enterprise Server Pages build
   * You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.
   *
   * Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.
   * operationId: repos/request-pages-build
   * Request URI: /repos/{owner}/{repo}/pages/builds
   */
  public async repos$request$pages$build(
    params: Params$repos$request$pages$build,
    option?: RequestOption,
  ): Promise<Response$repos$request$pages$build$Status$201["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/pages/builds`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, undefined, undefined, option);
  }
  /**
   * Get latest Pages build
   * operationId: repos/get-latest-pages-build
   * Request URI: /repos/{owner}/{repo}/pages/builds/latest
   */
  public async repos$get$latest$pages$build(
    params: Params$repos$get$latest$pages$build,
    option?: RequestOption,
  ): Promise<Response$repos$get$latest$pages$build$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/pages/builds/latest`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Get GitHub Enterprise Server Pages build
   * operationId: repos/get-pages-build
   * Request URI: /repos/{owner}/{repo}/pages/builds/{build_id}
   */
  public async repos$get$pages$build(
    params: Params$repos$get$pages$build,
    option?: RequestOption,
  ): Promise<Response$repos$get$pages$build$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/pages/builds/${params.parameter.build_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * List pre-receive hooks for a repository
   * List all pre-receive hooks that are enabled or testing for this repository as well as any disabled hooks that are allowed to be enabled at the repository level. Pre-receive hooks that are disabled at a higher level and are not configurable will not be listed.
   * operationId: enterprise-admin/list-pre-receive-hooks-for-repo
   * Request URI: /repos/{owner}/{repo}/pre-receive-hooks
   */
  public async enterprise$admin$list$pre$receive$hooks$for$repo(
    params: Params$enterprise$admin$list$pre$receive$hooks$for$repo,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$list$pre$receive$hooks$for$repo$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/pre-receive-hooks`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
      direction: { value: params.parameter.direction, explode: false },
      sort: { value: params.parameter.sort, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get a pre-receive hook for a repository
   * operationId: enterprise-admin/get-pre-receive-hook-for-repo
   * Request URI: /repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}
   */
  public async enterprise$admin$get$pre$receive$hook$for$repo(
    params: Params$enterprise$admin$get$pre$receive$hook$for$repo,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$get$pre$receive$hook$for$repo$Status$200["application/json"]> {
    const url =
      this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/pre-receive-hooks/${params.parameter.pre_receive_hook_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Remove pre-receive hook enforcement for a repository
   * Deletes any overridden enforcement on this repository for the specified hook.
   *
   * Responds with effective values inherited from owner and/or global level.
   * operationId: enterprise-admin/remove-pre-receive-hook-enforcement-for-repo
   * Request URI: /repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}
   */
  public async enterprise$admin$remove$pre$receive$hook$enforcement$for$repo(
    params: Params$enterprise$admin$remove$pre$receive$hook$enforcement$for$repo,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$remove$pre$receive$hook$enforcement$for$repo$Status$200["application/json"]> {
    const url =
      this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/pre-receive-hooks/${params.parameter.pre_receive_hook_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Update pre-receive hook enforcement for a repository
   * For pre-receive hooks which are allowed to be configured at the repo level, you can set `enforcement`
   * operationId: enterprise-admin/update-pre-receive-hook-enforcement-for-repo
   * Request URI: /repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}
   */
  public async enterprise$admin$update$pre$receive$hook$enforcement$for$repo(
    params: Params$enterprise$admin$update$pre$receive$hook$enforcement$for$repo,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$update$pre$receive$hook$enforcement$for$repo$Status$200["application/json"]> {
    const url =
      this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/pre-receive-hooks/${params.parameter.pre_receive_hook_id}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List repository projects
   * Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
   * operationId: projects/list-for-repo
   * Request URI: /repos/{owner}/{repo}/projects
   */
  public async projects$list$for$repo(
    params: Params$projects$list$for$repo,
    option?: RequestOption,
  ): Promise<Response$projects$list$for$repo$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/projects`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      state: { value: params.parameter.state, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create a repository project
   * Creates a repository project board. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
   * operationId: projects/create-for-repo
   * Request URI: /repos/{owner}/{repo}/projects
   */
  public async projects$create$for$repo(
    params: Params$projects$create$for$repo,
    option?: RequestOption,
  ): Promise<Response$projects$create$for$repo$Status$201["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/projects`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List pull requests
   * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   * operationId: pulls/list
   * Request URI: /repos/{owner}/{repo}/pulls
   */
  public async pulls$list(params: Params$pulls$list, option?: RequestOption): Promise<Response$pulls$list$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/pulls`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      state: { value: params.parameter.state, explode: false },
      head: { value: params.parameter.head, explode: false },
      base: { value: params.parameter.base, explode: false },
      sort: { value: params.parameter.sort, explode: false },
      direction: { value: params.parameter.direction, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create a pull request
   * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
   *
   * You can create a new pull request.
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
   * operationId: pulls/create
   * Request URI: /repos/{owner}/{repo}/pulls
   */
  public async pulls$create(
    params: Params$pulls$create,
    option?: RequestOption,
  ): Promise<Response$pulls$create$Status$201["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/pulls`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List review comments in a repository
   * Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID.
   * operationId: pulls/list-review-comments-for-repo
   * Request URI: /repos/{owner}/{repo}/pulls/comments
   */
  public async pulls$list$review$comments$for$repo(
    params: Params$pulls$list$review$comments$for$repo,
    option?: RequestOption,
  ): Promise<Response$pulls$list$review$comments$for$repo$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/pulls/comments`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      sort: { value: params.parameter.sort, explode: false },
      direction: { value: params.parameter.direction, explode: false },
      since: { value: params.parameter.since, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get a review comment for a pull request
   * Provides details for a review comment.
   * operationId: pulls/get-review-comment
   * Request URI: /repos/{owner}/{repo}/pulls/comments/{comment_id}
   */
  public async pulls$get$review$comment(
    params: Params$pulls$get$review$comment,
    option?: RequestOption,
  ): Promise<Response$pulls$get$review$comment$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/pulls/comments/${params.parameter.comment_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Delete a review comment for a pull request
   * Deletes a review comment.
   * operationId: pulls/delete-review-comment
   * Request URI: /repos/{owner}/{repo}/pulls/comments/{comment_id}
   */
  public async pulls$delete$review$comment(params: Params$pulls$delete$review$comment, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/pulls/comments/${params.parameter.comment_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Update a review comment for a pull request
   * Enables you to edit a review comment.
   * operationId: pulls/update-review-comment
   * Request URI: /repos/{owner}/{repo}/pulls/comments/{comment_id}
   */
  public async pulls$update$review$comment(
    params: Params$pulls$update$review$comment,
    option?: RequestOption,
  ): Promise<Response$pulls$update$review$comment$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/pulls/comments/${params.parameter.comment_id}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List reactions for a pull request review comment
   * List the reactions to a [pull request review comment](https://docs.github.com/enterprise-server@3.4/rest/reference/pulls#review-comments).
   * operationId: reactions/list-for-pull-request-review-comment
   * Request URI: /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions
   */
  public async reactions$list$for$pull$request$review$comment(
    params: Params$reactions$list$for$pull$request$review$comment,
    option?: RequestOption,
  ): Promise<Response$reactions$list$for$pull$request$review$comment$Status$200["application/json"]> {
    const url =
      this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/pulls/comments/${params.parameter.comment_id}/reactions`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      content: { value: params.parameter.content, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create reaction for a pull request review comment
   * Create a reaction to a [pull request review comment](https://docs.github.com/enterprise-server@3.4/rest/reference/pulls#comments). A response with an HTTP `200` status means that you already added the reaction type to this pull request review comment.
   * operationId: reactions/create-for-pull-request-review-comment
   * Request URI: /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions
   */
  public async reactions$create$for$pull$request$review$comment(
    params: Params$reactions$create$for$pull$request$review$comment,
    option?: RequestOption,
  ): Promise<
    (
      | Response$reactions$create$for$pull$request$review$comment$Status$200
      | Response$reactions$create$for$pull$request$review$comment$Status$201
    )["application/json"]
  > {
    const url =
      this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/pulls/comments/${params.parameter.comment_id}/reactions`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Delete a pull request comment reaction
   * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`
   *
   * Delete a reaction to a [pull request review comment](https://docs.github.com/enterprise-server@3.4/rest/reference/pulls#review-comments).
   * operationId: reactions/delete-for-pull-request-comment
   * Request URI: /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}
   */
  public async reactions$delete$for$pull$request$comment(
    params: Params$reactions$delete$for$pull$request$comment,
    option?: RequestOption,
  ): Promise<void> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/pulls/comments/${params.parameter.comment_id}/reactions/${params.parameter.reaction_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Get a pull request
   * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Lists details of a pull request by providing its number.
   *
   * When you get, [create](https://docs.github.com/enterprise-server@3.4/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/enterprise-server@3.4/rest/reference/pulls#update-a-pull-request) a pull request, GitHub Enterprise Server creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/enterprise-server@3.4/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
   *
   * The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub Enterprise Server has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.
   *
   * The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:
   *
   * *   If merged as a [merge commit](https://docs.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.
   * *   If merged via a [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
   * *   If [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.
   *
   * Pass the appropriate [media type](https://docs.github.com/enterprise-server@3.4/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
   * operationId: pulls/get
   * Request URI: /repos/{owner}/{repo}/pulls/{pull_number}
   */
  public async pulls$get(params: Params$pulls$get, option?: RequestOption): Promise<Response$pulls$get$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/pulls/${params.parameter.pull_number}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Update a pull request
   * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
   * operationId: pulls/update
   * Request URI: /repos/{owner}/{repo}/pulls/{pull_number}
   */
  public async pulls$update(
    params: Params$pulls$update,
    option?: RequestOption,
  ): Promise<Response$pulls$update$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/pulls/${params.parameter.pull_number}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List review comments on a pull request
   * Lists all review comments for a pull request. By default, review comments are in ascending order by ID.
   * operationId: pulls/list-review-comments
   * Request URI: /repos/{owner}/{repo}/pulls/{pull_number}/comments
   */
  public async pulls$list$review$comments(
    params: Params$pulls$list$review$comments,
    option?: RequestOption,
  ): Promise<Response$pulls$list$review$comments$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/pulls/${params.parameter.pull_number}/comments`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      sort: { value: params.parameter.sort, explode: false },
      direction: { value: params.parameter.direction, explode: false },
      since: { value: params.parameter.since, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create a review comment for a pull request
   *
   * Creates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see "[Create an issue comment](https://docs.github.com/enterprise-server@3.4/rest/reference/issues#create-an-issue-comment)." We recommend creating a review comment using `line`, `side`, and optionally `start_line` and `start_side` if your comment applies to more than one line in the pull request diff.
   *
   * You can still create a review comment using the `position` parameter. When you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required.
   *
   * **Note:** The position value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   * operationId: pulls/create-review-comment
   * Request URI: /repos/{owner}/{repo}/pulls/{pull_number}/comments
   */
  public async pulls$create$review$comment(
    params: Params$pulls$create$review$comment,
    option?: RequestOption,
  ): Promise<Response$pulls$create$review$comment$Status$201["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/pulls/${params.parameter.pull_number}/comments`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Create a reply for a review comment
   * Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   * operationId: pulls/create-reply-for-review-comment
   * Request URI: /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies
   */
  public async pulls$create$reply$for$review$comment(
    params: Params$pulls$create$reply$for$review$comment,
    option?: RequestOption,
  ): Promise<Response$pulls$create$reply$for$review$comment$Status$201["application/json"]> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/pulls/${params.parameter.pull_number}/comments/${params.parameter.comment_id}/replies`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List commits on a pull request
   * Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#list-commits) endpoint.
   * operationId: pulls/list-commits
   * Request URI: /repos/{owner}/{repo}/pulls/{pull_number}/commits
   */
  public async pulls$list$commits(
    params: Params$pulls$list$commits,
    option?: RequestOption,
  ): Promise<Response$pulls$list$commits$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/pulls/${params.parameter.pull_number}/commits`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List pull requests files
   * **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
   * operationId: pulls/list-files
   * Request URI: /repos/{owner}/{repo}/pulls/{pull_number}/files
   */
  public async pulls$list$files(
    params: Params$pulls$list$files,
    option?: RequestOption,
  ): Promise<Response$pulls$list$files$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/pulls/${params.parameter.pull_number}/files`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Check if a pull request has been merged
   * operationId: pulls/check-if-merged
   * Request URI: /repos/{owner}/{repo}/pulls/{pull_number}/merge
   */
  public async pulls$check$if$merged(params: Params$pulls$check$if$merged, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/pulls/${params.parameter.pull_number}/merge`;
    const headers = {};
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Merge a pull request
   * This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.4/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   * operationId: pulls/merge
   * Request URI: /repos/{owner}/{repo}/pulls/{pull_number}/merge
   */
  public async pulls$merge(params: Params$pulls$merge, option?: RequestOption): Promise<Response$pulls$merge$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/pulls/${params.parameter.pull_number}/merge`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List requested reviewers for a pull request
   * operationId: pulls/list-requested-reviewers
   * Request URI: /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers
   */
  public async pulls$list$requested$reviewers(
    params: Params$pulls$list$requested$reviewers,
    option?: RequestOption,
  ): Promise<Response$pulls$list$requested$reviewers$Status$200["application/json"]> {
    const url =
      this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/pulls/${params.parameter.pull_number}/requested_reviewers`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Request reviewers for a pull request
   * This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.4/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   * operationId: pulls/request-reviewers
   * Request URI: /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers
   */
  public async pulls$request$reviewers(
    params: Params$pulls$request$reviewers,
    option?: RequestOption,
  ): Promise<Response$pulls$request$reviewers$Status$201["application/json"]> {
    const url =
      this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/pulls/${params.parameter.pull_number}/requested_reviewers`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Remove requested reviewers from a pull request
   * operationId: pulls/remove-requested-reviewers
   * Request URI: /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers
   */
  public async pulls$remove$requested$reviewers(
    params: Params$pulls$remove$requested$reviewers,
    option?: RequestOption,
  ): Promise<Response$pulls$remove$requested$reviewers$Status$200["application/json"]> {
    const url =
      this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/pulls/${params.parameter.pull_number}/requested_reviewers`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("DELETE", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List reviews for a pull request
   * The list of reviews returns in chronological order.
   * operationId: pulls/list-reviews
   * Request URI: /repos/{owner}/{repo}/pulls/{pull_number}/reviews
   */
  public async pulls$list$reviews(
    params: Params$pulls$list$reviews,
    option?: RequestOption,
  ): Promise<Response$pulls$list$reviews$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/pulls/${params.parameter.pull_number}/reviews`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create a review for a pull request
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   *
   * Pull request reviews created in the `PENDING` state do not include the `submitted_at` property in the response.
   *
   * **Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API v3 offers the `application/vnd.github.v3.diff` [media type](https://docs.github.com/enterprise-server@3.4/rest/overview/media-types#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the `Accept` header of a call to the [single pull request](https://docs.github.com/enterprise-server@3.4/rest/reference/pulls#get-a-pull-request) endpoint.
   *
   * The `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
   * operationId: pulls/create-review
   * Request URI: /repos/{owner}/{repo}/pulls/{pull_number}/reviews
   */
  public async pulls$create$review(
    params: Params$pulls$create$review,
    option?: RequestOption,
  ): Promise<Response$pulls$create$review$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/pulls/${params.parameter.pull_number}/reviews`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get a review for a pull request
   * operationId: pulls/get-review
   * Request URI: /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}
   */
  public async pulls$get$review(
    params: Params$pulls$get$review,
    option?: RequestOption,
  ): Promise<Response$pulls$get$review$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/pulls/${params.parameter.pull_number}/reviews/${params.parameter.review_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Update a review for a pull request
   * Update the review summary comment with new text.
   * operationId: pulls/update-review
   * Request URI: /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}
   */
  public async pulls$update$review(
    params: Params$pulls$update$review,
    option?: RequestOption,
  ): Promise<Response$pulls$update$review$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/pulls/${params.parameter.pull_number}/reviews/${params.parameter.review_id}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Delete a pending review for a pull request
   * operationId: pulls/delete-pending-review
   * Request URI: /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}
   */
  public async pulls$delete$pending$review(
    params: Params$pulls$delete$pending$review,
    option?: RequestOption,
  ): Promise<Response$pulls$delete$pending$review$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/pulls/${params.parameter.pull_number}/reviews/${params.parameter.review_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * List comments for a pull request review
   * List comments for a specific pull request review.
   * operationId: pulls/list-comments-for-review
   * Request URI: /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments
   */
  public async pulls$list$comments$for$review(
    params: Params$pulls$list$comments$for$review,
    option?: RequestOption,
  ): Promise<Response$pulls$list$comments$for$review$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/pulls/${params.parameter.pull_number}/reviews/${params.parameter.review_id}/comments`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Dismiss a review for a pull request
   * **Note:** To dismiss a pull request review on a [protected branch](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#branches), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.
   * operationId: pulls/dismiss-review
   * Request URI: /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals
   */
  public async pulls$dismiss$review(
    params: Params$pulls$dismiss$review,
    option?: RequestOption,
  ): Promise<Response$pulls$dismiss$review$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/pulls/${params.parameter.pull_number}/reviews/${params.parameter.review_id}/dismissals`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Submit a review for a pull request
   * operationId: pulls/submit-review
   * Request URI: /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events
   */
  public async pulls$submit$review(
    params: Params$pulls$submit$review,
    option?: RequestOption,
  ): Promise<Response$pulls$submit$review$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/pulls/${params.parameter.pull_number}/reviews/${params.parameter.review_id}/events`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Update a pull request branch
   * Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.
   * operationId: pulls/update-branch
   * Request URI: /repos/{owner}/{repo}/pulls/{pull_number}/update-branch
   */
  public async pulls$update$branch(
    params: Params$pulls$update$branch,
    option?: RequestOption,
  ): Promise<Response$pulls$update$branch$Status$202["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/pulls/${params.parameter.pull_number}/update-branch`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get a repository README
   * Gets the preferred README for a repository.
   *
   * READMEs support [custom media types](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
   * operationId: repos/get-readme
   * Request URI: /repos/{owner}/{repo}/readme
   */
  public async repos$get$readme(
    params: Params$repos$get$readme,
    option?: RequestOption,
  ): Promise<Response$repos$get$readme$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/readme`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      ref: { value: params.parameter.ref, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get a repository README for a directory
   * Gets the README from a repository directory.
   *
   * READMEs support [custom media types](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
   * operationId: repos/get-readme-in-directory
   * Request URI: /repos/{owner}/{repo}/readme/{dir}
   */
  public async repos$get$readme$in$directory(
    params: Params$repos$get$readme$in$directory,
    option?: RequestOption,
  ): Promise<Response$repos$get$readme$in$directory$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/readme/${params.parameter.dir}`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      ref: { value: params.parameter.ref, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List releases
   * This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#list-repository-tags).
   *
   * Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
   * operationId: repos/list-releases
   * Request URI: /repos/{owner}/{repo}/releases
   */
  public async repos$list$releases(
    params: Params$repos$list$releases,
    option?: RequestOption,
  ): Promise<Response$repos$list$releases$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/releases`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create a release
   * Users with push access to the repository can create a release.
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   * operationId: repos/create-release
   * Request URI: /repos/{owner}/{repo}/releases
   */
  public async repos$create$release(
    params: Params$repos$create$release,
    option?: RequestOption,
  ): Promise<Response$repos$create$release$Status$201["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/releases`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get a release asset
   * To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/enterprise-server@3.4/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.
   * operationId: repos/get-release-asset
   * Request URI: /repos/{owner}/{repo}/releases/assets/{asset_id}
   */
  public async repos$get$release$asset(
    params: Params$repos$get$release$asset,
    option?: RequestOption,
  ): Promise<Response$repos$get$release$asset$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/releases/assets/${params.parameter.asset_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Delete a release asset
   * operationId: repos/delete-release-asset
   * Request URI: /repos/{owner}/{repo}/releases/assets/{asset_id}
   */
  public async repos$delete$release$asset(params: Params$repos$delete$release$asset, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/releases/assets/${params.parameter.asset_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Update a release asset
   * Users with push access to the repository can edit a release asset.
   * operationId: repos/update-release-asset
   * Request URI: /repos/{owner}/{repo}/releases/assets/{asset_id}
   */
  public async repos$update$release$asset(
    params: Params$repos$update$release$asset,
    option?: RequestOption,
  ): Promise<Response$repos$update$release$asset$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/releases/assets/${params.parameter.asset_id}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Generate release notes content for a release
   * Generate a name and body describing a [release](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#releases). The body content will be markdown formatted and contain information like the changes since last release and users who contributed. The generated release notes are not saved anywhere. They are intended to be generated and used when creating a new release.
   * operationId: repos/generate-release-notes
   * Request URI: /repos/{owner}/{repo}/releases/generate-notes
   */
  public async repos$generate$release$notes(
    params: Params$repos$generate$release$notes,
    option?: RequestOption,
  ): Promise<Response$repos$generate$release$notes$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/releases/generate-notes`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get the latest release
   * View the latest published full release for the repository.
   *
   * The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
   * operationId: repos/get-latest-release
   * Request URI: /repos/{owner}/{repo}/releases/latest
   */
  public async repos$get$latest$release(
    params: Params$repos$get$latest$release,
    option?: RequestOption,
  ): Promise<Response$repos$get$latest$release$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/releases/latest`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Get a release by tag name
   * Get a published release with the specified tag.
   * operationId: repos/get-release-by-tag
   * Request URI: /repos/{owner}/{repo}/releases/tags/{tag}
   */
  public async repos$get$release$by$tag(
    params: Params$repos$get$release$by$tag,
    option?: RequestOption,
  ): Promise<Response$repos$get$release$by$tag$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/releases/tags/${params.parameter.tag}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Get a release
   * **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#hypermedia).
   * operationId: repos/get-release
   * Request URI: /repos/{owner}/{repo}/releases/{release_id}
   */
  public async repos$get$release(
    params: Params$repos$get$release,
    option?: RequestOption,
  ): Promise<Response$repos$get$release$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/releases/${params.parameter.release_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Delete a release
   * Users with push access to the repository can delete a release.
   * operationId: repos/delete-release
   * Request URI: /repos/{owner}/{repo}/releases/{release_id}
   */
  public async repos$delete$release(params: Params$repos$delete$release, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/releases/${params.parameter.release_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Update a release
   * Users with push access to the repository can edit a release.
   * operationId: repos/update-release
   * Request URI: /repos/{owner}/{repo}/releases/{release_id}
   */
  public async repos$update$release(
    params: Params$repos$update$release,
    option?: RequestOption,
  ): Promise<Response$repos$update$release$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/releases/${params.parameter.release_id}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List release assets
   * operationId: repos/list-release-assets
   * Request URI: /repos/{owner}/{repo}/releases/{release_id}/assets
   */
  public async repos$list$release$assets(
    params: Params$repos$list$release$assets,
    option?: RequestOption,
  ): Promise<Response$repos$list$release$assets$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/releases/${params.parameter.release_id}/assets`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Upload a release asset
   * This endpoint makes use of [a Hypermedia relation](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url` returned in
   * the response of the [Create a release endpoint](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#create-a-release) to upload a release asset.
   *
   * You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.
   *
   * Most libraries will set the required `Content-Length` header automatically. Use the required `Content-Type` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example:
   *
   * `application/zip`
   *
   * GitHub Enterprise Server expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example,
   * you'll still need to pass your authentication to be able to upload an asset.
   *
   * When an upstream failure occurs, you will receive a `502 Bad Gateway` status. This may leave an empty asset with a state of `starter`. It can be safely deleted.
   *
   * **Notes:**
   * *   GitHub Enterprise Server renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The "[List assets for a release](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#list-assets-for-a-release)"
   * endpoint lists the renamed filenames. For more information and help, contact [GitHub Enterprise Server Support](https://support.github.com/contact?tags=dotcom-rest-api).
   * *   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset.
   * operationId: repos/upload-release-asset
   * Request URI: /repos/{owner}/{repo}/releases/{release_id}/assets
   */
  public async repos$upload$release$asset(
    params: Params$repos$upload$release$asset,
    option?: RequestOption,
  ): Promise<Response$repos$upload$release$asset$Status$201["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/releases/${params.parameter.release_id}/assets`;
    const headers = {
      "Content-Type": "*/*",
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      name: { value: params.parameter.name, explode: false },
      label: { value: params.parameter.label, explode: false },
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, queryParameters, option);
  }
  /**
   * Create reaction for a release
   * Create a reaction to a [release](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#releases). A response with a `Status: 200 OK` means that you already added the reaction type to this release.
   * operationId: reactions/create-for-release
   * Request URI: /repos/{owner}/{repo}/releases/{release_id}/reactions
   */
  public async reactions$create$for$release(
    params: Params$reactions$create$for$release,
    option?: RequestOption,
  ): Promise<(Response$reactions$create$for$release$Status$200 | Response$reactions$create$for$release$Status$201)["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/releases/${params.parameter.release_id}/reactions`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List repository cache replication status
   * Lists the status of each repository cache replica.
   * operationId: repos/list-cache-info
   * Request URI: /repos/{owner}/{repo}/replicas/caches
   */
  public async repos$list$cache$info(
    params: Params$repos$list$cache$info,
    option?: RequestOption,
  ): Promise<Response$repos$list$cache$info$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/replicas/caches`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List secret scanning alerts for a repository
   * Lists secret scanning alerts for a private repository, from newest to oldest. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
   *
   * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
   * operationId: secret-scanning/list-alerts-for-repo
   * Request URI: /repos/{owner}/{repo}/secret-scanning/alerts
   */
  public async secret$scanning$list$alerts$for$repo(
    params: Params$secret$scanning$list$alerts$for$repo,
    option?: RequestOption,
  ): Promise<Response$secret$scanning$list$alerts$for$repo$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/secret-scanning/alerts`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      state: { value: params.parameter.state, explode: false },
      secret_type: { value: params.parameter.secret_type, explode: false },
      resolution: { value: params.parameter.resolution, explode: false },
      page: { value: params.parameter.page, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get a secret scanning alert
   * Gets a single secret scanning alert detected in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
   *
   * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
   * operationId: secret-scanning/get-alert
   * Request URI: /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}
   */
  public async secret$scanning$get$alert(
    params: Params$secret$scanning$get$alert,
    option?: RequestOption,
  ): Promise<Response$secret$scanning$get$alert$Status$200["application/json"]> {
    const url =
      this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/secret-scanning/alerts/${params.parameter.alert_number}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Update a secret scanning alert
   * Updates the status of a secret scanning alert in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
   *
   * GitHub Apps must have the `secret_scanning_alerts` write permission to use this endpoint.
   * operationId: secret-scanning/update-alert
   * Request URI: /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}
   */
  public async secret$scanning$update$alert(
    params: Params$secret$scanning$update$alert,
    option?: RequestOption,
  ): Promise<Response$secret$scanning$update$alert$Status$200["application/json"]> {
    const url =
      this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/secret-scanning/alerts/${params.parameter.alert_number}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List locations for a secret scanning alert
   * Lists all locations for a given secret scanning alert for a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
   *
   * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
   * operationId: secret-scanning/list-locations-for-alert
   * Request URI: /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations
   */
  public async secret$scanning$list$locations$for$alert(
    params: Params$secret$scanning$list$locations$for$alert,
    option?: RequestOption,
  ): Promise<Response$secret$scanning$list$locations$for$alert$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/repos/${params.parameter.owner}/${params.parameter.repo}/secret-scanning/alerts/${params.parameter.alert_number}/locations`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      page: { value: params.parameter.page, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List stargazers
   * Lists the people that have starred the repository.
   *
   * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-server@3.4/rest/overview/media-types/) via the `Accept` header:
   * operationId: activity/list-stargazers-for-repo
   * Request URI: /repos/{owner}/{repo}/stargazers
   */
  public async activity$list$stargazers$for$repo(
    params: Params$activity$list$stargazers$for$repo,
    option?: RequestOption,
  ): Promise<Response$activity$list$stargazers$for$repo$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/stargazers`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get the weekly commit activity
   * Returns a weekly aggregate of the number of additions and deletions pushed to a repository.
   * operationId: repos/get-code-frequency-stats
   * Request URI: /repos/{owner}/{repo}/stats/code_frequency
   */
  public async repos$get$code$frequency$stats(
    params: Params$repos$get$code$frequency$stats,
    option?: RequestOption,
  ): Promise<(Response$repos$get$code$frequency$stats$Status$200 | Response$repos$get$code$frequency$stats$Status$202)["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/stats/code_frequency`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Get the last year of commit activity
   * Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`.
   * operationId: repos/get-commit-activity-stats
   * Request URI: /repos/{owner}/{repo}/stats/commit_activity
   */
  public async repos$get$commit$activity$stats(
    params: Params$repos$get$commit$activity$stats,
    option?: RequestOption,
  ): Promise<(Response$repos$get$commit$activity$stats$Status$200 | Response$repos$get$commit$activity$stats$Status$202)["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/stats/commit_activity`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Get all contributor commit activity
   *
   * Returns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:
   *
   * *   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
   * *   `a` - Number of additions
   * *   `d` - Number of deletions
   * *   `c` - Number of commits
   * operationId: repos/get-contributors-stats
   * Request URI: /repos/{owner}/{repo}/stats/contributors
   */
  public async repos$get$contributors$stats(
    params: Params$repos$get$contributors$stats,
    option?: RequestOption,
  ): Promise<(Response$repos$get$contributors$stats$Status$200 | Response$repos$get$contributors$stats$Status$202)["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/stats/contributors`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Get the weekly commit count
   * Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.
   *
   * The array order is oldest week (index 0) to most recent week.
   * operationId: repos/get-participation-stats
   * Request URI: /repos/{owner}/{repo}/stats/participation
   */
  public async repos$get$participation$stats(
    params: Params$repos$get$participation$stats,
    option?: RequestOption,
  ): Promise<Response$repos$get$participation$stats$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/stats/participation`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Get the hourly commit count for each day
   * Each array contains the day number, hour number, and number of commits:
   *
   * *   `0-6`: Sunday - Saturday
   * *   `0-23`: Hour of day
   * *   Number of commits
   *
   * For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
   * operationId: repos/get-punch-card-stats
   * Request URI: /repos/{owner}/{repo}/stats/punch_card
   */
  public async repos$get$punch$card$stats(
    params: Params$repos$get$punch$card$stats,
    option?: RequestOption,
  ): Promise<Response$repos$get$punch$card$stats$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/stats/punch_card`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Create a commit status
   * Users with push access in a repository can create commit statuses for a given SHA.
   *
   * Note: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.
   * operationId: repos/create-commit-status
   * Request URI: /repos/{owner}/{repo}/statuses/{sha}
   */
  public async repos$create$commit$status(
    params: Params$repos$create$commit$status,
    option?: RequestOption,
  ): Promise<Response$repos$create$commit$status$Status$201["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/statuses/${params.parameter.sha}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List watchers
   * Lists the people watching the specified repository.
   * operationId: activity/list-watchers-for-repo
   * Request URI: /repos/{owner}/{repo}/subscribers
   */
  public async activity$list$watchers$for$repo(
    params: Params$activity$list$watchers$for$repo,
    option?: RequestOption,
  ): Promise<Response$activity$list$watchers$for$repo$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/subscribers`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get a repository subscription
   * operationId: activity/get-repo-subscription
   * Request URI: /repos/{owner}/{repo}/subscription
   */
  public async activity$get$repo$subscription(
    params: Params$activity$get$repo$subscription,
    option?: RequestOption,
  ): Promise<Response$activity$get$repo$subscription$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/subscription`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Set a repository subscription
   * If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://docs.github.com/enterprise-server@3.4/rest/reference/activity#delete-a-repository-subscription) completely.
   * operationId: activity/set-repo-subscription
   * Request URI: /repos/{owner}/{repo}/subscription
   */
  public async activity$set$repo$subscription(
    params: Params$activity$set$repo$subscription,
    option?: RequestOption,
  ): Promise<Response$activity$set$repo$subscription$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/subscription`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Delete a repository subscription
   * This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/enterprise-server@3.4/rest/reference/activity#set-a-repository-subscription).
   * operationId: activity/delete-repo-subscription
   * Request URI: /repos/{owner}/{repo}/subscription
   */
  public async activity$delete$repo$subscription(params: Params$activity$delete$repo$subscription, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/subscription`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * List repository tags
   * operationId: repos/list-tags
   * Request URI: /repos/{owner}/{repo}/tags
   */
  public async repos$list$tags(
    params: Params$repos$list$tags,
    option?: RequestOption,
  ): Promise<Response$repos$list$tags$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/tags`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Download a repository archive (tar)
   * Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually
   * `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
   * the `Location` header to make a second `GET` request.
   * **Note**: For private repositories, these links are temporary and expire after five minutes.
   * operationId: repos/download-tarball-archive
   * Request URI: /repos/{owner}/{repo}/tarball/{ref}
   */
  public async repos$download$tarball$archive(params: Params$repos$download$tarball$archive, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/tarball/${params.parameter.ref}`;
    const headers = {};
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * List repository teams
   * operationId: repos/list-teams
   * Request URI: /repos/{owner}/{repo}/teams
   */
  public async repos$list$teams(
    params: Params$repos$list$teams,
    option?: RequestOption,
  ): Promise<Response$repos$list$teams$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/teams`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get all repository topics
   * operationId: repos/get-all-topics
   * Request URI: /repos/{owner}/{repo}/topics
   */
  public async repos$get$all$topics(
    params: Params$repos$get$all$topics,
    option?: RequestOption,
  ): Promise<Response$repos$get$all$topics$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/topics`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      page: { value: params.parameter.page, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Replace all repository topics
   * operationId: repos/replace-all-topics
   * Request URI: /repos/{owner}/{repo}/topics
   */
  public async repos$replace$all$topics(
    params: Params$repos$replace$all$topics,
    option?: RequestOption,
  ): Promise<Response$repos$replace$all$topics$Status$200["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/topics`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Transfer a repository
   * A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://docs.github.com/articles/about-repository-transfers/).
   * operationId: repos/transfer
   * Request URI: /repos/{owner}/{repo}/transfer
   */
  public async repos$transfer(
    params: Params$repos$transfer,
    option?: RequestOption,
  ): Promise<Response$repos$transfer$Status$202["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/transfer`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Download a repository archive (zip)
   * Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually
   * `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
   * the `Location` header to make a second `GET` request.
   * **Note**: For private repositories, these links are temporary and expire after five minutes.
   * operationId: repos/download-zipball-archive
   * Request URI: /repos/{owner}/{repo}/zipball/{ref}
   */
  public async repos$download$zipball$archive(params: Params$repos$download$zipball$archive, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/repos/${params.parameter.owner}/${params.parameter.repo}/zipball/${params.parameter.ref}`;
    const headers = {};
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Create a repository using a template
   * Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. The authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#get-a-repository) endpoint and check that the `is_template` key is `true`.
   *
   * **OAuth scope requirements**
   *
   * When using [OAuth](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
   *
   * *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
   * *   `repo` scope to create a private repository
   * operationId: repos/create-using-template
   * Request URI: /repos/{template_owner}/{template_repo}/generate
   */
  public async repos$create$using$template(
    params: Params$repos$create$using$template,
    option?: RequestOption,
  ): Promise<Response$repos$create$using$template$Status$201["application/json"]> {
    const url = this.baseUrl + `/repos/${params.parameter.template_owner}/${params.parameter.template_repo}/generate`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List public repositories
   * Lists all public repositories in the order that they were created.
   *
   * Note:
   * - For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise.
   * - Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories.
   * operationId: repos/list-public
   * Request URI: /repositories
   */
  public async repos$list$public(
    params: Params$repos$list$public,
    option?: RequestOption,
  ): Promise<Response$repos$list$public$Status$200["application/json"]> {
    const url = this.baseUrl + `/repositories`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      since: { value: params.parameter.since, explode: false },
      visibility: { value: params.parameter.visibility, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List environment secrets
   * Lists all secrets available in an environment without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
   * operationId: actions/list-environment-secrets
   * Request URI: /repositories/{repository_id}/environments/{environment_name}/secrets
   */
  public async actions$list$environment$secrets(
    params: Params$actions$list$environment$secrets,
    option?: RequestOption,
  ): Promise<Response$actions$list$environment$secrets$Status$200["application/json"]> {
    const url = this.baseUrl + `/repositories/${params.parameter.repository_id}/environments/${params.parameter.environment_name}/secrets`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get an environment public key
   * Get the public key for an environment, which you need to encrypt environment secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.
   * operationId: actions/get-environment-public-key
   * Request URI: /repositories/{repository_id}/environments/{environment_name}/secrets/public-key
   */
  public async actions$get$environment$public$key(
    params: Params$actions$get$environment$public$key,
    option?: RequestOption,
  ): Promise<Response$actions$get$environment$public$key$Status$200["application/json"]> {
    const url =
      this.baseUrl + `/repositories/${params.parameter.repository_id}/environments/${params.parameter.environment_name}/secrets/public-key`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Get an environment secret
   * Gets a single environment secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
   * operationId: actions/get-environment-secret
   * Request URI: /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}
   */
  public async actions$get$environment$secret(
    params: Params$actions$get$environment$secret,
    option?: RequestOption,
  ): Promise<Response$actions$get$environment$secret$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/repositories/${params.parameter.repository_id}/environments/${params.parameter.environment_name}/secrets/${params.parameter.secret_name}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Create or update an environment secret
   * Creates or updates an environment secret with an encrypted value. Encrypt your secret using
   * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
   * token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use
   * this endpoint.
   *
   * #### Example encrypting a secret using Node.js
   *
   * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
   *
   * ```
   * const sodium = require('tweetsodium');
   *
   * const key = "base64-encoded-public-key";
   * const value = "plain-text-secret";
   *
   * // Convert the message and key to Uint8Array's (Buffer implements that interface)
   * const messageBytes = Buffer.from(value);
   * const keyBytes = Buffer.from(key, 'base64');
   *
   * // Encrypt using LibSodium.
   * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
   *
   * // Base64 the encrypted secret
   * const encrypted = Buffer.from(encryptedBytes).toString('base64');
   *
   * console.log(encrypted);
   * ```
   *
   *
   * #### Example encrypting a secret using Python
   *
   * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
   *
   * ```
   * from base64 import b64encode
   * from nacl import encoding, public
   *
   * def encrypt(public_key: str, secret_value: str) -> str:
   *   """Encrypt a Unicode string using the public key."""
   *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
   *   sealed_box = public.SealedBox(public_key)
   *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
   *   return b64encode(encrypted).decode("utf-8")
   * ```
   *
   * #### Example encrypting a secret using C#
   *
   * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
   *
   * ```
   * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
   * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
   *
   * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
   *
   * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
   * ```
   *
   * #### Example encrypting a secret using Ruby
   *
   * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
   *
   * ```ruby
   * require "rbnacl"
   * require "base64"
   *
   * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
   * public_key = RbNaCl::PublicKey.new(key)
   *
   * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
   * encrypted_secret = box.encrypt("my_secret")
   *
   * # Print the base64 encoded secret
   * puts Base64.strict_encode64(encrypted_secret)
   * ```
   * operationId: actions/create-or-update-environment-secret
   * Request URI: /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}
   */
  public async actions$create$or$update$environment$secret(
    params: Params$actions$create$or$update$environment$secret,
    option?: RequestOption,
  ): Promise<Response$actions$create$or$update$environment$secret$Status$201["application/json"]> {
    const url =
      this.baseUrl +
      `/repositories/${params.parameter.repository_id}/environments/${params.parameter.environment_name}/secrets/${params.parameter.secret_name}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Delete an environment secret
   * Deletes a secret in an environment using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
   * operationId: actions/delete-environment-secret
   * Request URI: /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}
   */
  public async actions$delete$environment$secret(params: Params$actions$delete$environment$secret, option?: RequestOption): Promise<void> {
    const url =
      this.baseUrl +
      `/repositories/${params.parameter.repository_id}/environments/${params.parameter.environment_name}/secrets/${params.parameter.secret_name}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Search code
   * Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#pagination).
   *
   * When searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.4/rest/reference/search#text-match-metadata).
   *
   * For example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:
   *
   * `q=addClass+in:file+language:js+repo:jquery/jquery`
   *
   * This query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.
   *
   * #### Considerations for code search
   *
   * Due to the complexity of searching code, there are a few restrictions on how searches are performed:
   *
   * *   Only the _default branch_ is considered. In most cases, this will be the `master` branch.
   * *   Only files smaller than 384 KB are searchable.
   * *   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing
   * language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.
   * operationId: search/code
   * Request URI: /search/code
   */
  public async search$code(params: Params$search$code, option?: RequestOption): Promise<Response$search$code$Status$200["application/json"]> {
    const url = this.baseUrl + `/search/code`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      q: { value: params.parameter.q, explode: false },
      sort: { value: params.parameter.sort, explode: false },
      order: { value: params.parameter.order, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Search commits
   * Find commits via various criteria on the default branch (usually `master`). This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#pagination).
   *
   * When searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match
   * metadata](https://docs.github.com/enterprise-server@3.4/rest/reference/search#text-match-metadata).
   *
   * For example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:
   *
   * `q=repo:octocat/Spoon-Knife+css`
   * operationId: search/commits
   * Request URI: /search/commits
   */
  public async search$commits(
    params: Params$search$commits,
    option?: RequestOption,
  ): Promise<Response$search$commits$Status$200["application/json"]> {
    const url = this.baseUrl + `/search/commits`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      q: { value: params.parameter.q, explode: false },
      sort: { value: params.parameter.sort, explode: false },
      order: { value: params.parameter.order, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Search issues and pull requests
   * Find issues by state and keyword. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#pagination).
   *
   * When searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted
   * search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.4/rest/reference/search#text-match-metadata).
   *
   * For example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.
   *
   * `q=windows+label:bug+language:python+state:open&sort=created&order=asc`
   *
   * This query searches for the keyword `windows`, within any open issue that is labeled as `bug`. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the search results.
   *
   * **Note:** For [user-to-server](https://docs.github.com/developers/apps/identifying-and-authorizing-users-for-github-apps#user-to-server-requests) GitHub App requests, you can't retrieve a combination of issues and pull requests in a single query. Requests that don't include the `is:issue` or `is:pull-request` qualifier will receive an HTTP `422 Unprocessable Entity` response. To get results for both issues and pull requests, you must send separate queries for issues and pull requests. For more information about the `is` qualifier, see "[Searching only issues or pull requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests)."
   * operationId: search/issues-and-pull-requests
   * Request URI: /search/issues
   */
  public async search$issues$and$pull$requests(
    params: Params$search$issues$and$pull$requests,
    option?: RequestOption,
  ): Promise<Response$search$issues$and$pull$requests$Status$200["application/json"]> {
    const url = this.baseUrl + `/search/issues`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      q: { value: params.parameter.q, explode: false },
      sort: { value: params.parameter.sort, explode: false },
      order: { value: params.parameter.order, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Search labels
   * Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#pagination).
   *
   * When searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.4/rest/reference/search#text-match-metadata).
   *
   * For example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:
   *
   * `q=bug+defect+enhancement&repository_id=64778136`
   *
   * The labels that best match the query appear first in the search results.
   * operationId: search/labels
   * Request URI: /search/labels
   */
  public async search$labels(
    params: Params$search$labels,
    option?: RequestOption,
  ): Promise<Response$search$labels$Status$200["application/json"]> {
    const url = this.baseUrl + `/search/labels`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      repository_id: { value: params.parameter.repository_id, explode: false },
      q: { value: params.parameter.q, explode: false },
      sort: { value: params.parameter.sort, explode: false },
      order: { value: params.parameter.order, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Search repositories
   * Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#pagination).
   *
   * When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.4/rest/reference/search#text-match-metadata).
   *
   * For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:
   *
   * `q=tetris+language:assembly&sort=stars&order=desc`
   *
   * This query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.
   * operationId: search/repos
   * Request URI: /search/repositories
   */
  public async search$repos(
    params: Params$search$repos,
    option?: RequestOption,
  ): Promise<Response$search$repos$Status$200["application/json"]> {
    const url = this.baseUrl + `/search/repositories`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      q: { value: params.parameter.q, explode: false },
      sort: { value: params.parameter.sort, explode: false },
      order: { value: params.parameter.order, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Search topics
   * Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#pagination). See "[Searching topics](https://docs.github.com/articles/searching-topics/)" for a detailed list of qualifiers.
   *
   * When searching for topics, you can get text match metadata for the topic's **short\_description**, **description**, **name**, or **display\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.4/rest/reference/search#text-match-metadata).
   *
   * For example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:
   *
   * `q=ruby+is:featured`
   *
   * This query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.
   * operationId: search/topics
   * Request URI: /search/topics
   */
  public async search$topics(
    params: Params$search$topics,
    option?: RequestOption,
  ): Promise<Response$search$topics$Status$200["application/json"]> {
    const url = this.baseUrl + `/search/topics`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      q: { value: params.parameter.q, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Search users
   * Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#pagination).
   *
   * When searching for users, you can get text match metadata for the issue **login**, **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.4/rest/reference/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.4/rest/reference/search#text-match-metadata).
   *
   * For example, if you're looking for a list of popular users, you might try this query:
   *
   * `q=tom+repos:%3E42+followers:%3E1000`
   *
   * This query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers.
   * operationId: search/users
   * Request URI: /search/users
   */
  public async search$users(
    params: Params$search$users,
    option?: RequestOption,
  ): Promise<Response$search$users$Status$200["application/json"]> {
    const url = this.baseUrl + `/search/users`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      q: { value: params.parameter.q, explode: false },
      sort: { value: params.parameter.sort, explode: false },
      order: { value: params.parameter.order, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get the configuration status
   * This endpoint allows you to check the status of the most recent configuration process:
   *
   * Note that you may need to wait several seconds after you start a process before you can check its status.
   *
   * The different statuses are:
   *
   * | Status        | Description                       |
   * | ------------- | --------------------------------- |
   * | `PENDING`     | The job has not started yet       |
   * | `CONFIGURING` | The job is running                |
   * | `DONE`        | The job has finished correctly    |
   * | `FAILED`      | The job has finished unexpectedly |
   * operationId: enterprise-admin/get-configuration-status
   * Request URI: /setup/api/configcheck
   */
  public async enterprise$admin$get$configuration$status(
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$get$configuration$status$Status$200["application/json"]> {
    const url = this.baseUrl + `/setup/api/configcheck`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Start a configuration process
   * This endpoint allows you to start a configuration process at any time for your updated settings to take effect:
   * operationId: enterprise-admin/start-configuration-process
   * Request URI: /setup/api/configure
   */
  public async enterprise$admin$start$configuration$process(option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/setup/api/configure`;
    const headers = {};
    return this.apiClient.request("POST", url, headers, undefined, undefined, option);
  }
  /**
   * Get the maintenance status
   * Check your installation's maintenance status:
   * operationId: enterprise-admin/get-maintenance-status
   * Request URI: /setup/api/maintenance
   */
  public async enterprise$admin$get$maintenance$status(
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$get$maintenance$status$Status$200["application/json"]> {
    const url = this.baseUrl + `/setup/api/maintenance`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Enable or disable maintenance mode
   * **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).
   * operationId: enterprise-admin/enable-or-disable-maintenance-mode
   * Request URI: /setup/api/maintenance
   */
  public async enterprise$admin$enable$or$disable$maintenance$mode(
    params: Params$enterprise$admin$enable$or$disable$maintenance$mode,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$enable$or$disable$maintenance$mode$Status$200["application/json"]> {
    const url = this.baseUrl + `/setup/api/maintenance`;
    const headers = {
      "Content-Type": "application/x-www-form-urlencoded",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get settings
   * operationId: enterprise-admin/get-settings
   * Request URI: /setup/api/settings
   */
  public async enterprise$admin$get$settings(
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$get$settings$Status$200["application/json"]> {
    const url = this.baseUrl + `/setup/api/settings`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Set settings
   * For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-settings).
   *
   * **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).
   * operationId: enterprise-admin/set-settings
   * Request URI: /setup/api/settings
   */
  public async enterprise$admin$set$settings(params: Params$enterprise$admin$set$settings, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/setup/api/settings`;
    const headers = {
      "Content-Type": "application/x-www-form-urlencoded",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get all authorized SSH keys
   * operationId: enterprise-admin/get-all-authorized-ssh-keys
   * Request URI: /setup/api/settings/authorized-keys
   */
  public async enterprise$admin$get$all$authorized$ssh$keys(
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$get$all$authorized$ssh$keys$Status$200["application/json"]> {
    const url = this.baseUrl + `/setup/api/settings/authorized-keys`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Add an authorized SSH key
   * **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).
   * operationId: enterprise-admin/add-authorized-ssh-key
   * Request URI: /setup/api/settings/authorized-keys
   */
  public async enterprise$admin$add$authorized$ssh$key(
    params: Params$enterprise$admin$add$authorized$ssh$key,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$add$authorized$ssh$key$Status$201["application/json"]> {
    const url = this.baseUrl + `/setup/api/settings/authorized-keys`;
    const headers = {
      "Content-Type": "application/x-www-form-urlencoded",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Remove an authorized SSH key
   * **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).
   * operationId: enterprise-admin/remove-authorized-ssh-key
   * Request URI: /setup/api/settings/authorized-keys
   */
  public async enterprise$admin$remove$authorized$ssh$key(
    params: Params$enterprise$admin$remove$authorized$ssh$key,
    option?: RequestOption,
  ): Promise<Response$enterprise$admin$remove$authorized$ssh$key$Status$200["application/json"]> {
    const url = this.baseUrl + `/setup/api/settings/authorized-keys`;
    const headers = {
      "Content-Type": "application/x-www-form-urlencoded",
      Accept: "application/json",
    };
    return this.apiClient.request("DELETE", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Create a GitHub license
   * When you boot a GitHub instance for the first time, you can use the following endpoint to upload a license.
   *
   * Note that you need to `POST` to [`/setup/api/configure`](https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#start-a-configuration-process) to start the actual configuration process.
   *
   * When using this endpoint, your GitHub instance must have a password set. This can be accomplished two ways:
   *
   * 1.  If you're working directly with the API before accessing the web interface, you must pass in the password parameter to set your password.
   * 2.  If you set up your instance via the web interface before accessing the API, your calls to this endpoint do not need the password parameter.
   *
   * **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).
   * operationId: enterprise-admin/create-enterprise-server-license
   * Request URI: /setup/api/start
   */
  public async enterprise$admin$create$enterprise$server$license(
    params: Params$enterprise$admin$create$enterprise$server$license,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/setup/api/start`;
    const headers = {
      "Content-Type": "application/x-www-form-urlencoded",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Upgrade a license
   * This API upgrades your license and also triggers the configuration process.
   *
   * **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).
   * operationId: enterprise-admin/upgrade-license
   * Request URI: /setup/api/upgrade
   */
  public async enterprise$admin$upgrade$license(params: Params$enterprise$admin$upgrade$license, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/setup/api/upgrade`;
    const headers = {
      "Content-Type": "application/x-www-form-urlencoded",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * @deprecated
   * Get a team (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#get-a-team-by-name) endpoint.
   * operationId: teams/get-legacy
   * Request URI: /teams/{team_id}
   */
  public async teams$get$legacy(
    params: Params$teams$get$legacy,
    option?: RequestOption,
  ): Promise<Response$teams$get$legacy$Status$200["application/json"]> {
    const url = this.baseUrl + `/teams/${params.parameter.team_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * @deprecated
   * Delete a team (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#delete-a-team) endpoint.
   *
   * To delete a team, the authenticated user must be an organization owner or team maintainer.
   *
   * If you are an organization owner, deleting a parent team will delete all of its child teams as well.
   * operationId: teams/delete-legacy
   * Request URI: /teams/{team_id}
   */
  public async teams$delete$legacy(params: Params$teams$delete$legacy, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/teams/${params.parameter.team_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * @deprecated
   * Update a team (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#update-a-team) endpoint.
   *
   * To edit a team, the authenticated user must either be an organization owner or a team maintainer.
   *
   * **Note:** With nested teams, the `privacy` for parent teams cannot be `secret`.
   * operationId: teams/update-legacy
   * Request URI: /teams/{team_id}
   */
  public async teams$update$legacy(
    params: Params$teams$update$legacy,
    option?: RequestOption,
  ): Promise<(Response$teams$update$legacy$Status$200 | Response$teams$update$legacy$Status$201)["application/json"]> {
    const url = this.baseUrl + `/teams/${params.parameter.team_id}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * @deprecated
   * List discussions (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#list-discussions) endpoint.
   *
   * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   * operationId: teams/list-discussions-legacy
   * Request URI: /teams/{team_id}/discussions
   */
  public async teams$list$discussions$legacy(
    params: Params$teams$list$discussions$legacy,
    option?: RequestOption,
  ): Promise<Response$teams$list$discussions$legacy$Status$200["application/json"]> {
    const url = this.baseUrl + `/teams/${params.parameter.team_id}/discussions`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      direction: { value: params.parameter.direction, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * @deprecated
   * Create a discussion (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#create-a-discussion) endpoint.
   *
   * Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   * operationId: teams/create-discussion-legacy
   * Request URI: /teams/{team_id}/discussions
   */
  public async teams$create$discussion$legacy(
    params: Params$teams$create$discussion$legacy,
    option?: RequestOption,
  ): Promise<Response$teams$create$discussion$legacy$Status$201["application/json"]> {
    const url = this.baseUrl + `/teams/${params.parameter.team_id}/discussions`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * @deprecated
   * Get a discussion (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#get-a-discussion) endpoint.
   *
   * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   * operationId: teams/get-discussion-legacy
   * Request URI: /teams/{team_id}/discussions/{discussion_number}
   */
  public async teams$get$discussion$legacy(
    params: Params$teams$get$discussion$legacy,
    option?: RequestOption,
  ): Promise<Response$teams$get$discussion$legacy$Status$200["application/json"]> {
    const url = this.baseUrl + `/teams/${params.parameter.team_id}/discussions/${params.parameter.discussion_number}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * @deprecated
   * Delete a discussion (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#delete-a-discussion) endpoint.
   *
   * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   * operationId: teams/delete-discussion-legacy
   * Request URI: /teams/{team_id}/discussions/{discussion_number}
   */
  public async teams$delete$discussion$legacy(params: Params$teams$delete$discussion$legacy, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/teams/${params.parameter.team_id}/discussions/${params.parameter.discussion_number}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * @deprecated
   * Update a discussion (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#update-a-discussion) endpoint.
   *
   * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   * operationId: teams/update-discussion-legacy
   * Request URI: /teams/{team_id}/discussions/{discussion_number}
   */
  public async teams$update$discussion$legacy(
    params: Params$teams$update$discussion$legacy,
    option?: RequestOption,
  ): Promise<Response$teams$update$discussion$legacy$Status$200["application/json"]> {
    const url = this.baseUrl + `/teams/${params.parameter.team_id}/discussions/${params.parameter.discussion_number}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * @deprecated
   * List discussion comments (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#list-discussion-comments) endpoint.
   *
   * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   * operationId: teams/list-discussion-comments-legacy
   * Request URI: /teams/{team_id}/discussions/{discussion_number}/comments
   */
  public async teams$list$discussion$comments$legacy(
    params: Params$teams$list$discussion$comments$legacy,
    option?: RequestOption,
  ): Promise<Response$teams$list$discussion$comments$legacy$Status$200["application/json"]> {
    const url = this.baseUrl + `/teams/${params.parameter.team_id}/discussions/${params.parameter.discussion_number}/comments`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      direction: { value: params.parameter.direction, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * @deprecated
   * Create a discussion comment (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#create-a-discussion-comment) endpoint.
   *
   * Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   * operationId: teams/create-discussion-comment-legacy
   * Request URI: /teams/{team_id}/discussions/{discussion_number}/comments
   */
  public async teams$create$discussion$comment$legacy(
    params: Params$teams$create$discussion$comment$legacy,
    option?: RequestOption,
  ): Promise<Response$teams$create$discussion$comment$legacy$Status$201["application/json"]> {
    const url = this.baseUrl + `/teams/${params.parameter.team_id}/discussions/${params.parameter.discussion_number}/comments`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * @deprecated
   * Get a discussion comment (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#get-a-discussion-comment) endpoint.
   *
   * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   * operationId: teams/get-discussion-comment-legacy
   * Request URI: /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}
   */
  public async teams$get$discussion$comment$legacy(
    params: Params$teams$get$discussion$comment$legacy,
    option?: RequestOption,
  ): Promise<Response$teams$get$discussion$comment$legacy$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/teams/${params.parameter.team_id}/discussions/${params.parameter.discussion_number}/comments/${params.parameter.comment_number}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * @deprecated
   * Delete a discussion comment (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#delete-a-discussion-comment) endpoint.
   *
   * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   * operationId: teams/delete-discussion-comment-legacy
   * Request URI: /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}
   */
  public async teams$delete$discussion$comment$legacy(
    params: Params$teams$delete$discussion$comment$legacy,
    option?: RequestOption,
  ): Promise<void> {
    const url =
      this.baseUrl +
      `/teams/${params.parameter.team_id}/discussions/${params.parameter.discussion_number}/comments/${params.parameter.comment_number}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * @deprecated
   * Update a discussion comment (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#update-a-discussion-comment) endpoint.
   *
   * Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   * operationId: teams/update-discussion-comment-legacy
   * Request URI: /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}
   */
  public async teams$update$discussion$comment$legacy(
    params: Params$teams$update$discussion$comment$legacy,
    option?: RequestOption,
  ): Promise<Response$teams$update$discussion$comment$legacy$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/teams/${params.parameter.team_id}/discussions/${params.parameter.discussion_number}/comments/${params.parameter.comment_number}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * @deprecated
   * List reactions for a team discussion comment (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.
   *
   * List the reactions to a [team discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussion-comments). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   * operationId: reactions/list-for-team-discussion-comment-legacy
   * Request URI: /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions
   */
  public async reactions$list$for$team$discussion$comment$legacy(
    params: Params$reactions$list$for$team$discussion$comment$legacy,
    option?: RequestOption,
  ): Promise<Response$reactions$list$for$team$discussion$comment$legacy$Status$200["application/json"]> {
    const url =
      this.baseUrl +
      `/teams/${params.parameter.team_id}/discussions/${params.parameter.discussion_number}/comments/${params.parameter.comment_number}/reactions`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      content: { value: params.parameter.content, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * @deprecated
   * Create reaction for a team discussion comment (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Create reaction for a team discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#create-reaction-for-a-team-discussion-comment)" endpoint.
   *
   * Create a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.
   * operationId: reactions/create-for-team-discussion-comment-legacy
   * Request URI: /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions
   */
  public async reactions$create$for$team$discussion$comment$legacy(
    params: Params$reactions$create$for$team$discussion$comment$legacy,
    option?: RequestOption,
  ): Promise<Response$reactions$create$for$team$discussion$comment$legacy$Status$201["application/json"]> {
    const url =
      this.baseUrl +
      `/teams/${params.parameter.team_id}/discussions/${params.parameter.discussion_number}/comments/${params.parameter.comment_number}/reactions`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * @deprecated
   * List reactions for a team discussion (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.
   *
   * List the reactions to a [team discussion](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   * operationId: reactions/list-for-team-discussion-legacy
   * Request URI: /teams/{team_id}/discussions/{discussion_number}/reactions
   */
  public async reactions$list$for$team$discussion$legacy(
    params: Params$reactions$list$for$team$discussion$legacy,
    option?: RequestOption,
  ): Promise<Response$reactions$list$for$team$discussion$legacy$Status$200["application/json"]> {
    const url = this.baseUrl + `/teams/${params.parameter.team_id}/discussions/${params.parameter.discussion_number}/reactions`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      content: { value: params.parameter.content, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * @deprecated
   * Create reaction for a team discussion (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#create-reaction-for-a-team-discussion) endpoint.
   *
   * Create a reaction to a [team discussion](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.
   * operationId: reactions/create-for-team-discussion-legacy
   * Request URI: /teams/{team_id}/discussions/{discussion_number}/reactions
   */
  public async reactions$create$for$team$discussion$legacy(
    params: Params$reactions$create$for$team$discussion$legacy,
    option?: RequestOption,
  ): Promise<Response$reactions$create$for$team$discussion$legacy$Status$201["application/json"]> {
    const url = this.baseUrl + `/teams/${params.parameter.team_id}/discussions/${params.parameter.discussion_number}/reactions`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * @deprecated
   * List team members (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#list-team-members) endpoint.
   *
   * Team members will include the members of child teams.
   * operationId: teams/list-members-legacy
   * Request URI: /teams/{team_id}/members
   */
  public async teams$list$members$legacy(
    params: Params$teams$list$members$legacy,
    option?: RequestOption,
  ): Promise<Response$teams$list$members$legacy$Status$200["application/json"]> {
    const url = this.baseUrl + `/teams/${params.parameter.team_id}/members`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      role: { value: params.parameter.role, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * @deprecated
   * Get team member (Legacy)
   * The "Get team member" endpoint (described below) is deprecated.
   *
   * We recommend using the [Get team membership for a user](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.
   *
   * To list members in a team, the team must be visible to the authenticated user.
   * operationId: teams/get-member-legacy
   * Request URI: /teams/{team_id}/members/{username}
   */
  public async teams$get$member$legacy(params: Params$teams$get$member$legacy, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/teams/${params.parameter.team_id}/members/${params.parameter.username}`;
    const headers = {};
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * @deprecated
   * Add team member (Legacy)
   * The "Add team member" endpoint (described below) is deprecated.
   *
   * We recommend using the [Add or update team membership for a user](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.
   *
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.
   *
   * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
   *
   * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#http-verbs)."
   * operationId: teams/add-member-legacy
   * Request URI: /teams/{team_id}/members/{username}
   */
  public async teams$add$member$legacy(params: Params$teams$add$member$legacy, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/teams/${params.parameter.team_id}/members/${params.parameter.username}`;
    const headers = {};
    return this.apiClient.request("PUT", url, headers, undefined, undefined, option);
  }
  /**
   * @deprecated
   * Remove team member (Legacy)
   * The "Remove team member" endpoint (described below) is deprecated.
   *
   * We recommend using the [Remove team membership for a user](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.
   *
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.
   *
   * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
   * operationId: teams/remove-member-legacy
   * Request URI: /teams/{team_id}/members/{username}
   */
  public async teams$remove$member$legacy(params: Params$teams$remove$member$legacy, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/teams/${params.parameter.team_id}/members/${params.parameter.username}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * @deprecated
   * Get team membership for a user (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#get-team-membership-for-a-user) endpoint.
   *
   * Team members will include the members of child teams.
   *
   * To get a user's membership with a team, the team must be visible to the authenticated user.
   *
   * **Note:**
   * The response contains the `state` of the membership and the member's `role`.
   *
   * The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#create-a-team).
   * operationId: teams/get-membership-for-user-legacy
   * Request URI: /teams/{team_id}/memberships/{username}
   */
  public async teams$get$membership$for$user$legacy(
    params: Params$teams$get$membership$for$user$legacy,
    option?: RequestOption,
  ): Promise<Response$teams$get$membership$for$user$legacy$Status$200["application/json"]> {
    const url = this.baseUrl + `/teams/${params.parameter.team_id}/memberships/${params.parameter.username}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * @deprecated
   * Add or update team membership for a user (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint.
   *
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.
   *
   * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
   *
   * If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the "pending" state until the user accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.
   *
   * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
   * operationId: teams/add-or-update-membership-for-user-legacy
   * Request URI: /teams/{team_id}/memberships/{username}
   */
  public async teams$add$or$update$membership$for$user$legacy(
    params: Params$teams$add$or$update$membership$for$user$legacy,
    option?: RequestOption,
  ): Promise<Response$teams$add$or$update$membership$for$user$legacy$Status$200["application/json"]> {
    const url = this.baseUrl + `/teams/${params.parameter.team_id}/memberships/${params.parameter.username}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * @deprecated
   * Remove team membership for a user (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#remove-team-membership-for-a-user) endpoint.
   *
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
   *
   * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
   * operationId: teams/remove-membership-for-user-legacy
   * Request URI: /teams/{team_id}/memberships/{username}
   */
  public async teams$remove$membership$for$user$legacy(
    params: Params$teams$remove$membership$for$user$legacy,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/teams/${params.parameter.team_id}/memberships/${params.parameter.username}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * @deprecated
   * List team projects (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#list-team-projects) endpoint.
   *
   * Lists the organization projects for a team.
   * operationId: teams/list-projects-legacy
   * Request URI: /teams/{team_id}/projects
   */
  public async teams$list$projects$legacy(
    params: Params$teams$list$projects$legacy,
    option?: RequestOption,
  ): Promise<Response$teams$list$projects$legacy$Status$200["application/json"]> {
    const url = this.baseUrl + `/teams/${params.parameter.team_id}/projects`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * @deprecated
   * Check team permissions for a project (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#check-team-permissions-for-a-project) endpoint.
   *
   * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
   * operationId: teams/check-permissions-for-project-legacy
   * Request URI: /teams/{team_id}/projects/{project_id}
   */
  public async teams$check$permissions$for$project$legacy(
    params: Params$teams$check$permissions$for$project$legacy,
    option?: RequestOption,
  ): Promise<Response$teams$check$permissions$for$project$legacy$Status$200["application/json"]> {
    const url = this.baseUrl + `/teams/${params.parameter.team_id}/projects/${params.parameter.project_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * @deprecated
   * Add or update team project permissions (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#add-or-update-team-project-permissions) endpoint.
   *
   * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
   * operationId: teams/add-or-update-project-permissions-legacy
   * Request URI: /teams/{team_id}/projects/{project_id}
   */
  public async teams$add$or$update$project$permissions$legacy(
    params: Params$teams$add$or$update$project$permissions$legacy,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/teams/${params.parameter.team_id}/projects/${params.parameter.project_id}`;
    const headers = {
      "Content-Type": "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * @deprecated
   * Remove a project from a team (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#remove-a-project-from-a-team) endpoint.
   *
   * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.
   * operationId: teams/remove-project-legacy
   * Request URI: /teams/{team_id}/projects/{project_id}
   */
  public async teams$remove$project$legacy(params: Params$teams$remove$project$legacy, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/teams/${params.parameter.team_id}/projects/${params.parameter.project_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * @deprecated
   * List team repositories (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#list-team-repositories) endpoint.
   * operationId: teams/list-repos-legacy
   * Request URI: /teams/{team_id}/repos
   */
  public async teams$list$repos$legacy(
    params: Params$teams$list$repos$legacy,
    option?: RequestOption,
  ): Promise<Response$teams$list$repos$legacy$Status$200["application/json"]> {
    const url = this.baseUrl + `/teams/${params.parameter.team_id}/repos`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * @deprecated
   * Check team permissions for a repository (Legacy)
   * **Note**: Repositories inherited through a parent team will also be checked.
   *
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#check-team-permissions-for-a-repository) endpoint.
   *
   * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/enterprise-server@3.4/rest/overview/media-types/) via the `Accept` header:
   * operationId: teams/check-permissions-for-repo-legacy
   * Request URI: /teams/{team_id}/repos/{owner}/{repo}
   */
  public async teams$check$permissions$for$repo$legacy(
    params: Params$teams$check$permissions$for$repo$legacy,
    option?: RequestOption,
  ): Promise<Response$teams$check$permissions$for$repo$legacy$Status$200["application/json"]> {
    const url = this.baseUrl + `/teams/${params.parameter.team_id}/repos/${params.parameter.owner}/${params.parameter.repo}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * @deprecated
   * Add or update team repository permissions (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Add or update team repository permissions](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#add-or-update-team-repository-permissions)" endpoint.
   *
   * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.
   *
   * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#http-verbs)."
   * operationId: teams/add-or-update-repo-permissions-legacy
   * Request URI: /teams/{team_id}/repos/{owner}/{repo}
   */
  public async teams$add$or$update$repo$permissions$legacy(
    params: Params$teams$add$or$update$repo$permissions$legacy,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/teams/${params.parameter.team_id}/repos/${params.parameter.owner}/${params.parameter.repo}`;
    const headers = {
      "Content-Type": "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * @deprecated
   * Remove a repository from a team (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#remove-a-repository-from-a-team) endpoint.
   *
   * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
   * operationId: teams/remove-repo-legacy
   * Request URI: /teams/{team_id}/repos/{owner}/{repo}
   */
  public async teams$remove$repo$legacy(params: Params$teams$remove$repo$legacy, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/teams/${params.parameter.team_id}/repos/${params.parameter.owner}/${params.parameter.repo}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * @deprecated
   * List child teams (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#list-child-teams) endpoint.
   * operationId: teams/list-child-legacy
   * Request URI: /teams/{team_id}/teams
   */
  public async teams$list$child$legacy(
    params: Params$teams$list$child$legacy,
    option?: RequestOption,
  ): Promise<Response$teams$list$child$legacy$Status$200["application/json"]> {
    const url = this.baseUrl + `/teams/${params.parameter.team_id}/teams`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get the authenticated user
   * If the authenticated user is authenticated through basic authentication or OAuth with the `user` scope, then the response lists public and private profile information.
   *
   * If the authenticated user is authenticated through OAuth without the `user` scope, then the response lists only public profile information.
   * operationId: users/get-authenticated
   * Request URI: /user
   */
  public async users$get$authenticated(option?: RequestOption): Promise<Response$users$get$authenticated$Status$200["application/json"]> {
    const url = this.baseUrl + `/user`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Update the authenticated user
   * **Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.
   * operationId: users/update-authenticated
   * Request URI: /user
   */
  public async users$update$authenticated(
    params: Params$users$update$authenticated,
    option?: RequestOption,
  ): Promise<Response$users$update$authenticated$Status$200["application/json"]> {
    const url = this.baseUrl + `/user`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List email addresses for the authenticated user
   * Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the `user:email` scope.
   * operationId: users/list-emails-for-authenticated-user
   * Request URI: /user/emails
   */
  public async users$list$emails$for$authenticated$user(
    params: Params$users$list$emails$for$authenticated$user,
    option?: RequestOption,
  ): Promise<Response$users$list$emails$for$authenticated$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/user/emails`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Add an email address for the authenticated user
   * This endpoint is accessible with the `user` scope.
   * operationId: users/add-email-for-authenticated-user
   * Request URI: /user/emails
   */
  public async users$add$email$for$authenticated$user(
    params: Params$users$add$email$for$authenticated$user,
    option?: RequestOption,
  ): Promise<Response$users$add$email$for$authenticated$user$Status$201["application/json"]> {
    const url = this.baseUrl + `/user/emails`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Delete an email address for the authenticated user
   * This endpoint is accessible with the `user` scope.
   * operationId: users/delete-email-for-authenticated-user
   * Request URI: /user/emails
   */
  public async users$delete$email$for$authenticated$user(
    params: Params$users$delete$email$for$authenticated$user,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/user/emails`;
    const headers = {
      "Content-Type": "application/json",
    };
    return this.apiClient.request("DELETE", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List followers of the authenticated user
   * Lists the people following the authenticated user.
   * operationId: users/list-followers-for-authenticated-user
   * Request URI: /user/followers
   */
  public async users$list$followers$for$authenticated$user(
    params: Params$users$list$followers$for$authenticated$user,
    option?: RequestOption,
  ): Promise<Response$users$list$followers$for$authenticated$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/user/followers`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List the people the authenticated user follows
   * Lists the people who the authenticated user follows.
   * operationId: users/list-followed-by-authenticated-user
   * Request URI: /user/following
   */
  public async users$list$followed$by$authenticated$user(
    params: Params$users$list$followed$by$authenticated$user,
    option?: RequestOption,
  ): Promise<Response$users$list$followed$by$authenticated$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/user/following`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Check if a person is followed by the authenticated user
   * operationId: users/check-person-is-followed-by-authenticated
   * Request URI: /user/following/{username}
   */
  public async users$check$person$is$followed$by$authenticated(
    params: Params$users$check$person$is$followed$by$authenticated,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/user/following/${params.parameter.username}`;
    const headers = {};
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Follow a user
   * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#http-verbs)."
   *
   * Following a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
   * operationId: users/follow
   * Request URI: /user/following/{username}
   */
  public async users$follow(params: Params$users$follow, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/user/following/${params.parameter.username}`;
    const headers = {};
    return this.apiClient.request("PUT", url, headers, undefined, undefined, option);
  }
  /**
   * Unfollow a user
   * Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
   * operationId: users/unfollow
   * Request URI: /user/following/{username}
   */
  public async users$unfollow(params: Params$users$unfollow, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/user/following/${params.parameter.username}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * List GPG keys for the authenticated user
   * Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   * operationId: users/list-gpg-keys-for-authenticated-user
   * Request URI: /user/gpg_keys
   */
  public async users$list$gpg$keys$for$authenticated$user(
    params: Params$users$list$gpg$keys$for$authenticated$user,
    option?: RequestOption,
  ): Promise<Response$users$list$gpg$keys$for$authenticated$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/user/gpg_keys`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create a GPG key for the authenticated user
   * Adds a GPG key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:gpg_key` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   * operationId: users/create-gpg-key-for-authenticated-user
   * Request URI: /user/gpg_keys
   */
  public async users$create$gpg$key$for$authenticated$user(
    params: Params$users$create$gpg$key$for$authenticated$user,
    option?: RequestOption,
  ): Promise<Response$users$create$gpg$key$for$authenticated$user$Status$201["application/json"]> {
    const url = this.baseUrl + `/user/gpg_keys`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get a GPG key for the authenticated user
   * View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   * operationId: users/get-gpg-key-for-authenticated-user
   * Request URI: /user/gpg_keys/{gpg_key_id}
   */
  public async users$get$gpg$key$for$authenticated$user(
    params: Params$users$get$gpg$key$for$authenticated$user,
    option?: RequestOption,
  ): Promise<Response$users$get$gpg$key$for$authenticated$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/user/gpg_keys/${params.parameter.gpg_key_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Delete a GPG key for the authenticated user
   * Removes a GPG key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:gpg_key` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   * operationId: users/delete-gpg-key-for-authenticated-user
   * Request URI: /user/gpg_keys/{gpg_key_id}
   */
  public async users$delete$gpg$key$for$authenticated$user(
    params: Params$users$delete$gpg$key$for$authenticated$user,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/user/gpg_keys/${params.parameter.gpg_key_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * List app installations accessible to the user access token
   * Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
   *
   * You must use a [user-to-server OAuth access token](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
   *
   * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
   *
   * You can find the permissions for the installation under the `permissions` key.
   * operationId: apps/list-installations-for-authenticated-user
   * Request URI: /user/installations
   */
  public async apps$list$installations$for$authenticated$user(
    params: Params$apps$list$installations$for$authenticated$user,
    option?: RequestOption,
  ): Promise<Response$apps$list$installations$for$authenticated$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/user/installations`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List repositories accessible to the user access token
   * List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.
   *
   * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
   *
   * You must use a [user-to-server OAuth access token](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
   *
   * The access the user has to each repository is included in the hash under the `permissions` key.
   * operationId: apps/list-installation-repos-for-authenticated-user
   * Request URI: /user/installations/{installation_id}/repositories
   */
  public async apps$list$installation$repos$for$authenticated$user(
    params: Params$apps$list$installation$repos$for$authenticated$user,
    option?: RequestOption,
  ): Promise<Response$apps$list$installation$repos$for$authenticated$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/user/installations/${params.parameter.installation_id}/repositories`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Add a repository to an app installation
   * Add a single repository to an installation. The authenticated user must have admin access to the repository.
   *
   * You must use a personal access token (which you can create via the [command line](https://docs.github.com/enterprise-server@3.4/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/enterprise-server@3.4/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
   * operationId: apps/add-repo-to-installation-for-authenticated-user
   * Request URI: /user/installations/{installation_id}/repositories/{repository_id}
   */
  public async apps$add$repo$to$installation$for$authenticated$user(
    params: Params$apps$add$repo$to$installation$for$authenticated$user,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/user/installations/${params.parameter.installation_id}/repositories/${params.parameter.repository_id}`;
    const headers = {};
    return this.apiClient.request("PUT", url, headers, undefined, undefined, option);
  }
  /**
   * Remove a repository from an app installation
   * Remove a single repository from an installation. The authenticated user must have admin access to the repository.
   *
   * You must use a personal access token (which you can create via the [command line](https://docs.github.com/enterprise-server@3.4/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/enterprise-server@3.4/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
   * operationId: apps/remove-repo-from-installation-for-authenticated-user
   * Request URI: /user/installations/{installation_id}/repositories/{repository_id}
   */
  public async apps$remove$repo$from$installation$for$authenticated$user(
    params: Params$apps$remove$repo$from$installation$for$authenticated$user,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/user/installations/${params.parameter.installation_id}/repositories/${params.parameter.repository_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * List user account issues assigned to the authenticated user
   * List issues across owned and member repositories assigned to the authenticated user.
   *
   * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
   * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
   * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
   * request id, use the "[List pull requests](https://docs.github.com/enterprise-server@3.4/rest/reference/pulls#list-pull-requests)" endpoint.
   * operationId: issues/list-for-authenticated-user
   * Request URI: /user/issues
   */
  public async issues$list$for$authenticated$user(
    params: Params$issues$list$for$authenticated$user,
    option?: RequestOption,
  ): Promise<Response$issues$list$for$authenticated$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/user/issues`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      filter: { value: params.parameter.filter, explode: false },
      state: { value: params.parameter.state, explode: false },
      labels: { value: params.parameter.labels, explode: false },
      sort: { value: params.parameter.sort, explode: false },
      direction: { value: params.parameter.direction, explode: false },
      since: { value: params.parameter.since, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List public SSH keys for the authenticated user
   * Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   * operationId: users/list-public-ssh-keys-for-authenticated-user
   * Request URI: /user/keys
   */
  public async users$list$public$ssh$keys$for$authenticated$user(
    params: Params$users$list$public$ssh$keys$for$authenticated$user,
    option?: RequestOption,
  ): Promise<Response$users$list$public$ssh$keys$for$authenticated$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/user/keys`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create a public SSH key for the authenticated user
   * Adds a public SSH key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:public_key` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   * operationId: users/create-public-ssh-key-for-authenticated-user
   * Request URI: /user/keys
   */
  public async users$create$public$ssh$key$for$authenticated$user(
    params: Params$users$create$public$ssh$key$for$authenticated$user,
    option?: RequestOption,
  ): Promise<Response$users$create$public$ssh$key$for$authenticated$user$Status$201["application/json"]> {
    const url = this.baseUrl + `/user/keys`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get a public SSH key for the authenticated user
   * View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   * operationId: users/get-public-ssh-key-for-authenticated-user
   * Request URI: /user/keys/{key_id}
   */
  public async users$get$public$ssh$key$for$authenticated$user(
    params: Params$users$get$public$ssh$key$for$authenticated$user,
    option?: RequestOption,
  ): Promise<Response$users$get$public$ssh$key$for$authenticated$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/user/keys/${params.parameter.key_id}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Delete a public SSH key for the authenticated user
   * Removes a public SSH key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:public_key` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   * operationId: users/delete-public-ssh-key-for-authenticated-user
   * Request URI: /user/keys/{key_id}
   */
  public async users$delete$public$ssh$key$for$authenticated$user(
    params: Params$users$delete$public$ssh$key$for$authenticated$user,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/user/keys/${params.parameter.key_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * List organization memberships for the authenticated user
   * operationId: orgs/list-memberships-for-authenticated-user
   * Request URI: /user/memberships/orgs
   */
  public async orgs$list$memberships$for$authenticated$user(
    params: Params$orgs$list$memberships$for$authenticated$user,
    option?: RequestOption,
  ): Promise<Response$orgs$list$memberships$for$authenticated$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/user/memberships/orgs`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      state: { value: params.parameter.state, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get an organization membership for the authenticated user
   * operationId: orgs/get-membership-for-authenticated-user
   * Request URI: /user/memberships/orgs/{org}
   */
  public async orgs$get$membership$for$authenticated$user(
    params: Params$orgs$get$membership$for$authenticated$user,
    option?: RequestOption,
  ): Promise<Response$orgs$get$membership$for$authenticated$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/user/memberships/orgs/${params.parameter.org}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Update an organization membership for the authenticated user
   * operationId: orgs/update-membership-for-authenticated-user
   * Request URI: /user/memberships/orgs/{org}
   */
  public async orgs$update$membership$for$authenticated$user(
    params: Params$orgs$update$membership$for$authenticated$user,
    option?: RequestOption,
  ): Promise<Response$orgs$update$membership$for$authenticated$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/user/memberships/orgs/${params.parameter.org}`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List user migrations
   * Lists all migrations a user has started.
   * operationId: migrations/list-for-authenticated-user
   * Request URI: /user/migrations
   */
  public async migrations$list$for$authenticated$user(
    params: Params$migrations$list$for$authenticated$user,
    option?: RequestOption,
  ): Promise<Response$migrations$list$for$authenticated$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/user/migrations`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Start a user migration
   * Initiates the generation of a user migration archive.
   * operationId: migrations/start-for-authenticated-user
   * Request URI: /user/migrations
   */
  public async migrations$start$for$authenticated$user(
    params: Params$migrations$start$for$authenticated$user,
    option?: RequestOption,
  ): Promise<Response$migrations$start$for$authenticated$user$Status$201["application/json"]> {
    const url = this.baseUrl + `/user/migrations`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Download a user migration archive
   * Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:
   *
   * *   attachments
   * *   bases
   * *   commit\_comments
   * *   issue\_comments
   * *   issue\_events
   * *   issues
   * *   milestones
   * *   organizations
   * *   projects
   * *   protected\_branches
   * *   pull\_request\_reviews
   * *   pull\_requests
   * *   releases
   * *   repositories
   * *   review\_comments
   * *   schema
   * *   users
   *
   * The archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.
   * operationId: migrations/get-archive-for-authenticated-user
   * Request URI: /user/migrations/{migration_id}/archive
   */
  public async migrations$get$archive$for$authenticated$user(
    params: Params$migrations$get$archive$for$authenticated$user,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/user/migrations/${params.parameter.migration_id}/archive`;
    const headers = {};
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * List repositories for a user migration
   * Lists all the repositories for this user migration.
   * operationId: migrations/list-repos-for-authenticated-user
   * Request URI: /user/migrations/{migration_id}/repositories
   */
  public async migrations$list$repos$for$authenticated$user(
    params: Params$migrations$list$repos$for$authenticated$user,
    option?: RequestOption,
  ): Promise<Response$migrations$list$repos$for$authenticated$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/user/migrations/${params.parameter.migration_id}/repositories`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List organizations for the authenticated user
   * List organizations for the authenticated user.
   *
   * **OAuth scope requirements**
   *
   * This only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope. OAuth requests with insufficient scope receive a `403 Forbidden` response.
   * operationId: orgs/list-for-authenticated-user
   * Request URI: /user/orgs
   */
  public async orgs$list$for$authenticated$user(
    params: Params$orgs$list$for$authenticated$user,
    option?: RequestOption,
  ): Promise<Response$orgs$list$for$authenticated$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/user/orgs`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create a user project
   * operationId: projects/create-for-authenticated-user
   * Request URI: /user/projects
   */
  public async projects$create$for$authenticated$user(
    params: Params$projects$create$for$authenticated$user,
    option?: RequestOption,
  ): Promise<Response$projects$create$for$authenticated$user$Status$201["application/json"]> {
    const url = this.baseUrl + `/user/projects`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List public email addresses for the authenticated user
   * Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/enterprise-server@3.4/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the `user:email` scope.
   * operationId: users/list-public-emails-for-authenticated-user
   * Request URI: /user/public_emails
   */
  public async users$list$public$emails$for$authenticated$user(
    params: Params$users$list$public$emails$for$authenticated$user,
    option?: RequestOption,
  ): Promise<Response$users$list$public$emails$for$authenticated$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/user/public_emails`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List repositories for the authenticated user
   * Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
   *
   * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
   * operationId: repos/list-for-authenticated-user
   * Request URI: /user/repos
   */
  public async repos$list$for$authenticated$user(
    params: Params$repos$list$for$authenticated$user,
    option?: RequestOption,
  ): Promise<Response$repos$list$for$authenticated$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/user/repos`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      visibility: { value: params.parameter.visibility, explode: false },
      affiliation: { value: params.parameter.affiliation, explode: false },
      type: { value: params.parameter.type, explode: false },
      sort: { value: params.parameter.sort, explode: false },
      direction: { value: params.parameter.direction, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
      since: { value: params.parameter.since, explode: false },
      before: { value: params.parameter.before, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Create a repository for the authenticated user
   * Creates a new repository for the authenticated user.
   *
   * **OAuth scope requirements**
   *
   * When using [OAuth](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
   *
   * *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
   * *   `repo` scope to create a private repository.
   * operationId: repos/create-for-authenticated-user
   * Request URI: /user/repos
   */
  public async repos$create$for$authenticated$user(
    params: Params$repos$create$for$authenticated$user,
    option?: RequestOption,
  ): Promise<Response$repos$create$for$authenticated$user$Status$201["application/json"]> {
    const url = this.baseUrl + `/user/repos`;
    const headers = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
  }
  /**
   * List repository invitations for the authenticated user
   * When authenticating as a user, this endpoint will list all currently open repository invitations for that user.
   * operationId: repos/list-invitations-for-authenticated-user
   * Request URI: /user/repository_invitations
   */
  public async repos$list$invitations$for$authenticated$user(
    params: Params$repos$list$invitations$for$authenticated$user,
    option?: RequestOption,
  ): Promise<Response$repos$list$invitations$for$authenticated$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/user/repository_invitations`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Decline a repository invitation
   * operationId: repos/decline-invitation-for-authenticated-user
   * Request URI: /user/repository_invitations/{invitation_id}
   */
  public async repos$decline$invitation$for$authenticated$user(
    params: Params$repos$decline$invitation$for$authenticated$user,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/user/repository_invitations/${params.parameter.invitation_id}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * Accept a repository invitation
   * operationId: repos/accept-invitation-for-authenticated-user
   * Request URI: /user/repository_invitations/{invitation_id}
   */
  public async repos$accept$invitation$for$authenticated$user(
    params: Params$repos$accept$invitation$for$authenticated$user,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/user/repository_invitations/${params.parameter.invitation_id}`;
    const headers = {};
    return this.apiClient.request("PATCH", url, headers, undefined, undefined, option);
  }
  /**
   * List repositories starred by the authenticated user
   * Lists repositories the authenticated user has starred.
   *
   * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-server@3.4/rest/overview/media-types/) via the `Accept` header:
   * operationId: activity/list-repos-starred-by-authenticated-user
   * Request URI: /user/starred
   */
  public async activity$list$repos$starred$by$authenticated$user<
    ResponseContentType extends ResponseContentType$activity$list$repos$starred$by$authenticated$user,
  >(
    params: Params$activity$list$repos$starred$by$authenticated$user<ResponseContentType>,
    option?: RequestOption,
  ): Promise<Response$activity$list$repos$starred$by$authenticated$user$Status$200[ResponseContentType]> {
    const url = this.baseUrl + `/user/starred`;
    const headers = {
      Accept: params.headers.Accept,
    };
    const queryParameters: QueryParameters = {
      sort: { value: params.parameter.sort, explode: false },
      direction: { value: params.parameter.direction, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Check if a repository is starred by the authenticated user
   * operationId: activity/check-repo-is-starred-by-authenticated-user
   * Request URI: /user/starred/{owner}/{repo}
   */
  public async activity$check$repo$is$starred$by$authenticated$user(
    params: Params$activity$check$repo$is$starred$by$authenticated$user,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/user/starred/${params.parameter.owner}/${params.parameter.repo}`;
    const headers = {};
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * Star a repository for the authenticated user
   * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#http-verbs)."
   * operationId: activity/star-repo-for-authenticated-user
   * Request URI: /user/starred/{owner}/{repo}
   */
  public async activity$star$repo$for$authenticated$user(
    params: Params$activity$star$repo$for$authenticated$user,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/user/starred/${params.parameter.owner}/${params.parameter.repo}`;
    const headers = {};
    return this.apiClient.request("PUT", url, headers, undefined, undefined, option);
  }
  /**
   * Unstar a repository for the authenticated user
   * operationId: activity/unstar-repo-for-authenticated-user
   * Request URI: /user/starred/{owner}/{repo}
   */
  public async activity$unstar$repo$for$authenticated$user(
    params: Params$activity$unstar$repo$for$authenticated$user,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/user/starred/${params.parameter.owner}/${params.parameter.repo}`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * List repositories watched by the authenticated user
   * Lists repositories the authenticated user is watching.
   * operationId: activity/list-watched-repos-for-authenticated-user
   * Request URI: /user/subscriptions
   */
  public async activity$list$watched$repos$for$authenticated$user(
    params: Params$activity$list$watched$repos$for$authenticated$user,
    option?: RequestOption,
  ): Promise<Response$activity$list$watched$repos$for$authenticated$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/user/subscriptions`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List teams for the authenticated user
   * List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/).
   * operationId: teams/list-for-authenticated-user
   * Request URI: /user/teams
   */
  public async teams$list$for$authenticated$user(
    params: Params$teams$list$for$authenticated$user,
    option?: RequestOption,
  ): Promise<Response$teams$list$for$authenticated$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/user/teams`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List users
   * Lists all users, in the order that they signed up on GitHub Enterprise Server. This list includes personal user accounts and organization accounts.
   *
   * Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of users.
   * operationId: users/list
   * Request URI: /users
   */
  public async users$list(params: Params$users$list, option?: RequestOption): Promise<Response$users$list$Status$200["application/json"]> {
    const url = this.baseUrl + `/users`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      since: { value: params.parameter.since, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get a user
   * Provides publicly available information about someone with a GitHub account.
   *
   * GitHub Apps with the `Plan` user permission can use this endpoint to retrieve information about a user's GitHub Enterprise Server plan. The GitHub App must be authenticated as a user. See "[Identifying and authorizing users for GitHub Apps](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)" for details about authentication. For an example response, see 'Response with GitHub Enterprise Server plan information' below"
   *
   * The `email` key in the following response is the publicly visible email address from your GitHub Enterprise Server [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub Enterprise Server. For more information, see [Authentication](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#authentication).
   *
   * The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see "[Emails API](https://docs.github.com/enterprise-server@3.4/rest/reference/users#emails)".
   * operationId: users/get-by-username
   * Request URI: /users/{username}
   */
  public async users$get$by$username(
    params: Params$users$get$by$username,
    option?: RequestOption,
  ): Promise<Response$users$get$by$username$Status$200["application/json"]> {
    const url = this.baseUrl + `/users/${params.parameter.username}`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * List events for the authenticated user
   * If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.
   * operationId: activity/list-events-for-authenticated-user
   * Request URI: /users/{username}/events
   */
  public async activity$list$events$for$authenticated$user(
    params: Params$activity$list$events$for$authenticated$user,
    option?: RequestOption,
  ): Promise<Response$activity$list$events$for$authenticated$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/users/${params.parameter.username}/events`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List organization events for the authenticated user
   * This is the user's organization dashboard. You must be authenticated as the user to view this.
   * operationId: activity/list-org-events-for-authenticated-user
   * Request URI: /users/{username}/events/orgs/{org}
   */
  public async activity$list$org$events$for$authenticated$user(
    params: Params$activity$list$org$events$for$authenticated$user,
    option?: RequestOption,
  ): Promise<Response$activity$list$org$events$for$authenticated$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/users/${params.parameter.username}/events/orgs/${params.parameter.org}`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List public events for a user
   * operationId: activity/list-public-events-for-user
   * Request URI: /users/{username}/events/public
   */
  public async activity$list$public$events$for$user(
    params: Params$activity$list$public$events$for$user,
    option?: RequestOption,
  ): Promise<Response$activity$list$public$events$for$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/users/${params.parameter.username}/events/public`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List followers of a user
   * Lists the people following the specified user.
   * operationId: users/list-followers-for-user
   * Request URI: /users/{username}/followers
   */
  public async users$list$followers$for$user(
    params: Params$users$list$followers$for$user,
    option?: RequestOption,
  ): Promise<Response$users$list$followers$for$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/users/${params.parameter.username}/followers`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List the people a user follows
   * Lists the people who the specified user follows.
   * operationId: users/list-following-for-user
   * Request URI: /users/{username}/following
   */
  public async users$list$following$for$user(
    params: Params$users$list$following$for$user,
    option?: RequestOption,
  ): Promise<Response$users$list$following$for$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/users/${params.parameter.username}/following`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Check if a user follows another user
   * operationId: users/check-following-for-user
   * Request URI: /users/{username}/following/{target_user}
   */
  public async users$check$following$for$user(params: Params$users$check$following$for$user, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/users/${params.parameter.username}/following/${params.parameter.target_user}`;
    const headers = {};
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * List gists for a user
   * Lists public gists for the specified user:
   * operationId: gists/list-for-user
   * Request URI: /users/{username}/gists
   */
  public async gists$list$for$user(
    params: Params$gists$list$for$user,
    option?: RequestOption,
  ): Promise<Response$gists$list$for$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/users/${params.parameter.username}/gists`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      since: { value: params.parameter.since, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List GPG keys for a user
   * Lists the GPG keys for a user. This information is accessible by anyone.
   * operationId: users/list-gpg-keys-for-user
   * Request URI: /users/{username}/gpg_keys
   */
  public async users$list$gpg$keys$for$user(
    params: Params$users$list$gpg$keys$for$user,
    option?: RequestOption,
  ): Promise<Response$users$list$gpg$keys$for$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/users/${params.parameter.username}/gpg_keys`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get contextual information for a user
   * Provides hovercard information when authenticated through basic auth or OAuth with the `repo` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.
   *
   * The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository via cURL, it would look like this:
   *
   * ```shell
   *  curl -u username:token
   *   https://api.github.com/users/octocat/hovercard?subject_type=repository&subject_id=1300192
   * ```
   * operationId: users/get-context-for-user
   * Request URI: /users/{username}/hovercard
   */
  public async users$get$context$for$user(
    params: Params$users$get$context$for$user,
    option?: RequestOption,
  ): Promise<Response$users$get$context$for$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/users/${params.parameter.username}/hovercard`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      subject_type: { value: params.parameter.subject_type, explode: false },
      subject_id: { value: params.parameter.subject_id, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Get a user installation for the authenticated app
   * Enables an authenticated GitHub App to find the user’s installation information.
   *
   * You must use a [JWT](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * operationId: apps/get-user-installation
   * Request URI: /users/{username}/installation
   */
  public async apps$get$user$installation(
    params: Params$apps$get$user$installation,
    option?: RequestOption,
  ): Promise<Response$apps$get$user$installation$Status$200["application/json"]> {
    const url = this.baseUrl + `/users/${params.parameter.username}/installation`;
    const headers = {
      Accept: "application/json",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
  /**
   * List public keys for a user
   * Lists the _verified_ public SSH keys for a user. This is accessible by anyone.
   * operationId: users/list-public-keys-for-user
   * Request URI: /users/{username}/keys
   */
  public async users$list$public$keys$for$user(
    params: Params$users$list$public$keys$for$user,
    option?: RequestOption,
  ): Promise<Response$users$list$public$keys$for$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/users/${params.parameter.username}/keys`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List organizations for a user
   * List [public organization memberships](https://docs.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.
   *
   * This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/enterprise-server@3.4/rest/reference/orgs#list-organizations-for-the-authenticated-user) API instead.
   * operationId: orgs/list-for-user
   * Request URI: /users/{username}/orgs
   */
  public async orgs$list$for$user(
    params: Params$orgs$list$for$user,
    option?: RequestOption,
  ): Promise<Response$orgs$list$for$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/users/${params.parameter.username}/orgs`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List user projects
   * operationId: projects/list-for-user
   * Request URI: /users/{username}/projects
   */
  public async projects$list$for$user(
    params: Params$projects$list$for$user,
    option?: RequestOption,
  ): Promise<Response$projects$list$for$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/users/${params.parameter.username}/projects`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      state: { value: params.parameter.state, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List events received by the authenticated user
   * These are events that you've received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events.
   * operationId: activity/list-received-events-for-user
   * Request URI: /users/{username}/received_events
   */
  public async activity$list$received$events$for$user(
    params: Params$activity$list$received$events$for$user,
    option?: RequestOption,
  ): Promise<Response$activity$list$received$events$for$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/users/${params.parameter.username}/received_events`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List public events received by a user
   * operationId: activity/list-received-public-events-for-user
   * Request URI: /users/{username}/received_events/public
   */
  public async activity$list$received$public$events$for$user(
    params: Params$activity$list$received$public$events$for$user,
    option?: RequestOption,
  ): Promise<Response$activity$list$received$public$events$for$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/users/${params.parameter.username}/received_events/public`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List repositories for a user
   * Lists public repositories for the specified user. Note: For GitHub AE, this endpoint will list internal repositories for the specified user.
   * operationId: repos/list-for-user
   * Request URI: /users/{username}/repos
   */
  public async repos$list$for$user(
    params: Params$repos$list$for$user,
    option?: RequestOption,
  ): Promise<Response$repos$list$for$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/users/${params.parameter.username}/repos`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      type: { value: params.parameter.type, explode: false },
      sort: { value: params.parameter.sort, explode: false },
      direction: { value: params.parameter.direction, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Promote a user to be a site administrator
   * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#http-verbs)."
   * operationId: enterprise-admin/promote-user-to-be-site-administrator
   * Request URI: /users/{username}/site_admin
   */
  public async enterprise$admin$promote$user$to$be$site$administrator(
    params: Params$enterprise$admin$promote$user$to$be$site$administrator,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/users/${params.parameter.username}/site_admin`;
    const headers = {};
    return this.apiClient.request("PUT", url, headers, undefined, undefined, option);
  }
  /**
   * Demote a site administrator
   * You can demote any user account except your own.
   * operationId: enterprise-admin/demote-site-administrator
   * Request URI: /users/{username}/site_admin
   */
  public async enterprise$admin$demote$site$administrator(
    params: Params$enterprise$admin$demote$site$administrator,
    option?: RequestOption,
  ): Promise<void> {
    const url = this.baseUrl + `/users/${params.parameter.username}/site_admin`;
    const headers = {};
    return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
  }
  /**
   * List repositories starred by a user
   * Lists repositories a user has starred.
   *
   * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-server@3.4/rest/overview/media-types/) via the `Accept` header:
   * operationId: activity/list-repos-starred-by-user
   * Request URI: /users/{username}/starred
   */
  public async activity$list$repos$starred$by$user(
    params: Params$activity$list$repos$starred$by$user,
    option?: RequestOption,
  ): Promise<Response$activity$list$repos$starred$by$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/users/${params.parameter.username}/starred`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      sort: { value: params.parameter.sort, explode: false },
      direction: { value: params.parameter.direction, explode: false },
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * List repositories watched by a user
   * Lists repositories a user is watching.
   * operationId: activity/list-repos-watched-by-user
   * Request URI: /users/{username}/subscriptions
   */
  public async activity$list$repos$watched$by$user(
    params: Params$activity$list$repos$watched$by$user,
    option?: RequestOption,
  ): Promise<Response$activity$list$repos$watched$by$user$Status$200["application/json"]> {
    const url = this.baseUrl + `/users/${params.parameter.username}/subscriptions`;
    const headers = {
      Accept: "application/json",
    };
    const queryParameters: QueryParameters = {
      per_page: { value: params.parameter.per_page, explode: false },
      page: { value: params.parameter.page, explode: false },
    };
    return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
  }
  /**
   * Suspend a user
   * If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://docs.github.com/enterprise/admin/guides/user-management/using-ldap), Active Directory LDAP-authenticated users cannot be suspended through this API. If you attempt to suspend an Active Directory LDAP-authenticated user through this API, it will return a `403` response.
   *
   * You can suspend any user account except your own.
   *
   * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#http-verbs)."
   * operationId: enterprise-admin/suspend-user
   * Request URI: /users/{username}/suspended
   */
  public async enterprise$admin$suspend$user(params: Params$enterprise$admin$suspend$user, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/users/${params.parameter.username}/suspended`;
    const headers = {
      "Content-Type": "application/json",
    };
    return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Unsuspend a user
   * If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://docs.github.com/enterprise/admin/guides/user-management/using-ldap), this API is disabled and will return a `403` response. Active Directory LDAP-authenticated users cannot be unsuspended using the API.
   * operationId: enterprise-admin/unsuspend-user
   * Request URI: /users/{username}/suspended
   */
  public async enterprise$admin$unsuspend$user(params: Params$enterprise$admin$unsuspend$user, option?: RequestOption): Promise<void> {
    const url = this.baseUrl + `/users/${params.parameter.username}/suspended`;
    const headers = {
      "Content-Type": "application/json",
    };
    return this.apiClient.request("DELETE", url, headers, params.requestBody, undefined, option);
  }
  /**
   * Get the Zen of GitHub
   * Get a random sentence from the Zen of GitHub
   * operationId: meta/get-zen
   * Request URI: /zen
   */
  public async meta$get$zen(option?: RequestOption): Promise<Response$meta$get$zen$Status$200["text/plain"]> {
    const url = this.baseUrl + `/zen`;
    const headers = {
      Accept: "text/plain",
    };
    return this.apiClient.request("GET", url, headers, undefined, undefined, option);
  }
}
